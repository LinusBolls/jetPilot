%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1909.m10.i005.n010.eps
%%Creator: Adobe Illustrator(R) 21.1
%%For: Admin
%%CreationDate: 10/20/2019
%%BoundingBox: 0 0 3104 1940
%%HiResBoundingBox: 0 0 3103.2000 1939.5000
%%CropBox: 0 0 3103.2000 1939.5000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.1.0 x326 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=0 RasterRes=72 GradRes=72 Text=0 Stroke=0 Clip=0 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-repair">Печать</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:headline>
            <rdf:Alt>
               <rdf:li>Radial explosion silhouette. Exploding bursts, round explosions cloud and exploded bomb effect black silhouettes. Explosion burst dust, power bombs explode effect. Isolated symbols graphic vector set</rdf:li>
            </rdf:Alt>
         </dc:headline>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-repair">Radial explosion silhouette. Exploding bursts, round explosions cloud and exploded bomb effect black silhouettes. Explosion burst dust, power bombs explode effect. Isolated symbols graphic vector set</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>radial</rdf:li>
               <rdf:li>explosion</rdf:li>
               <rdf:li>bang</rdf:li>
               <rdf:li>blast</rdf:li>
               <rdf:li>effect</rdf:li>
               <rdf:li>silhouette</rdf:li>
               <rdf:li>flash</rdf:li>
               <rdf:li>power</rdf:li>
               <rdf:li>motion</rdf:li>
               <rdf:li>smoke</rdf:li>
               <rdf:li>burst</rdf:li>
               <rdf:li>boom</rdf:li>
               <rdf:li>celebration</rdf:li>
               <rdf:li>firework</rdf:li>
               <rdf:li>explosive</rdf:li>
               <rdf:li>cloud</rdf:li>
               <rdf:li>explode</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>game</rdf:li>
               <rdf:li>hot</rdf:li>
               <rdf:li>speed</rdf:li>
               <rdf:li>shot</rdf:li>
               <rdf:li>comic</rdf:li>
               <rdf:li>dynamite</rdf:li>
               <rdf:li>shape</rdf:li>
               <rdf:li>bright</rdf:li>
               <rdf:li>detonation</rdf:li>
               <rdf:li>birthday</rdf:li>
               <rdf:li>exhibition</rdf:li>
               <rdf:li>celebrate</rdf:li>
               <rdf:li>festival</rdf:li>
               <rdf:li>pyrotechnics</rdf:li>
               <rdf:li>carnival</rdf:li>
               <rdf:li>ceremony</rdf:li>
               <rdf:li>party</rdf:li>
               <rdf:li>air</rdf:li>
               <rdf:li>steam</rdf:li>
               <rdf:li>dust</rdf:li>
               <rdf:li>puff</rdf:li>
               <rdf:li>vapor</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>icon</rdf:li>
               <rdf:li>sign</rdf:li>
               <rdf:li>element</rdf:li>
               <rdf:li>symbol</rdf:li>
               <rdf:li>object</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>set</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2019-05-18T09:11:40+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-10-20T10:48:38.623+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2019-05-18T09:11:39+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>160</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWuacwnIcyCwWu9BsTT6cVbxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxVi/nnz5pHkxbDUNbuI7bR7mR7e4kNWlSQpzidEWrOvwFGCqTVlPQHFXlejf85E+ffMep&#xA;PP5Z/L661Ly5HJw+sh3WRlB6iTh6Iam/Cp+ffFWS+VPzbvdU8yXNtr2k6j5fgs47u69G4gd1f0Qk&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F87F117407206811822AB2A6B75D99AD</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stRef:instanceID>
            <stRef:documentID>xmp.did:0880117407206811822A8072EAEFE205</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AC3D3EC9D6DEE611ADF3FA58164AFD71</stEvt:instanceID>
                  <stEvt:when>2017-01-20T09:07:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T18:36:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T21:11:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:577FABBD61206811822AA8872E1D75D1</stEvt:instanceID>
                  <stEvt:when>2019-04-07T19:22:06+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stEvt:instanceID>
                  <stEvt:when>2019-05-11T00:15:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</stEvt:instanceID>
                  <stEvt:when>2019-05-18T09:11:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3103.200000</stDim:w>
            <stDim:h>1939.500000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1939.5 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1939.5 li
3103.2 1939.5 li
3103.2 0 li
cp
clp
3103.2 1939.5 mo
-9.76563e-05 1939.5 li
-9.76563e-05 0 li
3103.2 0 li
3103.2 1939.5 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
831.836 879.381 mo
831.836 879.381 796.807 939.993 817.686 961.149 cv
811.006 978.042 837.642 1049.78 879.013 1057.7 cv
857.703 1064.84 817.382 1016.38 817.382 1016.38 cv
817.382 1016.38 830.7 1093.42 926.667 1080.08 cv
896.391 1105.65 846.957 1111.01 817.336 1078.3 cv
796.971 1055.8 807.622 1031.77 807.622 1031.77 cv
807.622 1031.77 793.777 1024.3 786.733 1009.87 cv
779.685 995.417 793.983 976.148 793.983 976.148 cv
793.983 976.148 778.589 964.851 779.096 944.974 cv
780.137 903.679 831.836 879.381 831.836 879.381 cv
cp
.0784314 .0784314 .0784314 rgb
f
821.053 854.609 mo
778.681 832.533 726.393 800.202 687.138 778.071 cv
723.737 804.903 760.004 832.327 797.209 858.311 cv
798.383 856.065 819.63 856.122 821.053 854.609 cv
cp
f
783.549 885.063 mo
784.62 883.533 791.693 880.539 792.764 878.998 cv
772.403 874.728 744.578 862.642 729.908 856.686 cv
745.649 867.552 763.261 884.06 781.392 890.371 cv
782.109 888.597 782.825 886.837 783.549 885.063 cv
cp
f
839.709 702.717 mo
839.709 702.717 870.391 777.267 872.943 799.406 cv
880.589 799.324 882.83 795.662 895.002 790.74 cv
882.356 787.453 857.21 728.884 839.709 702.717 cv
cp
f
847.784 837.542 mo
847.784 837.542 847.999 807.15 874.777 792.514 cv
901.552 777.864 924.64 790.782 924.64 790.782 cv
924.64 790.782 931.797 766.62 962.801 770.27 cv
993.791 773.925 998.623 794.5 998.623 794.5 cv
998.623 794.5 1020 808.009 1020.68 817.757 cv
1033.2 809.579 1063.08 815.531 1064.89 823.534 cv
1057.98 820.754 1041.31 816.933 1035.62 820.44 cv
1047.68 822.021 1061.49 827.021 1059.99 845.958 cv
1051.32 839.177 1033.34 822.187 1015.14 833.289 cv
1010.97 820.735 977.225 778.7 934.123 817.612 cv
923.663 806.269 880.456 787.854 847.784 837.542 cv
cp
f
786.44 1046.04 mo
767.729 1059 743.675 1075.58 724.964 1088.54 cv
736.069 1083.03 747.149 1077.49 758.196 1071.88 cv
773.54 1064.07 789.915 1060.65 786.44 1046.04 cv
cp
f
884.267 943.36 mo
871.319 944.679 847.09 945.041 834.12 944.328 cv
847.595 947.123 861.379 949.749 874.454 954.114 cv
879.356 951.95 884.611 946.51 884.267 943.36 cv
cp
f
886.439 871.643 mo
877.481 865.51 861.804 854.735 855.592 851.589 cv
861.419 858.218 867.253 864.849 873.078 871.473 cv
879.947 873.72 884.478 873.4 886.439 871.643 cv
cp
f
938.827 680.925 mo
938.483 782.593 li
951.449 780.148 li
938.827 680.925 li
cp
f
956.037 780.093 mo
971.522 731.753 li
965.233 781.514 li
956.037 780.093 li
cp
f
1166.36 789.107 mo
1132.7 810.139 1090.4 838.097 1056.77 859.123 cv
1059.4 861.59 1062.82 862.562 1069.38 863.618 cv
1101.43 840.803 1135.29 813.876 1166.36 789.107 cv
cp
f
1026.21 914.953 mo
1071.99 896.053 1112.01 872.73 1148.37 853.521 cv
1127.33 862.04 1021.58 905.63 1013.74 909.265 cv
1016.11 912.283 1019.31 914.711 1026.21 914.953 cv
cp
f
970.716 1047.28 mo
966.082 1037.18 961.774 1037.27 959.564 1037.25 cv
975.204 1081 992.407 1128.88 1008.04 1172.61 cv
995.08 1128.55 985.996 1090.59 970.716 1047.28 cv
cp
f
983.198 1048.93 mo
971.891 1054.5 1008.26 1140.13 1013.72 1156.4 cv
1004.12 1120.57 995.652 1083.86 983.198 1048.93 cv
cp
f
894.826 1086.37 mo
879.764 1170.82 li
879.764 1170.82 908.048 1089.08 906.31 1087.39 cv
904.565 1085.69 894.826 1086.37 894.826 1086.37 cv
cp
f
913.183 1086.73 mo
908.059 1139.53 li
921.165 1083.2 li
913.183 1086.73 li
cp
f
1093.53 1016.98 mo
1220.5 1040.73 li
1220.5 1040.73 1098 1007.75 1096.87 1008.91 cv
1095.73 1010.08 1091.2 1014.14 1093.53 1016.98 cv
cp
f
902.484 956.148 mo
900.771 957.316 899.474 993.438 925.901 997.727 cv
936.099 999.377 936.213 997.037 938.45 992.988 cv
944.793 995.787 952.409 1010.03 968.394 1004.1 cv
984.372 998.19 1006.92 965.257 1010.79 952.59 cv
1014.95 965.729 1009.52 978 1003.76 988.223 cv
1000.54 993.905 985.117 1012.52 971.951 1014.39 cv
982.865 1015.97 1016.31 984.052 1019.02 970.263 cv
1012.95 990.399 989.381 1034.25 944.467 1017.58 cv
922.879 1033.87 867.939 992.676 902.484 956.148 cv
cp
f
885.879 892.9 mo
888.144 889.809 904.717 869.366 921.947 871.834 cv
939.17 874.31 943.949 891.076 943.949 891.076 cv
943.949 891.076 930.655 897.72 928.123 909.978 cv
937.623 905.285 946.72 899.066 964.335 901.529 cv
981.939 904.01 990.551 920.722 990.551 920.722 cv
990.551 920.722 998.91 883.937 954.594 885.6 cv
953.709 875.29 968.448 860.971 986.485 868.029 cv
1004.55 875.075 1018.48 890.966 1018.48 890.966 cv
1018.48 890.966 1022.4 865.695 995.593 862.193 cv
984.742 848.931 968.696 849.51 961.858 853.409 cv
944.9 840.993 898.425 854.529 885.879 892.9 cv
cp
f
1067.29 900.31 mo
1067.29 900.31 1112.75 946.232 1075.62 1006.3 cv
1072.86 1064.23 1045.77 1069.4 1009.89 1082.25 cv
1031.66 1087.26 1043.15 1088.66 1062.5 1076.97 cv
1078.89 1067.07 1086.58 1047.92 1086.58 1047.92 cv
1086.58 1047.92 1098.3 1040.52 1103.27 1025.36 cv
1108.25 1010.18 1103.05 997.954 1103.05 997.954 cv
1103.05 997.954 1132.91 985.285 1125.94 945.517 cv
1118.97 905.742 1082.69 900.31 1082.69 900.31 cv
1067.29 900.31 li
cp
f
1024.11 981.851 mo
1031.29 985.584 1045.76 991.161 1052.94 994.899 cv
1045.18 994.996 1041.56 995.181 1033.79 995.273 cv
1028.23 992.332 1025.27 986.11 1024.11 981.851 cv
cp
f
1024.32 1031.17 mo
1024.32 1031.17 1020.37 1052.61 995.643 1063.21 cv
970.931 1073.83 949.839 1068.35 949.839 1068.35 cv
949.839 1068.35 969.176 1087.61 999.6 1074.26 cv
1030.02 1060.91 1024.32 1031.17 1024.32 1031.17 cv
cp
f
732.805 1006.86 mo
741.947 1003.7 751.07 1000.53 760.205 997.357 cv
757.504 1007.03 743.646 1005.15 732.805 1006.86 cv
cp
f
1078.59 1096.65 mo
1075.26 1090.06 1075.96 1083.81 1078.42 1081.49 cv
1084.26 1090.79 1097.65 1108.28 1103.48 1117.57 cv
1095.19 1110.59 1086.89 1103.62 1078.59 1096.65 cv
cp
f
1148.33 948.305 mo
1147.86 951.37 1147.38 954.442 1146.91 957.5 cv
1159.37 955.824 1171.84 954.156 1184.31 952.48 cv
1172.31 951.083 1160.32 949.699 1148.33 948.305 cv
cp
f
957.18 1124.06 mo
965.03 1156.83 972.849 1189.6 980.697 1222.39 cv
975.331 1189.01 967.016 1142.06 961.654 1108.68 cv
959.846 1111.02 957.602 1116.25 957.18 1124.06 cv
cp
f
2067.9 410.06 mo
2062.75 408.341 1978.46 441.882 1978.46 441.882 cv
1978.46 441.882 2061.03 404.037 2062.75 395.44 cv
2064.46 386.839 2067.9 410.06 2067.9 410.06 cv
cp
f
2060.16 358.454 mo
2055 355.015 1951.8 357.596 1951.8 357.596 cv
1951.8 357.596 2044.68 351.572 2050.71 348.992 cv
2056.72 346.41 2060.16 358.454 2060.16 358.454 cv
cp
f
2064.46 330.071 mo
1981.03 332.651 li
2064.46 321.47 li
2064.46 330.071 li
cp
f
2073.06 298.244 mo
1962.97 200.196 li
2073.93 290.506 li
2073.06 298.244 li
cp
f
2129.83 257.823 mo
2128.11 199.34 li
2134.99 256.102 li
2129.83 257.823 li
cp
f
2151.33 252.664 mo
2162.52 100.424 li
2162.52 100.424 2154.78 250.944 2156.49 253.522 cv
2158.21 256.102 2151.33 252.664 2151.33 252.664 cv
cp
f
2103.17 259.545 mo
2031.78 164.073 li
2096.28 262.986 li
2103.17 259.545 li
cp
f
2114.35 444.46 mo
2091.12 541.654 li
2091.12 541.654 2120.36 463.388 2123.81 458.226 cv
2127.25 453.068 2114.35 444.46 2114.35 444.46 cv
cp
f
2098.87 448.758 mo
2075.64 524.452 li
2075.64 524.452 2109.19 453.068 2111.77 448.758 cv
2114.35 444.46 2098.87 448.758 2098.87 448.758 cv
cp
f
2149.62 458.226 mo
2149.62 458.226 2158.21 588.098 2158.21 596.693 cv
2160.8 569.172 2160.8 459.078 2160.8 459.078 cv
2149.62 458.226 li
cp
f
2141.01 463.388 mo
2141.01 463.388 2135.85 562.295 2135.85 568.308 cv
2139.29 548.529 2146.18 462.523 2146.18 462.523 cv
2141.01 463.388 li
cp
f
2188.32 465.966 mo
2194.34 535.629 li
2194.34 535.629 2191.76 468.546 2193.47 459.941 cv
2195.19 451.338 2188.32 465.966 2188.32 465.966 cv
cp
f
1960.11 409.202 mo
1960.11 409.202 2040.38 374.797 2050.71 361.034 cv
2048.41 372.505 2036.94 385.118 2036.94 385.118 cv
1960.11 409.202 li
cp
f
1977.59 240.621 mo
1977.59 240.621 2056.72 284.487 2058.45 295.668 cv
2062.75 284.487 2062.75 284.487 2062.75 284.487 cv
1977.59 240.621 li
cp
f
2257.21 425.25 mo
2238 416.016 2236.15 426.094 2243.8 442.488 cv
2228.59 425.583 2216.12 420.206 2215.66 435.487 cv
2204.51 427.934 2203.33 445.43 2204.78 458.567 cv
2195.51 448.872 2176.2 432.25 2171.62 456.898 cv
2169.74 441.463 2149.36 432.147 2136.56 448.863 cv
2138.78 424.624 2127.31 413.08 2110.2 424.4 cv
2116.11 406.087 2103.1 400.106 2085.86 404.612 cv
2098.46 382.211 2090.66 376.584 2067.2 378.398 cv
2085.96 359.815 2083.77 331.885 2065.72 331.234 cv
2065.72 331.234 2081.47 322.657 2072.74 313.559 cv
2087.53 310.583 2088.65 294.216 2080.53 284.595 cv
2098.16 291.459 2124.56 280.769 2119.62 258.882 cv
2135.63 280.937 2149.78 252.977 2150.05 249.024 cv
2153.73 281.027 2168.04 267.818 2174.61 256.918 cv
2174.1 281.835 2190.58 271.044 2196.3 264.055 cv
2189.82 282.328 2212.7 280.474 2219.56 274.131 cv
2211.91 292.327 2219.86 304.208 2238.87 299.252 cv
2230.32 313.422 2231.58 320.876 2246.8 320.199 cv
2243.94 327.947 2233.37 337.441 2253.91 344.499 cv
2242.29 352.221 2232.17 372.522 2258.56 379.406 cv
2254.38 389.333 2253.77 389.861 2260.94 396.013 cv
2247.78 400.794 2255.27 419.448 2257.21 425.25 cv
cp
2405.92 328.351 mo
2405.92 328.351 2298.41 330.071 2298.41 326.63 cv
2298.41 323.191 2352.59 318.892 2352.59 318.892 cv
2281.2 322.328 li
2305.29 313.729 li
2305.29 313.729 2276.9 315.451 2275.19 308.571 cv
2273.46 301.686 2472.15 228.583 2472.15 228.583 cv
2269.16 294.81 li
2312.17 275.025 li
2312.17 275.025 2264 294.81 2258.84 283.623 cv
2253.68 272.441 2307.01 225.136 2351.73 179.553 cv
2343.13 187.296 2243.36 275.025 2233.05 265.566 cv
2222.72 256.102 2279.48 158.91 2279.48 158.91 cv
2279.48 158.91 2214.11 252.664 2203.8 248.359 cv
2193.47 244.063 2204.66 204.5 2204.66 204.5 cv
2204.66 204.5 2190.9 231.162 2181.44 229.442 cv
2171.97 227.717 2184.01 84.9438 2184.01 84.9438 cv
2184.01 84.9438 2162.52 242.343 2155.63 243.2 cv
2148.75 244.063 2134.99 184.715 2134.99 184.715 cv
2134.99 184.715 2134.99 238.039 2129.83 242.343 cv
2124.67 246.638 2033.5 122.789 2033.5 122.789 cv
2033.5 122.789 2099.72 242.343 2091.12 250.085 cv
2082.53 257.823 1956.1 177.836 1956.1 177.836 cv
1956.1 177.836 2057.64 278.54 2056.43 283.628 cv
2051.28 305.418 1986.19 288.783 1986.19 288.783 cv
1986.19 288.783 2057.01 314.016 2057.01 324.334 cv
2057.01 334.656 1918.25 348.131 1918.25 348.131 cv
1918.25 348.131 2042.68 350.43 2046.11 363.33 cv
2049.56 376.23 1923.41 444.46 1923.41 444.46 cv
1923.41 444.46 2058.45 398.017 2062.75 404.037 cv
2067.05 410.06 2012.86 480.584 2012.86 480.584 cv
2012.86 480.584 2079.38 423.822 2082.81 426.397 cv
2086.25 428.978 2007.7 573.47 2007.7 573.47 cv
2007.7 573.47 2101.45 449.621 2111.77 454.781 cv
2122.09 459.941 2104.03 544.232 2104.03 544.232 cv
2104.03 544.232 2134.99 465.966 2154.78 470.264 cv
2174.55 474.563 2184.88 604.433 2184.88 604.433 cv
2184.88 604.433 2186.59 467.683 2196.92 465.966 cv
2207.24 464.238 2231.33 511.552 2231.33 511.552 cv
2231.33 511.552 2227.88 496.071 2229.61 493.486 cv
2231.33 490.906 2273.46 565.73 2273.46 565.73 cv
2273.46 565.73 2225.29 461.661 2226.16 457.363 cv
2227.02 453.068 2274.33 511.552 2274.33 511.552 cv
2274.33 511.552 2227.02 445.323 2232.19 442.743 cv
2237.34 440.165 2282.06 495.206 2282.06 495.206 cv
2282.06 495.206 2253.68 454.781 2257.12 452.203 cv
2260.56 449.621 2322.5 515.849 2322.5 515.849 cv
2322.5 515.849 2256.26 437.583 2257.98 433.275 cv
2259.71 428.978 2302.71 460.804 2302.71 460.804 cv
2302.71 460.804 2262.28 429.842 2264 426.397 cv
2265.72 422.957 2369.51 491.769 2369.51 491.769 cv
2369.51 491.769 2266.58 406.618 2268.31 400.599 cv
2270.03 394.58 2348.86 417.228 2348.86 417.228 cv
2348.86 417.228 2277.76 392.856 2277.76 382.536 cv
2277.76 372.213 2368.37 392 2368.37 392 cv
2368.37 392 2288.09 373.938 2289.81 371.356 cv
2291.53 368.774 2377.54 364.473 2377.54 364.473 cv
2377.54 364.473 2282.93 353.294 2284.64 346.41 cv
2286.36 339.535 2405.92 328.351 2405.92 328.351 cv
cp
f
2029.37 1015.84 mo
2029.37 1015.84 1990.62 957.079 2027.71 913.459 cv
2018.69 843.767 2068.35 827.564 2125.58 818.45 cv
2123.09 788.589 2071.66 769.512 2062.54 809.325 cv
2026.05 793.564 2006.15 834.208 2016.1 854.108 cv
1982.09 850.789 1912.43 919.625 1989.55 968.567 cv
1978.78 1001.74 2000.35 1021.64 2029.37 1015.84 cv
cp
f
2165.39 795.224 mo
2165.39 795.224 2188.6 768.683 2213.48 772.003 cv
2238.37 775.318 2245.84 804.343 2245.84 810.985 cv
2264.92 801.858 2303.89 810.149 2304.72 835.856 cv
2317.16 839.177 2335.41 855.771 2335.41 872.352 cv
2342.03 846.644 2317.99 830.885 2310.53 830.049 cv
2310.53 801.858 2279.01 792.735 2269.88 793.564 cv
2265.73 767.855 2202.7 718.089 2165.39 795.224 cv
cp
f
2088.26 956.957 mo
2088.26 956.957 2121.7 908.848 2170.36 913.83 cv
2219.02 918.8 2226.48 963.586 2226.48 963.586 cv
2226.48 963.586 2258.28 931.246 2233.11 903.315 cv
2220.55 889.381 2196.63 898.345 2196.63 898.345 cv
2196.63 898.345 2178.38 865.723 2142.44 876.22 cv
2106.5 886.734 2086.6 929.861 2088.26 956.957 cv
cp
f
2093.09 992.07 mo
2093.09 992.07 2098.07 1015.85 2118.52 1024.7 cv
2138.98 1033.54 2152.81 1019.72 2152.81 1019.72 cv
2152.81 1019.72 2154.46 1032.44 2176.02 1037.97 cv
2197.6 1043.49 2218.61 1028.02 2218.61 1028.02 cv
2218.61 1028.02 2205.89 1077.77 2172.16 1075.56 cv
2138.43 1073.36 2136.22 1051.79 2136.22 1051.79 cv
2136.22 1051.79 2113.54 1056.76 2101.38 1043.49 cv
2089.22 1030.23 2093.09 992.07 2093.09 992.07 cv
cp
f
2040.15 1043.21 mo
2040.15 1043.21 2042.76 1107.49 2096.91 1104.97 cv
2128.5 1141.58 2183.64 1124.49 2183.64 1124.49 cv
2183.64 1124.49 2177.83 1162.64 2152.11 1146.88 cv
2132.2 1156.01 2098.2 1143.56 2091.57 1125.32 cv
2079.96 1140.24 1991.21 1096.29 2040.15 1043.21 cv
cp
f
2238.37 1101.27 mo
2238.37 1101.27 2301.41 1069.74 2315.51 1006.71 cv
2329.6 943.682 2320.48 927.092 2303.89 908.848 cv
2337.07 916.315 2338.73 941.198 2338.73 951.15 cv
2359.45 950.313 2379.37 996.759 2349.5 1009.2 cv
2362.79 1031.6 2342.88 1060.63 2328.78 1065.59 cv
2346.18 1062.29 2362.79 1031.6 2362.79 1031.6 cv
2362.79 1031.6 2357.8 1083.85 2303.07 1082.19 cv
2301.41 1109.56 2254.97 1121.17 2238.37 1101.27 cv
cp
f
1980.56 1040.04 mo
1965.91 1050.7 1924.87 1064.77 1924.87 1064.77 cv
1924.87 1064.77 1980.7 1054.99 2003.76 1050.19 cv
1998.69 1047.29 1989.27 1045.12 1980.56 1040.04 cv
cp
f
1981.27 1129.46 mo
1981.27 1129.46 2007.52 1113.48 2020.64 1105.49 cv
2004 1105.44 1981.27 1129.46 1981.27 1129.46 cv
cp
f
2208.72 1148.52 mo
2212.68 1157.87 2222.61 1175.91 2222.61 1175.91 cv
2222.61 1175.91 2222.31 1149.44 2208.72 1148.52 cv
cp
f
2237.29 1159.69 mo
2244.53 1174.92 2257.07 1195.41 2257.07 1195.41 cv
2257.07 1195.41 2251.27 1160.61 2248.36 1143.2 cv
2240.19 1144.47 2238.01 1150.26 2237.29 1159.69 cv
cp
f
2246.66 976.851 mo
2274.86 996.759 2261.59 1024.96 2233.4 1013.35 cv
2244.18 1005.89 2250.81 991.792 2246.66 976.851 cv
cp
f
2075.02 906.013 mo
2066.25 901.346 2047.61 893.915 2047.61 893.915 cv
2047.61 893.915 2072.33 916.512 2079.91 922.559 cv
2081.06 919.341 2077.75 910.953 2075.02 906.013 cv
cp
f
2094.82 882.729 mo
2090.42 879.545 2081.61 873.188 2081.61 873.188 cv
2081.61 873.188 2086.55 888.384 2094.82 882.729 cv
cp
f
2199.09 878.567 mo
2203.15 879.324 2209.36 879.051 2212.62 877.598 cv
2215.24 868.92 2230.9 827.564 2230.9 827.564 cv
2230.9 827.564 2203.93 870.199 2199.09 878.567 cv
cp
f
2076.28 774.133 mo
2063.24 758.179 2025.52 707.901 2025.52 707.901 cv
2025.52 707.901 2051.69 753.594 2056.91 771.905 cv
2062.75 773.654 2072.42 775.581 2076.28 774.133 cv
cp
f
2278.38 762.049 mo
2280.79 767.368 2284.18 777.519 2285.1 782.539 cv
2289.71 767.323 2298.91 736.893 2298.91 736.893 cv
2298.91 736.893 2283.4 754.216 2278.38 762.049 cv
cp
f
2308.35 790.573 mo
2314.42 793.067 2318.19 796.157 2325.03 797.091 cv
2335.83 783.443 2370.8 751.27 2370.8 751.27 cv
2370.8 751.27 2323.97 780.943 2308.35 790.573 cv
cp
f
2348.7 862.951 mo
2352.4 865.199 2354.88 868.362 2356.09 872.417 cv
2362.11 868.282 2375.21 856.322 2375.21 856.322 cv
2375.21 856.322 2357.18 859.896 2348.7 862.951 cv
cp
f
2344.61 913.126 mo
2349.33 917.234 2354.78 924.727 2365.19 927.649 cv
2378.92 919.956 2406.36 904.561 2406.36 904.561 cv
2406.36 904.561 2361.3 910.344 2344.61 913.126 cv
cp
f
2378.69 1049.47 mo
2375.93 1054.78 2375.47 1058.7 2378.69 1064.7 cv
2388.18 1067.13 2413.92 1074.72 2413.92 1074.72 cv
2413.92 1074.72 2387.68 1055.79 2378.69 1049.47 cv
cp
f
2354.78 1080.65 mo
2361 1083.8 2387.39 1094.08 2387.39 1094.08 cv
2387.39 1094.08 2369.39 1076.72 2364.93 1072.67 cv
2362.88 1075.23 2356.81 1078.09 2354.78 1080.65 cv
cp
f
2013.44 759.149 mo
2013.44 759.149 2026.97 785.255 2030.85 789.122 cv
2034.71 792.994 2052.12 794.921 2052.12 794.921 cv
2013.44 759.149 li
cp
f
1018.49 362.814 mo
1006.84 362.814 1000.78 350.232 995.652 363.751 cv
988.203 357.688 985.399 355.356 976.08 363.284 cv
982.133 353.026 977.006 338.112 966.288 340.907 cv
970.015 337.641 973.748 324.595 970.015 321.331 cv
979.342 321.331 980.268 310.61 979.342 306.412 cv
986.325 313.405 1004.05 308.279 1007.77 302.218 cv
1002.64 314.802 1016.63 330.651 1027.82 329.256 cv
1021.29 335.778 1032.95 338.577 1039.94 339.975 cv
1015.7 344.64 1013.84 347.898 1018.49 362.814 cv
cp
1128.18 352.378 mo
1128.18 352.378 1078.02 345.694 1074 343.687 cv
1069.99 341.675 1108.11 329.639 1108.11 329.639 cv
1108.11 329.639 1078.02 326.964 1078.02 320.276 cv
1078.02 312.452 1120.81 289.509 1120.81 289.509 cv
1120.81 289.509 1065.84 308.875 1061.97 289.509 cv
1059.29 276.137 1159.61 155.749 1159.61 155.749 cv
1159.61 155.749 1065.98 240.022 1061.97 240.022 cv
1057.96 240.022 1071.33 211.927 1071.33 211.927 cv
1071.33 211.927 1018.49 264.097 1009.13 265.431 cv
999.765 266.774 980.373 155.082 980.373 155.082 cv
980.373 155.082 981.038 200.563 979.7 205.905 cv
978.366 211.262 971.009 211.262 967.666 194.542 cv
967.666 212.596 958.973 265.431 946.262 268.11 cv
933.559 270.785 838.585 203.904 838.585 203.904 cv
838.585 203.904 929.985 284.164 916.17 314.258 cv
906.542 335.214 801.132 341.012 801.132 341.012 cv
801.132 341.012 902.789 340.118 904.128 347.475 cv
905.468 354.832 819.413 417.03 819.413 417.03 cv
819.413 417.03 934.226 362.413 939.571 371.771 cv
944.921 381.139 897.444 483.467 897.444 483.467 cv
897.444 483.467 935.562 427.288 938.909 428.624 cv
942.248 429.962 878.043 534.299 878.043 534.299 cv
878.043 534.299 964.994 415.917 971.684 417.255 cv
978.366 418.587 994.419 481.459 994.419 481.459 cv
994.419 481.459 1000.43 406.548 1011.81 407.886 cv
1023.18 409.231 1059.29 481.459 1059.29 481.459 cv
1059.29 481.459 1047.92 452.032 1052.61 448.69 cv
1057.29 445.344 1114.14 510.222 1114.14 510.222 cv
1114.14 510.222 1039.89 403.877 1048.59 395.849 cv
1057.29 387.829 1126.85 425.28 1126.85 425.28 cv
1083.37 394.512 li
1090.73 391.837 li
1090.73 391.837 1070.66 378.465 1070.66 373.776 cv
1070.66 369.101 1128.18 352.378 1128.18 352.378 cv
cp
f
936.231 353.713 mo
940.693 364.418 917.504 401.872 914.833 403.657 cv
912.154 405.435 947.826 376.9 950.502 381.357 cv
953.175 385.814 936.231 353.713 936.231 353.713 cv
cp
f
930.882 278.812 mo
935.956 271.246 936.249 261.351 936.231 252.503 cv
936.224 244.574 937.151 232.866 933.713 226.311 cv
938.877 239.007 950.224 263.67 965.663 261.862 cv
930.882 278.812 li
cp
f
2384.78 1554.07 mo
2378.07 1488.23 2322.55 1431.28 2255.32 1429.1 cv
2188.46 1426.94 2130.5 1479.25 2119.11 1543.98 cv
2113.44 1576.16 2119.58 1609.82 2136.63 1637.73 cv
2153.06 1664.61 2178.92 1685.26 2208.82 1695.21 cv
2240.12 1705.63 2274.96 1704.05 2305.17 1690.78 cv
2335.52 1677.45 2360.34 1652.79 2373.85 1622.53 cv
2366.96 1632.79 2357.81 1641.64 2347.1 1647.86 cv
2344.86 1649.15 2342.56 1650.36 2340.16 1651.31 cv
2339.4 1651.61 2339.87 1654.3 2339.76 1655.11 cv
2338.28 1666.5 2327.37 1677.38 2316.19 1679.25 cv
2308.39 1680.54 2299.81 1678.77 2292.71 1675.36 cv
2286.35 1693.14 2264.37 1698.49 2247.65 1697.45 cv
2233.82 1696.6 2219.06 1692.6 2209.86 1681.54 cv
2204.3 1674.86 2201.49 1666.32 2201.02 1657.7 cv
2200.87 1654.93 2200.92 1652.1 2201.35 1649.34 cv
2196.25 1652.41 2188.81 1651.83 2183.23 1651.11 cv
2168.91 1649.3 2152.78 1644.52 2142.88 1633.45 cv
2123.64 1611.92 2121.21 1576.78 2126.76 1549.76 cv
2129.66 1535.58 2134.35 1519.94 2148.31 1513.22 cv
2156.76 1509.15 2166.69 1507.4 2176.05 1507.39 cv
2174.48 1505.57 2173.65 1503.09 2172.99 1500.83 cv
2170.97 1493.97 2170.06 1485.79 2170.97 1478.7 cv
2172.56 1466.44 2182.96 1457.42 2193.06 1451.58 cv
2208.52 1442.63 2227.7 1437.55 2245.48 1436.62 cv
2262.89 1435.69 2280.3 1441.13 2295.04 1450.22 cv
2302.98 1455.12 2310.43 1461.17 2316.24 1468.49 cv
2318.48 1471.32 2320.52 1474.38 2321.96 1477.72 cv
2322.54 1479.08 2323.01 1480.51 2323.31 1481.97 cv
2323.45 1482.62 2323.54 1483.28 2323.59 1483.96 cv
2323.7 1485.39 2324.4 1484.89 2325.77 1484.96 cv
2345.7 1486 2358.98 1504.17 2355.25 1523.55 cv
2365.1 1523.38 2373.6 1527.93 2378.62 1536.4 cv
2381.93 1541.94 2383.11 1547.95 2384.78 1554.07 cv
cp
f
1987.48 1579.31 mo
1987.48 1579.31 2174.41 1575.56 2202.04 1565.25 cv
2180.97 1558.69 1987.48 1579.31 1987.48 1579.31 cv
cp
f
2098.04 1619.6 mo
2065.36 1633.92 1984.16 1669.54 1976.24 1673.01 cv
2010.01 1660.43 2043.8 1647.83 2077.32 1634.54 cv
2082.9 1632.33 2088.51 1630.11 2094.02 1627.71 cv
2097.49 1626.2 2102.46 1624.33 2098.04 1619.6 cv
cp
f
2118.65 1633.65 mo
2043.7 1673.95 li
2043.7 1673.95 2102.73 1653.33 2118.65 1633.65 cv
cp
f
2146.77 1454.68 mo
2088.68 1381.59 li
2088.68 1381.59 2142.08 1429.39 2146.77 1454.68 cv
cp
f
2190.81 1291.64 mo
2190.81 1291.64 2202.99 1399.41 2216.1 1408.77 cv
2215.18 1386.28 2190.81 1291.64 2190.81 1291.64 cv
cp
f
2287.32 1339.43 mo
2287.32 1339.43 2271.39 1389.09 2273.26 1400.34 cv
2282.63 1382.53 2287.32 1339.43 2287.32 1339.43 cv
cp
f
2336.98 1377.85 mo
2336.98 1377.85 2282.63 1479.98 2279.82 1500.6 cv
2292.01 1481.86 2336.98 1377.85 2336.98 1377.85 cv
cp
f
2336.05 1403.15 mo
2336.05 1403.15 2280.76 1507.16 2277.95 1522.15 cv
2289.2 1509.03 2336.05 1403.15 2336.05 1403.15 cv
cp
f
2378.22 1390.97 mo
2378.22 1390.97 2351.04 1440.63 2348.23 1447.18 cv
2357.59 1439.69 2378.22 1390.97 2378.22 1390.97 cv
cp
f
2451.31 1375.98 mo
2449.42 1378.79 2361.35 1449.07 2357.59 1462.18 cv
2372.59 1453.74 2451.31 1375.98 2451.31 1375.98 cv
cp
f
2452.23 1528.71 mo
2452.23 1528.71 2409.13 1539.95 2403.51 1541.83 cv
2412.88 1543.7 2452.23 1528.71 2452.23 1528.71 cv
cp
f
2446.62 1598.05 mo
2446.62 1598.05 2336.98 1592.43 2332.29 1592.43 cv
2350.1 1604.61 2446.62 1598.05 2446.62 1598.05 cv
cp
f
2446.62 1640.21 mo
2446.62 1640.21 2316.36 1612.11 2307 1610.23 cv
2321.06 1624.29 2446.62 1640.21 2446.62 1640.21 cv
cp
f
2328.55 1784.51 mo
2328.55 1784.51 2273.26 1657.08 2274.2 1613.98 cv
2299.5 1668.32 2328.55 1784.51 2328.55 1784.51 cv
cp
f
2229.23 1777.96 mo
2229.23 1777.96 2232.98 1687.06 2245.15 1659.89 cv
2245.15 1681.45 2229.23 1777.96 2229.23 1777.96 cv
cp
f
2170.19 1836.98 mo
2170.19 1836.98 2201.11 1732.97 2210.49 1716.11 cv
2201.11 1747.03 2170.19 1836.98 2170.19 1836.98 cv
cp
f
2243.05 1606.35 mo
2240.56 1611.25 2238.43 1616.35 2236.79 1621.6 cv
2236.36 1623 2232.67 1636.71 2233.84 1636.84 cv
2234.68 1636.95 2238.25 1622.39 2238.76 1620.8 cv
2239.56 1618.19 2240.4 1615.58 2241.28 1613 cv
2241.72 1611.7 2242.16 1610.41 2242.61 1609.12 cv
2242.69 1608.93 2243.49 1605.47 2243.05 1606.35 cv
cp
f
2226 1605.3 mo
2224.27 1608.77 2221.94 1611.87 2219.74 1615.05 cv
2219.11 1615.98 2213.81 1624.79 2215.21 1624.76 cv
2215.99 1624.74 2217.68 1621.02 2218.13 1620.34 cv
2219.45 1618.29 2220.85 1616.28 2222.18 1614.23 cv
2223.29 1612.53 2224.36 1610.8 2225.32 1609.01 cv
2225.9 1607.91 2226.42 1606.8 2226.88 1605.67 cv
2227.1 1605.15 2226.24 1604.83 2226 1605.3 cv
cp
f
2336.05 1555.31 mo
2329.62 1555.8 2323.22 1556.58 2316.87 1557.73 cv
2313.48 1558.35 2310.09 1559.08 2306.74 1559.94 cv
2305.09 1560.37 2303.45 1560.83 2301.82 1561.33 cv
2301.71 1561.36 2298.17 1562.79 2299.5 1562.79 cv
2306.18 1562.83 2312.81 1561.81 2319.33 1560.44 cv
2322.84 1559.71 2326.33 1558.87 2329.8 1558.01 cv
2331.51 1557.59 2333.23 1557.16 2334.93 1556.74 cv
2334.93 1556.74 2337.9 1555.17 2336.05 1555.31 cv
cp
f
2184.25 1472.02 mo
2178.99 1467.45 2227.82 1524.96 2227.82 1524.96 cv
2227.82 1524.96 2191.29 1478.11 2184.25 1472.02 cv
cp
f
2069.27 1524.87 mo
2073.16 1510.65 2078.08 1496.83 2085.71 1484.13 cv
2093.52 1471.1 2102.56 1459.19 2113.53 1448.62 cv
2134.22 1428.68 2160.1 1414.56 2188.12 1408.17 cv
2161.54 1419.41 2137.04 1433.34 2116.32 1453.73 cv
2107.05 1462.86 2098.76 1472.71 2091.46 1483.48 cv
2082.5 1496.54 2075.75 1510.48 2069.27 1524.87 cv
cp
f
2416.73 1617.82 mo
2413.59 1644.18 2399.33 1670.15 2378.96 1687.13 cv
2385.34 1675.63 2392.77 1664.7 2399.25 1653.24 cv
2405.34 1641.57 2410.58 1629.45 2416.73 1617.82 cv
cp
f
2317.37 1406.06 mo
2365.92 1423.87 2403.52 1465.42 2415.33 1515.94 cv
2410.63 1505.65 2406.03 1495.47 2400.3 1485.68 cv
2393.31 1473.73 2385.02 1462.86 2376.07 1452.33 cv
2366.9 1442.54 2357.35 1433.33 2346.68 1425.17 cv
2337.27 1418.17 2327.48 1411.98 2317.37 1406.06 cv
cp
f
2159.21 1734.34 mo
2144.54 1727.98 2130.51 1719.92 2118.64 1709.08 cv
2107.64 1699.02 2098.4 1687.92 2090.12 1675.56 cv
2071.7 1648.07 2064.4 1613.83 2067.12 1581.18 cv
2069.36 1595.96 2071.91 1610.26 2076.03 1624.66 cv
2080.76 1641.26 2088.54 1657.47 2097.82 1671.98 cv
2105.78 1684.14 2114.56 1695.88 2124.98 1706.07 cv
2135.68 1716.51 2147.17 1725.52 2159.21 1734.34 cv
cp
f
1390.96 368.619 mo
1390.96 445.353 1451.24 511.524 1527.72 518.417 cv
1518.03 514.475 1508.44 510.226 1499.17 505.367 cv
1490.09 500.615 1479.93 495.237 1473.4 487.114 cv
1465.37 477.154 1464.64 462.801 1469.72 451.308 cv
1447.64 459.091 1425.58 439.67 1414.01 423.222 cv
1389.13 387.833 1396.76 340.652 1406.85 301.277 cv
1396.4 322.113 1390.96 345.307 1390.96 368.619 cv
cp
f
1628.02 483.334 mo
1609 498.83 1585.17 508.489 1562.6 517.543 cv
1612.58 510.48 1656.62 477.661 1677.87 431.913 cv
1671.4 438.69 1665.7 446.161 1659.51 453.188 cv
1649.89 464.119 1639.31 474.134 1628.02 483.334 cv
cp
f
1358.3 396.228 mo
1350.35 351.703 1361.59 306.458 1388.97 270.551 cv
1379.31 289.801 1370.7 308.613 1365.19 329.527 cv
1359.41 351.446 1358.5 373.703 1358.3 396.228 cv
cp
f
1730.4 374.917 mo
1733.26 424.916 1713.17 473.614 1675.74 506.901 cv
1690.7 488.301 1704.04 469.119 1713.4 447.013 cv
1723.22 423.826 1727.7 399.81 1730.4 374.917 cv
cp
f
1578.74 222.868 mo
1565.9 218.167 1550.67 216.895 1537.15 216.796 cv
1522.85 216.687 1508.56 219.13 1495.09 224.002 cv
1481.79 228.815 1468.27 235.926 1457.9 245.75 cv
1487.09 229.067 1523.8 217.121 1557.22 227.129 cv
1577.63 233.241 1588.74 249.019 1591.78 269.375 cv
1635.94 237.244 1677.02 315.6 1661.88 352.078 cv
1682.15 359.022 1686.9 385.339 1687.63 403.953 cv
1697.26 363.915 1689.91 320.838 1667.36 286.377 cv
1646.91 255.124 1614.93 232.123 1578.74 222.868 cv
cp
f
1651.89 198.839 mo
1640.62 212.362 1623.38 217.19 1608.32 206.832 cv
1599.3 200.619 1601.43 184.177 1602.53 174.69 cv
1600.58 179.719 1590.34 207.21 1582.27 198.805 cv
1578.96 195.366 1579.02 188.828 1578.78 184.448 cv
1578.02 171.074 1578.6 157.607 1578.92 144.233 cv
1574.28 163.462 1563.77 180.332 1549.93 194.262 cv
1549.4 194.773 1542.75 200.627 1543.51 201.404 cv
1544.48 202.41 1549.69 200.83 1550.96 200.73 cv
1556.36 200.306 1561.78 200.438 1567.15 201.008 cv
1604.57 205.011 1639.42 227.891 1667.2 252.089 cv
1670.16 254.679 1673.79 257.327 1676.21 260.492 cv
1676.35 260.336 1662.6 240.436 1661.8 238.999 cv
1655.22 227.342 1648.47 212.511 1651.89 198.839 cv
cp
f
1762.15 334.692 mo
1746.29 333.608 1730.39 329.374 1717.21 320.234 cv
1712.27 316.812 1707.76 312.751 1703.85 308.178 cv
1701.92 305.945 1692.38 289.961 1691.92 290.134 cv
1692.65 289.85 1705.38 327.653 1706.37 331.269 cv
1707.42 335.073 1713.49 375.425 1713.42 375.439 cv
1715.62 375.014 1713.65 356.633 1715.13 353.881 cv
1716.52 351.248 1718.81 349.179 1721.23 347.513 cv
1732.89 339.549 1748.58 336.997 1762.15 334.692 cv
cp
f
1336.22 333.168 mo
1344.88 332.385 1353.55 331.599 1362.21 330.812 cv
1360.77 334.751 1359.32 338.686 1357.89 342.622 cv
1350.67 339.476 1343.44 336.323 1336.22 333.168 cv
cp
f
1408.37 455.105 mo
1409.07 457.917 1407.25 461.547 1406.18 464.035 cv
1404.13 468.839 1401.61 473.454 1399.02 477.985 cv
1393.64 487.402 1387.77 496.601 1381.51 505.459 cv
1389.59 496.441 1399.39 488.263 1410.72 483.682 cv
1419.13 480.277 1427.33 481.072 1435.36 485.344 cv
1424.77 477.324 1414.36 467.08 1408.37 455.105 cv
cp
f
1370.58 448.627 mo
1358.33 456.01 1346.09 463.39 1333.86 470.765 cv
1342.22 470.173 1350.62 469.43 1358.88 468.007 cv
1361.67 467.528 1366.81 467.326 1367.9 464.137 cv
1368.88 461.282 1368.98 458.087 1369.25 455.105 cv
1369.38 453.703 1369.19 449.558 1370.58 448.627 cv
cp
f
1576.29 479.401 mo
1573.21 473.831 1563.59 455.936 1561.91 452.535 cv
1561.06 450.799 1559.39 448.032 1562.73 449.303 cv
1565.69 450.433 1568.47 452.178 1571.15 453.853 cv
1572.19 454.509 1572.26 458.388 1572.47 459.508 cv
1573.74 466.139 1575.01 472.77 1576.29 479.401 cv
cp
f
1647.56 399.496 mo
1633.16 397.333 1618.76 395.18 1604.36 393.016 cv
1608.32 392.058 1612.26 391.09 1616.21 390.133 cv
1618.35 389.613 1622.89 387.45 1624.98 388.472 cv
1632.51 392.145 1640.04 395.826 1647.56 399.496 cv
cp
f
1458.05 424.874 mo
1463.2 418.463 1468.35 412.055 1473.52 405.641 cv
1475.73 402.882 1475.45 402.678 1478.97 403.176 cv
1482.96 403.751 1486.98 404.325 1490.97 404.894 cv
1480 411.552 1469.02 418.213 1458.05 424.874 cv
cp
f
1447.77 315.264 mo
1459.12 320.842 1470.46 326.419 1481.8 332.005 cv
1480.03 328.776 1478.25 325.55 1476.48 322.326 cv
1475.41 320.396 1473.02 320.604 1470.94 320.158 cv
1463.22 318.527 1455.51 316.895 1447.77 315.264 cv
cp
f
1625.08 382.961 mo
1631.68 385.768 1638.27 388.586 1644.85 391.393 cv
1641.29 389.306 1637.72 387.22 1634.14 385.135 cv
1630.35 382.902 1629.51 382.572 1625.08 382.961 cv
cp
f
1561.71 275.844 mo
1564.4 266.938 1567.11 258.032 1569.81 249.126 cv
1569.44 256.655 1569.03 264.183 1568.52 271.705 cv
1568.24 275.63 1568.06 279.607 1567.43 283.492 cv
1566.65 288.257 1561.93 277.452 1561.71 275.844 cv
cp
f
1415.12 243.454 mo
1405.4 228.878 1395.67 214.296 1385.97 199.721 cv
1401.89 214.031 1417.82 228.337 1433.74 242.644 cv
1428.83 244.592 1419.51 247.861 1415.12 243.454 cv
cp
f
1491.52 208.9 mo
1493.8 204.582 1493.82 198.51 1494.24 193.775 cv
1495.03 185.227 1495.38 176.643 1495.63 168.069 cv
1495.98 156.753 1496.14 145.431 1496.1 134.115 cv
1497.1 144.158 1498.36 154.18 1499.88 164.161 cv
1501.08 172.177 1502.43 180.191 1504.25 188.093 cv
1505.52 193.559 1506.76 199.8 1509.87 204.578 cv
1503.71 205.815 1497.7 207.768 1491.52 208.9 cv
cp
f
1667.81 213.484 mo
1676.98 207.819 1686.16 202.149 1695.35 196.482 cv
1690.53 201.631 1685.66 206.739 1680.65 211.697 cv
1678.01 214.315 1675.36 217.131 1672.31 219.305 cv
1669.16 221.563 1668.1 215.653 1667.81 213.484 cv
cp
f
1705.88 432.158 mo
1711.82 435.758 1731.93 447.983 1736.03 450.507 cv
1737.15 451.193 1741.16 452.813 1741.69 454.101 cv
1741.14 452.746 1733.8 451.586 1732.54 451.23 cv
1726.59 449.558 1707.27 444.479 1703.57 443.532 cv
1703.23 443.45 1705.61 433.374 1705.88 432.158 cv
cp
f
1637.02 506.673 mo
1639.06 507.351 1641.09 509.502 1642.72 510.809 cv
1646.16 513.53 1662.33 526.988 1666.99 530.967 cv
1658.63 519.361 1650.25 507.749 1641.88 496.141 cv
1640.27 499.653 1638.65 503.163 1637.02 506.673 cv
cp
f
1500.16 523.678 mo
1499.08 534.204 1498 544.737 1496.92 555.264 cv
1500.16 545.002 1503.4 534.75 1506.63 524.486 cv
1504.48 524.216 1502.32 523.945 1500.16 523.678 cv
cp
f
2755.64 743.109 mo
2755.64 743.109 2757.92 806.833 2771.9 807.725 cv
2785.9 808.619 2796.25 724.088 2805.08 686.555 cv
2803.87 700.021 2785.44 802.22 2796.64 805.273 cv
2805.44 807.675 2827.73 754.162 2827.73 754.162 cv
2827.73 754.162 2812.46 803.163 2823.58 807.361 cv
2834.7 811.568 2854.91 776.439 2854.91 776.439 cv
2854.91 776.439 2837.66 814.767 2847.96 822.356 cv
2858.27 829.944 2893.4 789.586 2893.4 789.586 cv
2893.4 789.586 2848.85 842.138 2857.86 849.081 cv
2865.58 855.036 2882.92 846.999 2882.92 846.999 cv
2882.92 846.999 2861.76 862.926 2853.32 851.303 cv
2844.89 839.682 2859.52 824.18 2859.52 824.18 cv
2859.52 824.18 2845.62 836.277 2839.06 829.182 cv
2832.49 822.092 2840.36 807.001 2840.36 807.001 cv
2840.36 807.001 2832.86 814.914 2821.63 813.45 cv
2810.4 811.977 2815.36 790.279 2815.36 790.279 cv
2815.36 790.279 2806.17 817.37 2795.97 815.68 cv
2783.61 813.641 2788.66 786.403 2788.66 786.403 cv
2788.66 786.403 2782.52 816.362 2772.57 816.989 cv
2762.62 817.623 2760.44 803.512 2760.44 803.512 cv
2760.44 803.512 2758.77 811.309 2750.73 815.785 cv
2756.35 803.009 2755.89 771.513 2755.64 743.109 cv
cp
f
2731.47 805.105 mo
2731.47 805.105 2730.65 812.77 2723.92 814.552 cv
2717.17 816.341 2694.35 770.286 2694.35 770.286 cv
2694.35 770.286 2716.82 825.053 2701.18 831.62 cv
2685.52 838.194 2645.73 792.998 2645.73 792.998 cv
2645.73 792.998 2679.55 833.333 2667.84 844.162 cv
2656.13 854.99 2612.56 814.27 2612.56 814.27 cv
2612.56 814.27 2655.38 860.607 2645.54 876.121 cv
2635.7 891.646 2591.37 870.399 2591.37 870.399 cv
2591.37 870.399 2637.05 896.316 2634.63 905.462 cv
2632.22 914.602 2543.41 902.377 2543.41 902.377 cv
2543.41 902.377 2624.82 919.956 2625.45 943.065 cv
2627.02 929.279 2615.66 918.053 2606.59 913.594 cv
2632.08 918.19 2644.54 914.573 2646.28 909.511 cv
2648.02 904.445 2622.07 885.459 2622.07 885.459 cv
2622.07 885.459 2647.47 892.109 2655.11 880.608 cv
2662.75 869.103 2641.77 841.59 2641.77 841.59 cv
2641.77 841.59 2665.81 856.398 2673.7 851.576 cv
2681.59 846.751 2671.72 823.791 2671.72 823.791 cv
2671.72 823.791 2691.04 841.485 2704.13 834.806 cv
2717.22 828.151 2708.41 804.188 2708.41 804.188 cv
2708.41 804.188 2716.89 823.513 2725.72 820.781 cv
2734.55 818.047 2731.47 805.105 2731.47 805.105 cv
cp
f
2595.2 968.05 mo
2595.2 968.05 2631.83 963.34 2634.55 972.68 cv
2637.26 982.023 2576.71 1007.86 2576.71 1007.86 cv
2576.71 1007.86 2634.24 993.194 2637.95 1003.61 cv
2641.65 1014.02 2595.5 1038.87 2595.5 1038.87 cv
2595.5 1038.87 2639.9 1019.07 2651.66 1033.4 cv
2663.4 1047.72 2640.78 1061.7 2640.78 1061.7 cv
2640.78 1061.7 2661.44 1045.58 2671.87 1054.21 cv
2682.31 1062.83 2641.93 1111.01 2641.93 1111.01 cv
2641.93 1111.01 2692.21 1059.12 2705.76 1066.83 cv
2719.31 1074.55 2696.99 1107.02 2696.99 1107.02 cv
2696.99 1107.02 2714.24 1086.15 2720.78 1089.49 cv
2727.32 1092.83 2704.54 1149.92 2704.54 1149.92 cv
2704.54 1149.92 2727.91 1090.8 2740.7 1091.81 cv
2734.7 1087.47 2728.79 1094.42 2728.79 1094.42 cv
2728.79 1094.42 2731.31 1082.72 2725.26 1079.91 cv
2719.2 1077.11 2710.03 1088.55 2710.03 1088.55 cv
2710.03 1088.55 2722.14 1068 2711.23 1058.32 cv
2700.31 1048.66 2663.94 1086.22 2663.94 1086.22 cv
2663.94 1086.22 2686.45 1061.97 2678.29 1047.79 cv
2670.12 1033.61 2660.43 1045.03 2660.43 1045.03 cv
2660.43 1045.03 2664.89 1035.97 2657.57 1026.44 cv
2650.25 1016.92 2634.72 1020.4 2634.72 1020.4 cv
2634.72 1020.4 2652.09 1009.29 2646.86 998.826 cv
2641.63 988.358 2612.59 995.938 2612.59 995.938 cv
2612.59 995.938 2648.69 978.37 2644.99 967.965 cv
2641.3 957.548 2595.2 968.05 2595.2 968.05 cv
cp
f
2759.6 1106.92 mo
2759.6 1106.92 2771.72 1085.85 2775.83 1086.01 cv
2779.92 1086.17 2779.48 1188.28 2779.48 1188.28 cv
2779.48 1188.28 2788.32 1089.44 2795.76 1087.82 cv
2800.42 1086.81 2803.65 1096.35 2803.65 1096.35 cv
2803.65 1096.35 2806.41 1081.4 2814.6 1081.72 cv
2822.81 1082.05 2844.23 1159.87 2844.23 1159.87 cv
2844.23 1159.87 2829 1077.85 2842.07 1071.69 cv
2855.15 1065.54 2883.1 1098.45 2883.1 1098.45 cv
2883.1 1098.45 2857.77 1064.1 2869.42 1054.81 cv
2881.07 1045.51 2913.76 1075.54 2913.76 1075.54 cv
2913.76 1075.54 2878.2 1040.27 2886.24 1031.87 cv
2894.27 1023.46 2918.83 1038.28 2918.83 1038.28 cv
2918.83 1038.28 2888.21 1014.32 2879.96 1028.36 cv
2872.51 1041.02 2888.39 1055.04 2888.39 1055.04 cv
2888.39 1055.04 2868.88 1042.47 2862.95 1049.94 cv
2857 1057.39 2868.2 1079.22 2868.2 1079.22 cv
2868.2 1079.22 2848.67 1060.49 2838.43 1066.24 cv
2829.44 1071.3 2832.01 1105.67 2832.01 1105.67 cv
2832.01 1105.67 2822.07 1077.9 2814.4 1077.1 cv
2806.74 1076.28 2803.29 1088.84 2803.29 1088.84 cv
2803.29 1088.84 2802.08 1082.72 2795.58 1082.64 cv
2784.47 1082.49 2783.15 1117.26 2783.15 1117.26 cv
2783.15 1117.26 2785.52 1074.07 2777.33 1073.75 cv
2769.13 1073.44 2759.6 1106.92 2759.6 1106.92 cv
cp
f
2882.46 871.11 mo
2882.46 871.11 2899.33 879.207 2927.27 873.128 cv
2897.35 883.752 2892.08 890.903 2901.82 893.927 cv
2916.01 898.342 3003.46 873.825 3003.46 873.825 cv
3003.46 873.825 2902.34 904.74 2904.72 913.72 cv
2907.11 922.707 2959.85 921.368 2959.85 921.368 cv
2959.85 921.368 2913.86 926.875 2913.56 934.422 cv
2913.34 940.316 2959.75 941.205 2959.75 941.205 cv
2959.75 941.205 2903.04 940.936 2903.32 949.248 cv
2903.5 955.086 3001.95 964.076 3001.95 964.076 cv
3001.95 964.076 2912.54 958.501 2907.81 974.06 cv
2903.09 989.608 2971.35 1011.46 2971.35 1011.46 cv
2971.35 1011.46 2892.53 991.624 2896.23 972.921 cv
2898.69 960.522 2921.01 960.372 2921.01 960.372 cv
2921.01 960.372 2894.79 957.115 2896.54 947.609 cv
2898.29 938.103 2910.23 941.22 2910.23 941.22 cv
2910.23 941.22 2904.15 938.921 2904.65 932.791 cv
2905.04 928.014 2917.27 925.165 2917.27 925.165 cv
2917.27 925.165 2895.15 926.509 2893.48 916.696 cv
2891.99 907.901 2907.28 900.821 2907.28 900.821 cv
2907.28 900.821 2893.01 900.649 2891.59 893.271 cv
2889.88 884.48 2897.13 880.583 2897.13 880.583 cv
2882.46 871.11 li
cp
f
2642.68 922.707 mo
2642.68 922.707 2659.11 922.33 2659.43 914.141 cv
2659.75 905.932 2648.81 897.294 2648.81 897.294 cv
2648.81 897.294 2667.89 907.8 2663.97 916.363 cv
2660.04 924.937 2642.68 922.707 2642.68 922.707 cv
cp
f
2763.8 818.185 mo
2763.8 818.185 2766.55 826.5 2774.25 826.291 cv
2781.96 826.083 2783.44 814.335 2783.44 814.335 cv
2783.44 814.335 2781.81 829.668 2790.48 831.037 cv
2799.16 832.402 2807.37 819.384 2807.37 819.384 cv
2807.37 819.384 2811.02 830.812 2816.56 833.598 cv
2811.43 833.402 2807.09 826.55 2807.09 826.55 cv
2807.09 826.55 2794.86 837.358 2789.28 835.605 cv
2783.7 833.846 2781.44 826.057 2781.44 826.057 cv
2781.44 826.057 2765.59 837.748 2763.8 818.185 cv
cp
f
2761.91 1074.43 mo
2761.91 1074.43 2769.75 1057.8 2777.94 1058.13 cv
2786.15 1058.45 2785.52 1074.33 2785.52 1074.33 cv
2785.52 1074.33 2788.96 1065.24 2794.63 1064.43 cv
2800.31 1063.64 2802.1 1070.37 2802.1 1070.37 cv
2802.1 1070.37 2806.06 1060.78 2813.26 1060.54 cv
2820.46 1060.32 2827.97 1078.06 2827.97 1078.06 cv
2827.97 1078.06 2824.68 1057.4 2832.54 1053.1 cv
2840.41 1048.79 2852.48 1054.91 2852.48 1054.91 cv
2852.48 1054.91 2837.5 1044.65 2829.76 1049.82 cv
2823.3 1054.13 2824.33 1066.11 2824.33 1066.11 cv
2824.33 1066.11 2819.51 1055.22 2812.44 1055.3 cv
2805.77 1055.38 2802.35 1063.71 2802.35 1063.71 cv
2802.35 1063.71 2794.4 1053.04 2787.99 1063.67 cv
2785.96 1050.23 2772.71 1047.66 2761.91 1074.43 cv
cp
f
2652.6 1009.32 mo
2652.6 1009.32 2675.87 1017.93 2670.68 1032.59 cv
2684.12 1030.06 2694.94 1041.78 2687.1 1058.4 cv
2708.76 1042.83 2729.64 1046.73 2722.14 1068 cv
2733.03 1051.99 2715.25 1034.36 2695.71 1048.3 cv
2700.79 1036.7 2686.47 1022.45 2676.01 1027.17 cv
2678.61 1013.42 2664.04 1005.66 2652.6 1009.32 cv
cp
f
2876.6 885.409 mo
2876.6 885.409 2870.21 904.142 2884.99 906.779 cv
2874.9 915.109 2883.34 922.624 2894.45 927.172 cv
2887.45 935.606 2896.52 939.565 2896.52 939.565 cv
2896.52 939.565 2881.53 942.566 2882.67 952.872 cv
2876.4 942.621 2888.32 939.237 2888.32 939.237 cv
2888.32 939.237 2882.96 932.357 2887.26 927.391 cv
2877.03 926.479 2871.82 915.502 2877.72 909.054 cv
2866.97 908.122 2872.87 888.857 2876.6 885.409 cv
cp
f
318.9 1448.4 mo
341.546 1434.03 368.376 1425.67 397.185 1425.67 cv
465.284 1425.67 522.514 1472.18 538.834 1535.18 cv
539.855 1536.4 540.684 1537.61 541.284 1538.8 cv
538.613 1515.32 586.21 1499.13 611.309 1491.44 cv
581.383 1496.77 534.522 1507.75 530.759 1503.99 cv
526.199 1499.43 534.957 1493.24 537.237 1491.84 cv
534.926 1493.01 525.243 1497.33 519.424 1490.23 cv
512.139 1481.33 538.047 1454.62 538.047 1454.62 cv
538.047 1454.62 515.379 1470.8 501.619 1457.84 cv
487.857 1444.89 537.237 1401.99 537.237 1401.99 cv
537.237 1401.99 486.237 1440.04 477.33 1434.37 cv
468.431 1428.7 476.522 1410.9 476.522 1410.9 cv
476.522 1410.9 461.949 1429.51 451.424 1422.23 cv
440.9 1414.94 451.016 1377.3 451.016 1377.3 cv
451.016 1377.3 430.377 1416.56 412.567 1412.52 cv
394.756 1408.47 390.71 1313.75 387.475 1256.27 cv
385.857 1311.32 379.985 1416.36 365.207 1421.82 cv
357.299 1424.75 344.564 1422.23 335.862 1400.78 cv
338.493 1427.49 327.19 1437.44 318.9 1448.4 cv
cp
f
250.86 1571.99 mo
250.86 1533.13 266.035 1497.84 290.744 1471.65 cv
281.451 1469.99 259.551 1465.86 245.801 1461.49 cv
268.064 1479.7 266.039 1489.01 261.182 1495.9 cv
256.325 1502.78 202.29 1496.4 202.29 1496.4 cv
202.29 1496.4 249.851 1507.22 246.209 1530.29 cv
242.566 1553.37 172.541 1554.38 172.541 1554.38 cv
172.541 1554.38 230.827 1557.42 232.647 1576.85 cv
234.47 1596.27 161.613 1607.21 161.613 1607.21 cv
161.613 1607.21 242.359 1596.27 243.574 1612.67 cv
244.313 1622.56 234.653 1626.03 226.875 1627.23 cv
233.632 1627.42 241.496 1629.28 241.145 1636.95 cv
240.539 1650.31 162.219 1692.2 162.219 1692.2 cv
162.219 1692.2 259.968 1663.06 267.862 1674.59 cv
275.754 1686.13 257.541 1702.22 257.541 1702.22 cv
257.541 1702.22 284.86 1680.67 295.183 1691.6 cv
305.505 1702.53 294.78 1721.35 294.78 1721.35 cv
294.78 1721.35 311.577 1697.67 318.862 1711.63 cv
323.717 1706.78 337.684 1703.14 341.934 1719.53 cv
343.314 1718.8 343.687 1714.67 343.287 1708.02 cv
289.159 1686.55 250.86 1633.76 250.86 1571.99 cv
cp
f
563.541 1627.85 mo
550.741 1622.11 543.117 1615.73 538.636 1609.49 cv
530.766 1639.24 513.776 1665.27 490.827 1684.41 cv
502.201 1682.03 524.244 1680.69 547.757 1697.06 cv
510.114 1668.53 505.257 1647.88 555.651 1662.46 cv
519.827 1642.42 522.255 1619.34 563.541 1627.85 cv
cp
f
397.185 1718.31 mo
385.919 1718.31 374.964 1717 364.427 1714.58 cv
369.608 1724.35 379.08 1750.67 374.116 1807.57 cv
383.22 1757.78 388.075 1735.31 399.612 1734.7 cv
411.146 1734.1 419.648 1771.13 419.648 1771.13 cv
419.648 1771.13 412.971 1729.24 426.934 1727.42 cv
440.9 1725.6 456.077 1757.17 456.077 1757.17 cv
456.077 1757.17 445.754 1714.67 455.469 1713.46 cv
465.184 1712.24 474.898 1723.78 474.898 1723.78 cv
474.898 1723.78 467.528 1712.26 464.712 1701.79 cv
444.504 1712.32 421.551 1718.31 397.185 1718.31 cv
cp
f
372.47 1524.08 mo
379.168 1521.6 386.381 1520.18 393.946 1520.18 cv
408.299 1520.18 421.471 1525.11 431.973 1533.3 cv
432.34 1523.88 441.508 1512.49 441.508 1512.49 cv
441.508 1512.49 426.934 1525.85 420.661 1521.19 cv
414.383 1516.54 423.899 1479.09 428.148 1464.33 cv
423.291 1477.88 405.281 1518.16 393.542 1517.35 cv
381.803 1516.54 378.567 1502.78 377.756 1496.7 cv
378.598 1512.36 375.294 1520.24 372.47 1524.08 cv
cp
f
455.492 1575.37 mo
456.292 1574.34 457.253 1573.64 458.407 1573.5 cv
453.093 1568.95 467.212 1558.33 479.809 1555.45 cv
464.392 1557.49 454.095 1554.75 448.019 1551.96 cv
451.969 1559.03 454.583 1566.94 455.492 1575.37 cv
cp
f
332.015 1582.11 mo
332.015 1567.25 337.255 1553.62 345.98 1542.95 cv
341.02 1542.19 336.475 1539.61 336.475 1539.61 cv
336.475 1539.61 340.521 1545.28 336.475 1552.97 cv
332.428 1560.66 297.617 1564.9 297.617 1564.9 cv
297.617 1564.9 329.189 1565.51 331.413 1577.65 cv
333.636 1589.79 308.948 1603.16 308.948 1603.16 cv
308.948 1603.16 330.403 1593.24 333.032 1604.17 cv
335.658 1615.1 309.152 1637.56 309.152 1637.56 cv
309.152 1637.56 345.779 1624 352.458 1628.46 cv
359.138 1632.9 359.138 1642.42 358.126 1649.3 cv
360.773 1642.32 367.131 1640.36 371.855 1639.91 cv
348.574 1631.01 332.015 1608.53 332.015 1582.11 cv
cp
f
455.088 1591.55 mo
454.402 1596 453.261 1600.29 451.685 1604.37 cv
462.917 1603.41 476.013 1604.01 476.013 1604.01 cv
476.013 1604.01 463.895 1601.62 455.088 1591.55 cv
cp
f
408.358 1642.29 mo
413.767 1645.19 422.045 1651.78 433.82 1666.3 cv
428.942 1656.11 427.846 1641.32 427.608 1634.05 cv
421.795 1637.83 415.303 1640.63 408.358 1642.29 cv
cp
f
508.822 1374.89 mo
507.995 1373.05 506.627 1371.14 504.447 1369.2 cv
493.516 1359.49 498.782 1347.75 498.782 1347.75 cv
498.782 1347.75 490.685 1350.98 483.802 1347.34 cv
476.918 1343.7 482.185 1323.86 482.185 1323.86 cv
482.185 1323.86 469.638 1342.9 462.757 1340.86 cv
455.873 1338.84 457.496 1319.83 480.161 1253.04 cv
459.055 1305.93 435.375 1333.38 422.266 1345.6 cv
453.505 1349.54 482.779 1359.73 508.822 1374.89 cv
cp
f
237.3 1404.46 mo
271.913 1372.63 316.305 1351.31 365.449 1345.42 cv
363.187 1340.06 li
363.187 1340.06 357.924 1344.52 349.422 1346.54 cv
340.921 1348.55 326.148 1343.7 326.148 1343.7 cv
326.148 1343.7 315.828 1357.97 304.288 1340.06 cv
299.434 1362.33 286.278 1359.9 272.111 1342.9 cv
275.754 1379.73 256.729 1382.55 240.137 1368.8 cv
245.493 1381.51 241.739 1394.95 237.3 1404.46 cv
cp
f
589.66 1694.15 mo
562.747 1738.08 521.527 1772.3 472.465 1790.3 cv
480.38 1794.71 483.802 1803.92 483.802 1803.92 cv
483.802 1803.92 482.185 1789.75 492.71 1784.49 cv
503.237 1779.23 518.21 1796.63 544.925 1815.66 cv
531.57 1804.73 527.925 1763.85 539.255 1753.73 cv
550.59 1743.61 574.873 1759.4 574.873 1759.4 cv
574.873 1759.4 566.376 1746.44 569.213 1739.56 cv
572.047 1732.68 582.57 1736.33 602.4 1741.99 cv
590.691 1731.51 589.542 1705.82 589.66 1694.15 cv
cp
f
319.066 1465.54 mo
319.066 1465.54 336.872 1500.75 346.185 1510.07 cv
340.921 1498.33 319.066 1465.54 319.066 1465.54 cv
cp
f
304.897 1504.8 mo
304.897 1504.8 321.093 1518.56 329.995 1522.61 cv
319.066 1511.68 304.897 1504.8 304.897 1504.8 cv
cp
f
463.159 1531.92 mo
463.159 1531.92 485.424 1513.29 496.353 1512.08 cv
488.661 1518.16 463.159 1531.92 463.159 1531.92 cv
cp
f
482.185 1531.11 mo
482.185 1531.11 496.761 1520.59 509.71 1521.39 cv
504.447 1523.82 482.185 1531.11 482.185 1531.11 cv
cp
f
472.471 1635.54 mo
472.471 1635.54 494.732 1644.45 500.4 1652.13 cv
491.494 1650.11 472.471 1635.54 472.471 1635.54 cv
cp
f
374.922 1674.81 mo
374.922 1674.81 369.252 1690.98 370.874 1697.47 cv
373.301 1695.04 374.922 1674.81 374.922 1674.81 cv
cp
f
318.656 1759.39 mo
318.656 1759.39 293.968 1817.68 293.968 1829.82 cv
302.872 1821.73 318.656 1759.39 318.656 1759.39 cv
cp
f
255.717 1762.02 mo
255.717 1762.02 237.2 1780.54 236.29 1790.56 cv
241.145 1785.1 255.717 1762.02 255.717 1762.02 cv
cp
f
247.825 1745.02 mo
247.825 1745.02 218.684 1771.74 217.164 1784.8 cv
223.842 1776.29 247.825 1745.02 247.825 1745.02 cv
cp
f
137.324 1418.99 mo
202.084 1466.76 li
202.084 1466.76 167.28 1424.65 137.324 1418.99 cv
cp
f
147.851 1567.93 mo
147.851 1567.93 106.565 1577.25 80.6591 1575.22 cv
88.7528 1572.79 147.851 1567.93 147.851 1567.93 cv
cp
f
80.6591 1667.52 mo
146.226 1655.38 li
146.226 1655.38 125.994 1667.12 126.8 1668.33 cv
129.342 1672.14 183.468 1657.8 183.468 1657.8 cv
147.038 1660.64 li
147.038 1660.64 161.93 1651.85 158.369 1650.52 cv
151.896 1648.09 80.6591 1667.52 80.6591 1667.52 cv
cp
f
599.57 1638.37 mo
599.57 1638.37 657.856 1644.85 669.998 1660.23 cv
652.996 1659.42 599.57 1638.37 599.57 1638.37 cv
cp
f
570.427 1451.37 mo
570.427 1451.37 616.57 1424.65 634.378 1418.99 cv
619.808 1430.33 570.427 1451.37 570.427 1451.37 cv
cp
f
288.707 1423.04 mo
288.707 1423.04 273.325 1401.18 271.709 1393.89 cv
283.852 1405.23 288.707 1423.04 288.707 1423.04 cv
cp
f
217.474 1461.08 mo
217.474 1461.08 202.898 1456.22 198.849 1441.65 cv
206.947 1443.27 217.474 1461.08 217.474 1461.08 cv
cp
f
1669.78 1568.7 mo
1670.14 1575.94 1678.35 1579.73 1678.35 1579.73 cv
1678.35 1579.73 1669.08 1576.63 1666.56 1584.2 cv
1664.07 1591.78 1676.2 1610.74 1676.2 1610.74 cv
1676.2 1610.74 1661.58 1600.05 1654.8 1603.16 cv
1648.02 1606.27 1644.45 1622.45 1644.45 1622.45 cv
1644.45 1622.45 1642.67 1610.74 1634.81 1609.36 cv
1626.97 1607.99 1618.04 1624.18 1618.04 1624.18 cv
1618.04 1624.18 1622.69 1607.99 1615.9 1603.16 cv
1609.13 1598.34 1592.71 1619.7 1592.71 1619.7 cv
1592.71 1619.7 1605.2 1601.78 1599.84 1595.58 cv
1594.5 1589.37 1578.79 1599.37 1578.79 1599.37 cv
1578.79 1599.37 1590.93 1589.72 1588.42 1582.82 cv
1586.09 1576.39 1566.37 1578.97 1563.75 1579.33 cv
1563.56 1579.37 1563.45 1579.38 1563.45 1579.38 cv
1563.45 1579.38 1563.57 1579.36 1563.75 1579.33 cv
1566.56 1578.93 1588.49 1575.47 1589.5 1568.7 cv
1590.58 1561.46 1575.59 1557.33 1575.59 1557.33 cv
1575.59 1557.33 1590.2 1557.33 1592.36 1552.85 cv
1594.5 1548.36 1575.59 1538.03 1575.59 1538.03 cv
1575.59 1538.03 1593.43 1543.21 1595.57 1540.1 cv
1597.7 1537 1593.43 1531.49 1593.43 1531.49 cv
1593.43 1531.49 1601.64 1535.62 1607.7 1529.76 cv
1612.91 1524.74 1602.71 1508.06 1602.71 1508.06 cv
1602.71 1508.06 1613.04 1524.93 1621.26 1524.59 cv
1626.68 1524.36 1628.64 1518.77 1629.38 1514.96 cv
1629.57 1512.92 1629.82 1511.5 1629.82 1511.5 cv
1629.82 1511.5 1629.76 1513 1629.38 1514.96 cv
1628.86 1520.28 1628.69 1529.85 1634.09 1530.1 cv
1641.6 1530.45 1646.59 1511.15 1646.59 1511.15 cv
1646.59 1511.15 1644.09 1521.49 1648.02 1522.87 cv
1651.94 1524.25 1661.93 1510.46 1661.93 1510.46 cv
1661.93 1510.46 1653.02 1530.45 1658.02 1534.59 cv
1663 1538.72 1676.2 1532.17 1676.2 1532.17 cv
1676.2 1532.17 1660.14 1539.76 1663.36 1546.99 cv
1666.56 1554.23 1693.69 1551.81 1693.69 1551.81 cv
1693.69 1551.81 1669.42 1561.46 1669.78 1568.7 cv
cp
1819.17 1609.94 mo
1753.98 1588.44 1783.66 1586.4 1783.66 1586.4 cv
1783.66 1586.4 1713.16 1573.6 1716.35 1565.93 cv
1721.87 1552.62 1852.02 1543.41 1852.02 1543.41 cv
1852.02 1543.41 1715.3 1541.36 1712.11 1533.17 cv
1708.93 1524.98 1785.25 1479.93 1785.25 1479.93 cv
1785.25 1479.93 1694.1 1516.78 1689.86 1512.7 cv
1685.6 1508.6 1748.15 1417.49 1748.15 1417.49 cv
1748.15 1417.49 1679.26 1497.34 1675 1496.32 cv
1670.76 1495.29 1724.83 1369.38 1724.83 1369.38 cv
1724.83 1369.38 1667.59 1483.01 1660.17 1479.93 cv
1652.76 1476.86 1659.11 1435.92 1659.11 1435.92 cv
1659.11 1435.92 1644.28 1485.06 1638.97 1484.03 cv
1633.67 1483.01 1642.15 1396 1642.15 1396 cv
1642.15 1396 1629.43 1488.13 1619.89 1488.13 cv
1610.35 1488.13 1610.35 1365.29 1610.35 1365.29 cv
1610.35 1365.29 1606.11 1481.99 1599.76 1483.01 cv
1590.22 1452.29 li
1590.22 1452.29 1591.28 1465.61 1589.15 1466.63 cv
1587.04 1467.65 1540.39 1368.36 1540.39 1368.36 cv
1540.39 1368.36 1584.91 1479.93 1574.32 1486.07 cv
1564.48 1491.78 1548.27 1471.92 1545.99 1469.04 cv
1548.85 1472.69 1572.95 1503.78 1567.96 1508.6 cv
1562.67 1513.71 1450.3 1406.23 1450.3 1406.23 cv
1450.3 1406.23 1565.83 1520.88 1562.66 1527.02 cv
1559.48 1533.17 1439.7 1490.17 1439.7 1490.17 cv
1439.7 1490.17 1556.3 1536.24 1554.18 1543.41 cv
1552.07 1550.56 1453.48 1534.19 1453.48 1534.19 cv
1453.48 1534.19 1545.7 1558.76 1546.76 1566.95 cv
1547.81 1575.14 1499.06 1582.3 1499.06 1582.3 cv
1499.06 1582.3 1522.39 1581.28 1524.5 1585.37 cv
1526.62 1589.47 1393.06 1611.99 1393.06 1611.99 cv
1393.06 1611.99 1542.52 1591.52 1545.7 1600.74 cv
1548.88 1609.94 1402.6 1670.33 1402.6 1670.33 cv
1402.6 1670.33 1556.3 1610.96 1563.72 1621.2 cv
1571.14 1631.44 1517.08 1680.57 1517.08 1680.57 cv
1517.08 1680.57 1581.73 1630.41 1589.15 1635.53 cv
1596.58 1640.65 1546.76 1706.16 1546.76 1706.16 cv
1546.76 1706.16 1595.52 1646.79 1604 1652.94 cv
1612.48 1659.08 1583.87 1813.64 1583.87 1813.64 cv
1583.87 1813.64 1616.71 1665.22 1624.14 1666.24 cv
1631.56 1667.27 1643.21 1760.42 1643.21 1760.42 cv
1643.21 1760.42 1636.86 1650.89 1647.46 1650.89 cv
1658.06 1650.89 1713.17 1783.97 1713.17 1783.97 cv
1713.17 1783.97 1669.71 1658.05 1677.13 1651.91 cv
1684.54 1645.77 1719.52 1693.88 1719.52 1693.88 cv
1719.52 1693.88 1683.5 1639.63 1693.03 1634.51 cv
1702.56 1629.39 1750.27 1674.43 1750.27 1674.43 cv
1750.27 1674.43 1699.39 1616.09 1704.7 1609.94 cv
1708.17 1605.92 1748.46 1627.36 1775.86 1642.64 cv
1746.41 1625.46 1702.19 1598.05 1705.75 1590.49 cv
1711.05 1579.22 1778.89 1600.74 1819.17 1609.94 cv
cp
f
1570.61 1363.49 mo
1570.61 1363.49 1556.3 1329.71 1556.3 1312.05 cv
1562.66 1326.64 1570.61 1363.49 1570.61 1363.49 cv
cp
f
1661.75 1370.91 mo
1661.75 1370.91 1660.17 1345.58 1666.53 1337.13 cv
1666.53 1346.34 1661.75 1370.91 1661.75 1370.91 cv
cp
f
1748.42 1400.09 mo
1748.42 1400.09 1752.38 1381.66 1762.72 1374.76 cv
1761.14 1379.36 1748.42 1400.09 1748.42 1400.09 cv
cp
f
1532.19 1451.53 mo
1532.19 1451.53 1509.14 1430.04 1502.76 1418.51 cv
1512.3 1428.5 1532.19 1451.53 1532.19 1451.53 cv
cp
f
1440.98 1446.07 mo
1440.98 1446.07 1417.45 1433.46 1413.77 1422.7 cv
1421.18 1426.31 1440.98 1446.07 1440.98 1446.07 cv
cp
f
1418.5 1502.2 mo
1418.5 1502.2 1386.7 1499.9 1377.96 1497.59 cv
1385.91 1495.29 1418.5 1502.2 1418.5 1502.2 cv
cp
f
1469.38 1566.69 mo
1469.38 1566.69 1394.25 1572.44 1340.6 1569 cv
1375.97 1565.54 1469.38 1566.69 1469.38 1566.69 cv
cp
f
1490.68 1674.22 mo
1490.68 1674.22 1431.78 1719.29 1413.63 1726.59 cv
1425.1 1712.5 1490.68 1674.22 1490.68 1674.22 cv
cp
f
1577.49 1710.26 mo
1577.49 1710.26 1548.08 1770.14 1545.69 1800.09 cv
1553.65 1787.03 1577.49 1710.26 1577.49 1710.26 cv
cp
f
1503.56 1733.29 mo
1503.56 1733.29 1466.19 1764.77 1465.4 1779.36 cv
1473.36 1772.44 1503.56 1733.29 1503.56 1733.29 cv
cp
f
1653.27 1779.49 mo
1653.27 1779.49 1652.64 1810.54 1659.11 1822.89 cv
1660.63 1810.31 1653.27 1779.49 1653.27 1779.49 cv
cp
f
1740.46 1744.04 mo
1740.46 1744.04 1746.82 1771.68 1760.34 1781.66 cv
1757.15 1770.91 1740.46 1744.04 1740.46 1744.04 cv
cp
f
1790.81 1706.42 mo
1790.81 1706.42 1823.41 1736.36 1831.34 1737.9 cv
1824.19 1728.68 1790.81 1706.42 1790.81 1706.42 cv
cp
f
1837.44 1631.18 mo
1837.44 1631.18 1868.45 1646.53 1874.81 1647.3 cv
1866.06 1639.63 1837.44 1631.18 1837.44 1631.18 cv
cp
f
1842.21 1613.52 mo
1842.21 1613.52 1874.81 1627.34 1878.79 1625.81 cv
1874.02 1620.44 1842.21 1613.52 1842.21 1613.52 cv
cp
f
1761.92 1517.56 mo
1761.92 1517.56 1838.24 1505.27 1847.78 1498.36 cv
1831.88 1495.29 1761.92 1517.56 1761.92 1517.56 cv
cp
f
1814.92 1464.07 mo
1814.92 1464.07 1853.08 1450.76 1855.73 1446.67 cv
1847.78 1447.69 1814.92 1464.07 1814.92 1464.07 cv
cp
f
1844.07 1472.26 mo
1844.07 1472.26 1862.63 1469.19 1866.34 1465.61 cv
1859.98 1465.09 1844.07 1472.26 1844.07 1472.26 cv
cp
f
373.356 960.964 mo
372.143 966.227 390.762 979.583 390.762 979.583 cv
390.762 979.583 370.125 967.042 366.07 972.709 cv
362.023 978.366 385.907 1004.18 385.907 1004.18 cv
385.907 1004.18 358.582 976.552 355.142 979.174 cv
350.503 982.726 351.905 1026.14 351.905 1026.14 cv
351.905 1026.14 345.429 983.636 339.762 983.223 cv
334.092 982.823 324.788 1007.1 324.788 1007.1 cv
324.788 1007.1 329.645 986.472 323.574 982.423 cv
317.503 978.366 280.262 991.321 280.262 991.321 cv
280.262 991.321 315.882 974.321 313.86 965.015 cv
312.485 958.706 295.694 958.344 285.009 958.771 cv
280.087 959.295 276.215 959.35 276.215 959.35 cv
276.215 959.35 279.931 958.973 285.009 958.771 cv
293.217 957.906 304.348 955.757 305.36 950.443 cv
306.976 941.943 281.878 927.37 281.878 927.37 cv
281.878 927.37 313.041 941.535 318.307 936.678 cv
323.574 931.821 307.788 902.678 307.788 902.678 cv
307.788 902.678 324.378 924.533 328.833 922.515 cv
333.288 920.495 334.092 890.535 334.092 890.535 cv
334.092 890.535 336.121 921.707 347.856 924.533 cv
357.892 926.955 376.193 894.992 376.193 894.992 cv
376.193 894.992 359.197 925.349 364.856 932.635 cv
370.521 939.923 398.858 931.013 398.858 931.013 cv
398.858 931.013 378.215 939.513 378.215 945.99 cv
378.215 952.464 406.548 963.8 406.548 963.8 cv
406.548 963.8 374.795 954.728 373.356 960.964 cv
cp
418.691 1036.25 mo
430.833 1028.16 476.979 1069.44 476.979 1069.44 cv
476.979 1069.44 433.262 1026.54 439.736 1018.44 cv
446.216 1010.35 547.406 1068.64 547.406 1068.64 cv
547.406 1068.64 428.816 996.178 429.62 985.656 cv
430.426 975.133 518.875 974.123 518.875 974.123 cv
518.875 974.123 432.858 966.631 434.476 952.872 cv
436.095 939.111 540.928 912.392 540.928 912.392 cv
540.928 912.392 439.736 925.349 430.833 912.392 cv
421.93 899.441 472.124 875.961 472.124 875.961 cv
472.124 875.961 417.879 899.441 405.738 888.106 cv
393.595 876.771 423.548 824.963 444.591 781.249 cv
430.023 806.345 380.989 877.43 359.592 870.298 cv
352.309 867.872 359.592 807.961 359.592 807.961 cv
359.592 807.961 346.643 847.633 336.121 848.441 cv
325.593 849.249 311.018 757.779 311.018 757.779 cv
311.018 757.779 323.976 859.775 313.45 864.635 cv
302.927 869.49 290.788 842.777 290.788 842.777 cv
290.788 842.777 303.735 871.104 287.547 881.635 cv
271.359 892.153 184.734 799.065 184.734 799.065 cv
184.734 799.065 267.306 901.063 260.02 912.392 cv
253.675 922.266 166.278 886.698 143.838 877.356 cv
165.857 886.673 249.989 923.098 247.877 935.063 cv
245.449 948.825 115.926 944.776 115.926 944.776 cv
115.926 944.776 251.931 949.635 252.735 960.964 cv
253.541 972.296 179.88 990.925 179.88 990.925 cv
179.88 990.925 245.449 975.533 247.877 986.873 cv
250.306 998.211 212.261 1016.82 212.261 1016.82 cv
212.261 1016.82 252.735 996.789 258.404 1010.55 cv
264.074 1024.31 182.306 1079.15 182.306 1079.15 cv
182.306 1079.15 274.594 1030.58 282.688 1038.68 cv
290.788 1046.77 248.084 1121.66 248.084 1121.66 cv
248.084 1121.66 299.69 1046.78 310.217 1048.39 cv
320.74 1050.02 311.833 1169.82 311.833 1169.82 cv
311.833 1169.82 331.262 1059.73 339.36 1058.1 cv
347.454 1056.49 349.072 1079.15 349.072 1079.15 cv
349.072 1079.15 352.917 1058.51 363.439 1060.94 cv
373.964 1063.37 400.072 1156.06 400.072 1156.06 cv
400.072 1156.06 373.356 1062.16 387.929 1054.07 cv
402.501 1045.97 424.154 1077.34 424.154 1077.34 cv
424.154 1077.34 406.548 1044.35 418.691 1036.25 cv
cp
f
278.643 816.063 mo
278.643 816.063 252.739 776.389 249.5 761.824 cv
264.074 781.249 278.643 816.063 278.643 816.063 cv
cp
f
365.268 788.537 mo
365.268 788.537 370.93 744.817 377.411 733.491 cv
376.599 755.351 365.268 788.537 365.268 788.537 cv
cp
f
192.024 1024.11 mo
192.024 1024.11 148.312 1035.44 128.071 1050.02 cv
147.5 1046.78 192.024 1024.11 192.024 1024.11 cv
cp
f
548.214 977.966 mo
548.214 977.966 584.644 976.35 594.359 980.391 cv
578.979 982.823 548.214 977.966 548.214 977.966 cv
cp
f
968.11 1464.12 mo
977.747 1462.37 960.225 1394.89 946.201 1357.21 cv
968.992 1392.26 999.663 1449.22 1013.67 1445.72 cv
1027.7 1442.21 1025.07 1337.05 1025.07 1337.05 cv
1025.07 1337.05 1039.09 1445.72 1056.63 1445.72 cv
1074.15 1445.72 1082.04 1411.53 1082.04 1411.53 cv
1082.04 1411.53 1075.9 1436.95 1082.91 1440.45 cv
1089.92 1443.96 1149.51 1368.6 1149.51 1368.6 cv
1149.51 1368.6 1103.07 1441.33 1117.97 1449.22 cv
1132.86 1457.11 1215.24 1403.65 1215.24 1403.65 cv
1215.24 1403.65 1133.74 1473.77 1111.83 1460.61 cv
1089.92 1447.47 1116.21 1415.04 1116.21 1415.04 cv
1116.21 1415.04 1089.05 1455.36 1080.29 1450.98 cv
1071.51 1446.59 1075.02 1436.07 1075.02 1436.07 cv
1075.02 1436.07 1070.64 1450.1 1054.87 1452.73 cv
1039.09 1455.36 1026.83 1396.64 1026.83 1396.64 cv
1026.83 1396.64 1025.79 1451.39 1017.18 1454.48 cv
995.273 1462.37 967.233 1401.02 967.233 1401.02 cv
967.233 1401.02 986.51 1454.48 968.11 1464.12 cv
cp
f
1208.24 1472 mo
1208.24 1472 1157.4 1496.54 1160.91 1505.31 cv
1164.42 1514.07 1252.92 1496.54 1252.92 1496.54 cv
1252.92 1496.54 1152.85 1525.14 1146.89 1513.2 cv
1135.5 1490.41 1208.24 1472 1208.24 1472 cv
cp
f
1238.9 1527.21 mo
1238.9 1527.21 1165.28 1532.47 1166.17 1546.5 cv
1167.04 1560.52 1268.7 1578.92 1268.7 1578.92 cv
1268.7 1578.92 1159.16 1576.29 1159.16 1545.62 cv
1159.16 1514.95 1238.9 1527.21 1238.9 1527.21 cv
cp
f
1251.18 1585.93 mo
1251.18 1585.93 1178.43 1580.67 1177.56 1591.19 cv
1176.68 1601.71 1242.4 1619.23 1242.4 1619.23 cv
1242.4 1619.23 1160.91 1609.59 1164.42 1590.32 cv
1167.92 1571.04 1251.18 1585.93 1251.18 1585.93 cv
cp
f
1275.71 1677.07 mo
1275.71 1677.07 1178.43 1620.99 1167.04 1633.26 cv
1155.66 1645.52 1201.23 1697.23 1201.23 1697.23 cv
1201.23 1697.23 1151.27 1666.56 1145.13 1672.69 cv
1139 1678.83 1164.42 1720.89 1164.42 1720.89 cv
1164.42 1720.89 1131.11 1676.19 1139 1666.56 cv
1146.89 1656.92 1182.82 1681.46 1182.82 1681.46 cv
1182.82 1681.46 1144.25 1645.52 1156.53 1626.25 cv
1168.8 1606.96 1275.71 1677.07 1275.71 1677.07 cv
cp
f
1146.01 1842.7 mo
1146.01 1842.7 1101.32 1699.86 1111.83 1690.22 cv
1122.35 1680.58 1181.94 1779.61 1181.94 1779.61 cv
1181.94 1779.61 1123.22 1672.69 1106.58 1680.58 cv
1089.92 1688.47 1146.01 1842.7 1146.01 1842.7 cv
cp
f
1106.58 1775.23 mo
1106.58 1775.23 1093.43 1708.62 1082.91 1710.38 cv
1072.4 1712.13 1081.16 1754.19 1081.16 1754.19 cv
1081.16 1754.19 1063.63 1698.11 1081.16 1691.1 cv
1098.69 1684.09 1106.58 1775.23 1106.58 1775.23 cv
cp
f
1039.97 1752.44 mo
1039.97 1752.44 1040.85 1714.76 1047.86 1713.01 cv
1054.87 1711.25 1057.5 1736.66 1057.5 1736.66 cv
1057.5 1736.66 1057.5 1700.73 1046.98 1700.73 cv
1036.46 1700.73 1039.97 1752.44 1039.97 1752.44 cv
cp
f
990.896 1728.78 mo
990.896 1728.78 999.663 1705.11 1005.8 1708.62 cv
1011.93 1712.13 997.033 1796.26 997.033 1796.26 cv
997.033 1796.26 1023.32 1709.5 1009.3 1697.23 cv
995.273 1684.96 990.896 1728.78 990.896 1728.78 cv
cp
f
918.159 1813.78 mo
918.159 1813.78 977.747 1696.36 985.639 1698.98 cv
993.531 1701.61 990.896 1719.14 990.896 1719.14 cv
990.896 1719.14 1003.69 1686.07 993.093 1681.89 cv
978.622 1676.19 918.159 1813.78 918.159 1813.78 cv
cp
f
928.672 1748.94 mo
928.672 1748.94 967.404 1684.49 957.592 1677.95 cv
952.338 1674.44 936.56 1686.71 936.56 1686.71 cv
936.56 1686.71 953.213 1663.93 962.858 1670.94 cv
972.498 1677.95 928.672 1748.94 928.672 1748.94 cv
cp
f
931.301 1640.26 mo
931.301 1640.26 881.35 1643.77 852.433 1659.55 cv
882.228 1638.51 918.159 1620.99 912.023 1609.59 cv
905.891 1598.2 882.228 1606.96 882.228 1606.96 cv
882.228 1606.96 908.522 1593.82 911.148 1584.18 cv
911.148 1594.7 903.701 1599.96 903.701 1599.96 cv
903.701 1599.96 913.777 1595.58 919.911 1608.72 cv
926.046 1621.86 892.743 1638.51 892.743 1638.51 cv
931.301 1640.26 li
cp
f
916.41 1566.07 mo
916.41 1566.07 886.902 1555.26 838.411 1542.99 cv
878.723 1545.33 920.488 1542.69 921.077 1529.84 cv
920.492 1540.95 892.163 1550.29 882.228 1549.13 cv
905.599 1559.05 916.41 1566.07 916.41 1566.07 cv
cp
f
932.473 1514.66 mo
932.473 1514.66 912.611 1506.48 897.419 1495.38 cv
917.281 1503.56 924.285 1505.31 926.629 1500.05 cv
928.967 1494.79 906.762 1484.28 906.762 1484.28 cv
906.762 1484.28 934.815 1493.63 935.979 1488.37 cv
937.145 1483.11 873.465 1430.53 873.465 1430.53 cv
873.465 1430.53 949.412 1482.52 957.592 1473.17 cv
950.584 1481.93 923.714 1468.5 923.714 1468.5 cv
923.714 1468.5 949.997 1483.11 944.157 1494.79 cv
938.317 1506.47 928.967 1496.54 928.967 1496.54 cv
928.967 1496.54 932.469 1508.22 928.38 1508.82 cv
924.293 1509.4 932.473 1514.66 932.473 1514.66 cv
cp
f
809.493 1719.14 mo
809.493 1719.14 890.992 1682.33 909.397 1665.68 cv
884.857 1675.32 809.493 1719.14 809.493 1719.14 cv
cp
f
766.553 1595.58 mo
766.553 1595.58 862.072 1590.32 874.339 1583.3 cv
861.194 1582.43 766.553 1595.58 766.553 1595.58 cv
cp
f
890.992 1344.64 mo
890.992 1344.64 923.42 1408.62 931.301 1414.76 cv
922.542 1392.85 890.992 1344.64 890.992 1344.64 cv
cp
f
1161.41 1407.38 mo
1161.41 1407.38 1201.08 1374.44 1208.31 1362.82 cv
1188.92 1376.13 1161.41 1407.38 1161.41 1407.38 cv
cp
f
852.803 1562.48 mo
852.803 1562.48 763.14 1562.51 753.926 1557.09 cv
768.641 1554.18 852.803 1562.48 852.803 1562.48 cv
cp
f
1228.1 1768.22 mo
1228.1 1768.22 1193.04 1737.55 1186.03 1727.9 cv
1201.81 1734.91 1228.1 1768.22 1228.1 1768.22 cv
cp
f
1061.59 1845.33 mo
1061.59 1845.33 1053.71 1806.77 1058.08 1784.86 cv
1062.47 1804.15 1061.59 1845.33 1061.59 1845.33 cv
cp
f
2675.07 385.147 mo
2675.07 385.147 2606.42 406.769 2589.35 407.15 cv
2615.91 396.526 2675.07 385.147 2675.07 385.147 cv
cp
f
2643.59 327.491 mo
2643.59 327.491 2610.21 322.566 2601.11 317.25 cv
2621.58 320.287 2643.59 327.491 2643.59 327.491 cv
cp
f
2897.74 364.412 mo
2897.74 364.412 2936.05 359.359 2956.41 365.424 cv
2941.73 367.325 2897.74 364.412 2897.74 364.412 cv
cp
f
2770.79 473.153 mo
2770.79 473.153 2764.72 500.463 2768.77 516.649 cv
2771.3 507.042 2770.79 473.153 2770.79 473.153 cv
cp
f
2702.01 319.148 mo
2698.59 328.631 2660.66 325.214 2660.66 325.214 cv
2660.66 325.214 2692.52 332.426 2691.76 339.629 cv
2691 346.839 2686.46 350.629 2665.97 352.904 cv
2682.79 353.426 2690.25 358.347 2693.3 361.432 cv
2693.26 360.485 2693.15 359.554 2693.15 358.595 cv
2693.15 312.504 2730.51 275.152 2776.6 275.152 cv
2794 275.152 2810.17 280.498 2823.54 289.612 cv
2814.62 270.65 2848.8 201.554 2848.8 201.554 cv
2848.8 201.554 2811.63 275.52 2801.01 272.873 cv
2790.39 270.217 2798.73 248.972 2798.73 248.972 cv
2798.73 248.972 2790 269.079 2780.52 267.561 cv
2773.38 266.414 2771.19 253.423 2770.55 247.088 cv
2770.83 254.092 2770.07 269.592 2757.77 271.357 cv
2748.85 272.625 2738.15 244.891 2730.44 220.225 cv
2736.67 245.247 2742.15 274.321 2735.01 277.42 cv
2727.48 280.685 2712.97 255.852 2709.07 248.892 cv
2712.69 255.508 2724.7 278.007 2717.56 272.496 cv
2729.32 290.7 2725.52 295.248 2720.6 293.732 cv
2709.28 308.628 2678.8 294.263 2662.96 285.311 cv
2677.94 294.631 2704.47 312.303 2702.01 319.148 cv
cp
f
2836.4 300.481 mo
2847.59 311.982 2855.47 326.683 2858.54 343.087 cv
2865.29 340.787 2876.11 340.385 2876.11 340.385 cv
2876.11 340.385 2861.71 340.77 2859.8 333.943 cv
2857.91 327.114 2939.46 306.629 2939.46 306.629 cv
2939.46 306.629 2878.01 319.906 2863.6 319.906 cv
2849.18 319.906 2846.91 313.456 2857.15 299.419 cv
2849.36 303.762 2841.47 302.314 2836.4 300.481 cv
cp
f
2855.25 396.15 mo
2857.15 391.598 2857.91 390.463 2874.98 391.979 cv
2846.91 379.455 2860.56 374.147 2869.67 371.115 cv
2863.69 368.309 2861.04 364.78 2859.87 361.903 cv
2859.14 380.431 2852.45 397.393 2841.56 410.902 cv
2857.26 413.331 2892.42 431.804 2892.42 431.804 cv
2892.42 431.804 2853.35 400.695 2855.25 396.15 cv
cp
f
2800.96 438.42 mo
2795.66 440.026 2790.15 441.114 2784.49 441.651 cv
2789.38 450.469 2797.79 468.618 2803.66 497.426 cv
2801.06 473.153 2800.89 448.705 2800.96 438.42 cv
cp
f
2697.27 384.427 mo
2695.53 394.693 2685.77 403.753 2678.42 409.227 cv
2686.02 404.862 2696.89 400.531 2702.01 407.526 cv
2710.35 418.912 2691 431.044 2656.11 462.532 cv
2709.98 420.432 2717.94 436.737 2710.35 449.252 cv
2724 431.427 2735.39 440.914 2735.77 454.949 cv
2739.88 445.172 2750.1 441.381 2758.07 439.911 cv
2729.35 433.397 2706.28 412.114 2697.27 384.427 cv
cp
f
2822.09 394.018 mo
2813.22 411.262 2791.66 420.042 2773.3 413.646 cv
2781.91 411.647 2790.91 410.953 2799 407.081 cv
2807.38 403.684 2814.4 398.63 2822.09 394.018 cv
cp
f
2743.49 400.84 mo
2729.65 391.486 2720.97 376.744 2720.86 359.769 cv
2720.76 345.61 2726.44 333.646 2736 323.521 cv
2730.89 334.56 2726.48 346.736 2726.73 358.364 cv
2727.08 374.524 2733.82 388.27 2743.49 400.84 cv
cp
f
2779.39 152.113 mo
2795.01 151.946 2809.81 152.807 2825.28 155.095 cv
2838.56 157.06 2851.45 162.046 2863.73 167.296 cv
2881.03 174.703 2897.04 184.85 2911.39 197.04 cv
2923.7 207.503 2933.55 220.071 2943.14 232.946 cv
2932.43 222.131 2922 211.173 2910.03 201.717 cv
2895.86 190.524 2879.9 180.738 2863.38 173.448 cv
2851.37 168.145 2839.42 163.511 2826.72 159.981 cv
2811.26 155.678 2795.26 154.165 2779.39 152.113 cv
cp
f
2633.32 212.762 mo
2653.82 187.416 2681.83 169.952 2713.65 162.808 cv
2707.88 166.286 2701.83 169.365 2695.74 172.274 cv
2687.63 176.15 2680 181.222 2672.14 185.616 cv
2659.09 194.465 2646.55 204.248 2633.32 212.762 cv
cp
f
2679.73 538.938 mo
2647.06 522.168 2621.89 498.87 2601.5 468.346 cv
2582.94 436.741 2573.73 403.381 2573.35 366.811 cv
2578.08 401.226 2587.45 433.38 2605.38 463.388 cv
2623.94 494.501 2650.06 518.665 2679.73 538.938 cv
cp
f
2984.64 338.015 mo
2988 362.875 2987.94 387.075 2981.61 411.595 cv
2974.63 438.772 2961.01 462.496 2943.07 483.823 cv
2956.88 460.286 2968.8 436.608 2976.01 410.13 cv
2982.48 386.343 2983.74 362.455 2984.64 338.015 cv
cp
f
1684.99 949.989 mo
1679.54 953.213 1652.26 945.481 1652.26 945.481 cv
1652.26 945.481 1677.11 958.363 1680.15 960.286 cv
1683.18 962.227 1680.15 970.596 1677.72 973.816 cv
1675.29 977.032 1601.35 945.481 1601.35 945.481 cv
1601.35 945.481 1672.87 984.115 1671.66 987.987 cv
1670.44 991.843 1653.48 984.115 1653.48 984.115 cv
1653.48 984.115 1671.06 993.126 1667.42 998.278 cv
1663.78 1003.43 1621.35 969.96 1621.35 969.96 cv
1621.35 969.96 1663.17 1005.37 1658.33 1009.87 cv
1653.48 1014.37 1649.85 1007.94 1623.77 990.559 cv
1634.77 999.987 1644.25 1013.77 1649 1021.25 cv
1649.55 1022.13 1650.07 1022.95 1650.49 1023.64 cv
1647.36 1026.8 1644.6 1030.13 1642.78 1033.61 cv
1641.96 1035.17 1642.7 1037.08 1644.32 1037.6 cv
1652.59 1040.32 1663.95 1028.2 1670.92 1020.78 cv
1679.91 1013.6 1686.32 1003.59 1688.84 990.033 cv
1690.16 982.895 1693.51 984.065 1695.92 979.035 cv
1698.97 972.743 1700.56 967.572 1701.56 960.46 cv
1702.98 950.334 1704.28 937.825 1701.23 928.068 cv
1700.64 926.172 1697.81 925.329 1696.87 927.467 cv
1696.2 929.007 1695.63 930.56 1695.12 932.118 cv
1693.84 936.105 1693.03 940.047 1692.45 944.023 cv
1690.53 945.921 1687.86 948.305 1684.99 949.989 cv
cp
f
1517.34 750.049 mo
1515.42 742.187 1513.78 734.262 1511.76 726.42 cv
1510.55 721.746 1509.8 715.513 1506.18 712.253 cv
1505.73 711.84 1504.95 712.219 1505.13 712.901 cv
1508.55 725.541 1510.52 738.351 1515.03 750.729 cv
1515.58 752.217 1517.73 751.664 1517.34 750.049 cv
cp
f
1527.95 763.421 mo
1525.62 742.867 1522.36 722.624 1516.67 702.787 cv
1516.36 701.73 1514.62 701.879 1514.77 703.064 cv
1517.26 723.543 1520.49 743.792 1525.39 763.794 cv
1525.75 765.277 1528.13 765.002 1527.95 763.421 cv
cp
f
1586.38 727.123 mo
1589.65 719.238 1589.53 709.153 1587.14 700.985 cv
1586.99 700.474 1586.3 700.468 1586.16 700.985 cv
1583.94 708.993 1584.97 718.438 1585.01 726.719 cv
1585.01 727.454 1586.07 727.866 1586.38 727.123 cv
cp
f
1656.82 770.858 mo
1665.27 759.086 1672.33 746.337 1680.73 734.522 cv
1681.43 733.523 1679.88 732.292 1679.12 733.208 cv
1674.17 739.085 1669.52 745.241 1665.01 751.516 cv
1661.16 756.868 1655.2 763.272 1654.5 770.183 cv
1654.35 771.659 1656.18 771.768 1656.82 770.858 cv
cp
f
1377.44 895.123 mo
1362.24 885.196 1345.14 873.442 1328.22 867.339 cv
1327.43 867.055 1326.75 868.276 1327.39 868.85 cv
1340.92 881.168 1360.06 890.503 1376.91 896.436 cv
1377.66 896.705 1378.08 895.539 1377.44 895.123 cv
cp
f
1334.36 891.335 mo
1333.85 891.385 1333.65 892.046 1334.1 892.357 cv
1338.6 895.432 1343.7 897.351 1348.51 899.805 cv
1353.17 902.179 1357.8 904.283 1362.99 904.616 cv
1364.64 904.723 1364.93 902.434 1363.78 901.588 cv
1359.67 898.557 1355.14 896.705 1350.47 894.893 cv
1345.28 892.873 1339.95 890.804 1334.36 891.335 cv
cp
f
1354.17 937.898 mo
1347.59 933.681 1337.53 931.916 1330.07 934.102 cv
1329.47 934.283 1329.34 935.207 1329.89 935.54 cv
1336.46 939.384 1346.02 940.672 1353.45 940.714 cv
1354.88 940.72 1355.36 938.677 1354.17 937.898 cv
cp
f
1525.65 1102.43 mo
1521.7 1127.8 1519.64 1152.79 1518.82 1178.57 cv
1518.77 1180.13 1521.06 1180.47 1521.39 1178.94 cv
1524.15 1165.89 1525.33 1152.7 1525.95 1139.36 cv
1526.46 1128.36 1530.37 1112.89 1526.74 1102.43 cv
1526.56 1101.94 1525.75 1101.79 1525.65 1102.43 cv
cp
f
1513.24 1123.96 mo
1509.01 1132.44 1508.36 1144.68 1508.8 1154.1 cv
1508.85 1155.08 1510.27 1155.71 1510.71 1154.65 cv
1514.38 1145.82 1515.05 1134.03 1515.03 1124.49 cv
1515.03 1123.49 1513.69 1123.05 1513.24 1123.96 cv
cp
f
1595.05 1156.64 mo
1594.41 1156.18 1593.71 1157.07 1594.04 1157.72 cv
1596.85 1163.24 1595.57 1170.2 1597.94 1175.96 cv
1598.4 1177.05 1599.69 1176.49 1600.02 1175.67 cv
1602.5 1169.41 1600.46 1160.53 1595.05 1156.64 cv
cp
f
1716.51 1089.27 mo
1715.41 1088.68 1714.32 1089.85 1714.87 1091 cv
1716.91 1095.34 1720.2 1098.94 1723.58 1102.16 cv
1724.24 1102.78 1725.66 1102.44 1725.53 1101.3 cv
1724.85 1095.91 1720.96 1091.62 1716.51 1089.27 cv
cp
f
1798.12 969.731 mo
1780.16 963.437 1757.15 961.749 1738.74 966.621 cv
1738.02 966.81 1738.02 967.944 1738.74 968.132 cv
1757.11 973.008 1778.82 972.313 1797.73 972.814 cv
1799.45 972.848 1799.67 970.276 1798.12 969.731 cv
cp
f
1782.58 978.042 mo
1770 976.577 1757.73 976.459 1745.24 978.854 cv
1743.73 979.153 1744.07 981.847 1745.6 981.708 cv
1757.94 980.601 1770.23 982.436 1782.58 981.182 cv
1784.49 980.988 1784.46 978.265 1782.58 978.042 cv
cp
f
1762 931.315 mo
1762.06 932.086 1763.12 932.103 1763.14 931.315 cv
1764.51 889.893 1748.21 841.058 1726.45 806.898 cv
1726.25 806.576 1725.76 806.871 1725.97 807.203 cv
1746.59 842.934 1758.98 889.779 1762 931.315 cv
cp
f
1372.32 859.523 mo
1373.39 839.146 1386.89 822.2 1400.34 808.887 cv
1401.04 808.186 1400.01 807.146 1399.3 807.782 cv
1384.81 820.583 1371.48 838.743 1370.95 859.523 cv
1370.93 860.464 1372.26 860.449 1372.32 859.523 cv
cp
f
1354.99 970.596 mo
1354.94 969.746 1353.77 969.735 1353.74 970.596 cv
1352.67 999.364 1353.17 1032.39 1371.94 1055.26 cv
1372.59 1056.05 1373.77 1055.04 1373.28 1054.17 cv
1359.06 1028.63 1356.3 999.655 1354.99 970.596 cv
cp
f
1387.65 873.07 mo
1392.75 872.316 1394.26 869.05 1397.11 864.605 cv
1401.99 856.943 1406.28 848.727 1410.62 840.576 cv
1413.98 840.063 1418.09 840.288 1421.34 843.106 cv
1415.88 831.521 1416.49 828.94 1420.73 823.149 cv
1424.97 817.347 1446.19 830.23 1446.19 830.23 cv
1446.19 830.23 1431.64 814.131 1435.28 808.979 cv
1438.91 803.828 1444.37 812.197 1444.37 812.197 cv
1444.37 812.197 1443.57 806.5 1444.82 801.164 cv
1447.31 799.564 1449.9 797.948 1452.6 796.243 cv
1464.33 788.846 1473.08 776.953 1485.14 770.009 cv
1485.49 769.821 1485.26 769.247 1484.89 769.356 cv
1472.18 773.014 1462.95 774.396 1451.7 782.556 cv
1443.13 788.764 1432.82 796.056 1425.03 803.465 cv
1405.57 821.996 1402.21 850.657 1386.71 871.348 cv
1386.08 872.198 1386.67 873.217 1387.65 873.07 cv
cp
f
1547.4 753.69 mo
1564.44 751.596 1581.27 751.1 1598.23 754.116 cv
1616.62 757.367 1628.72 768.127 1644.39 777.24 cv
1645.61 777.949 1646.71 776.326 1645.83 775.247 cv
1620.24 744.106 1582.59 744.062 1547.21 752.264 cv
1546.47 752.442 1546.63 753.778 1547.4 753.69 cv
cp
f
1462.26 1094.12 mo
1458.28 1092.77 1454.21 1091.12 1450.12 1089.52 cv
1447.08 1085.55 1444.97 1081.35 1444.97 1081.35 cv
1444.97 1081.35 1431.64 1077.48 1424.97 1072.97 cv
1418.3 1068.47 1424.97 1060.74 1424.97 1060.74 cv
1424.97 1060.74 1417.7 1067.18 1412.85 1063.31 cv
1408.01 1059.45 1427.4 1041.42 1427.4 1041.42 cv
1427.4 1041.42 1409.21 1054.3 1403.15 1049.8 cv
1397.1 1045.28 1400.13 1037.56 1421.95 1022.75 cv
1404.75 1031.63 1395.42 1031.43 1391.16 1028.53 cv
1389.32 1023.12 1388.1 1017.51 1387.94 1011.73 cv
1387.73 1004.61 1389.8 999.806 1387.89 994.309 cv
1387.82 988.021 1386.49 981.863 1385 975.651 cv
1387.59 970.285 1394.42 962.071 1406.79 961.578 cv
1395.62 959.96 1384.05 945.281 1380.58 940.536 cv
1380.92 929.211 1382.75 917.855 1385.66 907.444 cv
1385.79 906.979 1385.16 906.708 1384.93 907.122 cv
1369.97 933.791 1373.86 968.275 1383.15 996.789 cv
1378.68 1018.2 1379.15 1032.96 1390.32 1053.86 cv
1400.46 1072.81 1415.32 1085.5 1433.9 1092.58 cv
1446.81 1106.62 1470.29 1110.44 1487.56 1111.85 cv
1488.28 1111.91 1488.4 1110.88 1487.9 1110.5 cv
1480.33 1104.84 1471.14 1097.16 1462.26 1094.12 cv
cp
f
1706.28 1058.29 mo
1699.55 1062.55 1695.53 1067.64 1690.76 1074.21 cv
1688.19 1077.72 1685.72 1081.45 1683.48 1085.19 cv
1681.83 1087.92 1679.46 1089.93 1677.92 1092.75 cv
1671.02 1097.61 1664.03 1101.86 1656.81 1105.58 cv
1653.73 1104.98 1646.6 1102.77 1641.96 1094.86 cv
1643.13 1103.26 1639.48 1109.99 1635.4 1114.72 cv
1633.18 1115.47 1630.91 1116.19 1628.6 1116.87 cv
1614.47 1120.98 1597.21 1121.53 1583.61 1127.71 cv
1580.79 1126.6 1577.99 1125.97 1574.68 1125.5 cv
1569.74 1124.78 1565.13 1123.31 1560.28 1122.33 cv
1558.47 1121.97 1556.48 1123.57 1557.12 1125.69 cv
1560.58 1137.18 1578.26 1135.71 1586.78 1133.54 cv
1601.3 1136.5 1617.26 1130.34 1631.12 1126.58 cv
1653.27 1120.55 1665.86 1107.36 1681.67 1091.28 cv
1683.39 1090.38 1685.21 1089.53 1686.61 1088.53 cv
1689.66 1086.33 1691.83 1082.98 1694.28 1080.11 cv
1699.99 1073.45 1704.88 1067.84 1707.38 1059.18 cv
1707.56 1058.51 1706.83 1057.94 1706.28 1058.29 cv
cp
f
1743.34 1008.38 mo
1741.34 1011.19 1738.86 1013 1737.37 1016.19 cv
1735.92 1019.26 1735.04 1022.57 1733.58 1025.65 cv
1732.35 1028.24 1731.35 1030.93 1730 1033.47 cv
1728.82 1035.72 1727.01 1037.53 1726.23 1040 cv
1726.16 1040.21 1726.26 1040.46 1726.43 1040.55 cv
1731.08 1043.21 1736.22 1035.38 1738.94 1032.41 cv
1741.53 1029.59 1743.52 1025.44 1744.64 1021.71 cv
1746.14 1016.8 1745.03 1013.7 1744.62 1008.74 cv
1744.55 1008 1743.76 1007.79 1743.34 1008.38 cv
cp
f
1521.92 856.817 mo
1523.58 859.946 1524.83 861.941 1524.83 861.941 cv
1524.83 861.941 1523.66 859.797 1521.92 856.817 cv
cp
f
1522.56 879.32 mo
1522.5 879.141 1521.96 878.251 1521.07 876.883 cv
1522.05 878.623 1522.63 879.581 1522.56 879.32 cv
cp
f
1574.07 913.295 mo
1578.92 913.937 1574.69 897.837 1561.95 894.616 cv
1549.22 891.396 1534.07 902.983 1529.23 911.354 cv
1524.38 919.728 1522.56 933.25 1518.32 942.267 cv
1514.07 951.281 1517.71 957.719 1526.8 963.512 cv
1526.8 963.512 1531.04 964.156 1532.86 960.934 cv
1532.97 960.728 1533.08 960.444 1533.17 960.114 cv
1533.27 959.692 1533.34 959.331 1533.4 958.918 cv
1534.28 952.844 1533.26 937.553 1535.89 931.961 cv
1538.91 925.522 1556.49 942.907 1556.49 942.907 cv
1556.49 942.907 1548.62 925.522 1548.62 920.373 cv
1548.62 915.216 1569.23 912.649 1574.07 913.295 cv
cp
f
1581.35 993.126 mo
1588.01 989.911 1591.65 980.256 1587.41 977.676 cv
1583.17 975.104 1575.89 982.828 1571.04 987.335 cv
1566.2 991.843 1550.69 982.966 1551.04 987.987 cv
1551.65 996.355 1574.69 996.355 1581.35 993.126 cv
cp
f
1725.6 928.098 mo
1731.18 930.872 1733.1 937.034 1733.77 941.381 cv
1733.04 946.704 1731.92 951.938 1730.23 957.009 cv
1730.15 957.251 1730.45 957.392 1730.6 957.245 cv
1739.51 948.748 1741.14 937.61 1742.48 925.255 cv
1745.02 901.588 1736.95 886.412 1728.99 864.694 cv
1716.62 830.915 1699.12 805.366 1667.01 789.946 cv
1666.61 789.742 1666.22 790.23 1666.53 790.609 cv
1674.79 800.625 1684.52 808.958 1693.82 817.852 cv
1705.4 828.932 1712.3 841.527 1718.32 856.24 cv
1717.74 864.237 1715.36 875.919 1706.81 883.028 cv
1712.93 879.566 1721.5 878.729 1727.01 880.705 cv
1728 884.007 1728.92 887.338 1729.76 890.72 cv
1725.25 893.965 1716.51 895.255 1716.51 895.255 cv
1731.08 896.324 li
1731.3 897.32 1731.49 898.303 1731.69 899.293 cv
1726.21 905.563 li
1732.67 904.652 li
1733.09 907.131 1733.44 909.61 1733.74 912.1 cv
1732.65 916.273 1729.13 928.633 1725.6 928.098 cv
cp
f
1621.19 1063.31 mo
1631.2 1055.58 1628.93 1047.86 1626.65 1044.96 cv
1624.38 1042.07 1621.19 1048.82 1619.38 1052.69 cv
1617.56 1056.55 1605.29 1060.9 1601.65 1060.9 cv
1598.01 1060.9 1591.65 1068.14 1585.75 1066.22 cv
1585.13 1066.02 1584.55 1065.68 1583.98 1065.26 cv
1583.24 1064.71 1582.67 1064.16 1582.12 1063.53 cv
1577.94 1058.73 1574.6 1048.85 1572.1 1040.14 cv
1578.92 1033.37 1579.83 1015.02 1579.83 1015.02 cv
1579.83 1015.02 1574.38 1031.93 1572.1 1031.44 cv
1569.83 1030.97 1569.38 1014.05 1569.38 1014.05 cv
1569.38 1014.05 1555.73 1062.83 1547.1 1063.79 cv
1538.46 1064.77 1541.65 1041.1 1541.65 1041.1 cv
1541.65 1041.1 1535.74 1061.38 1531.2 1059.45 cv
1526.65 1057.52 1536.2 1006.33 1536.2 1006.33 cv
1536.2 1006.33 1523.46 1057.03 1519.38 1055.1 cv
1515.29 1053.17 1533.92 987.5 1533.92 987.5 cv
1533.92 987.5 1518.46 1022.27 1516.19 1020.33 cv
1513.92 1018.41 1527.55 988.467 1527.55 988.467 cv
1489.82 1038.69 li
1489.82 1038.69 1483.01 1038.69 1480.27 1036.28 cv
1477.56 1033.86 1491.64 1001.5 1491.64 1001.5 cv
1491.64 1001.5 1473.46 1026.61 1471.18 1027.58 cv
1470.92 1027.69 1470.64 1027.75 1470.35 1027.75 cv
1470.22 1027.76 1470.07 1027.72 1469.93 1027.71 cv
1469.79 1027.69 1469.65 1027.68 1469.5 1027.64 cv
1469.34 1027.6 1469.18 1027.52 1469.02 1027.45 cv
1468.88 1027.39 1468.75 1027.34 1468.61 1027.27 cv
1468.44 1027.18 1468.27 1027.07 1468.09 1026.95 cv
1467.95 1026.86 1467.82 1026.76 1467.67 1026.66 cv
1467.5 1026.53 1467.32 1026.38 1467.15 1026.23 cv
1466.99 1026.11 1466.84 1025.97 1466.68 1025.83 cv
1466.51 1025.67 1466.34 1025.51 1466.17 1025.34 cv
1465.99 1025.17 1465.82 1024.98 1465.65 1024.8 cv
1465.48 1024.63 1465.31 1024.46 1465.15 1024.27 cv
1464.94 1024.05 1464.73 1023.8 1464.51 1023.56 cv
1464.37 1023.4 1464.23 1023.25 1464.09 1023.08 cv
1463.74 1022.67 1463.38 1022.24 1463 1021.79 cv
1459.82 1017.92 1456.19 1006.33 1454.36 1004.87 cv
1452.55 1003.43 1450.74 1007.29 1452.09 1011.65 cv
1453.45 1015.99 1455.27 1026.13 1458 1031.44 cv
1460.73 1036.75 1466.64 1045.93 1470.73 1049.3 cv
1474.82 1052.69 1481.18 1056.83 1488.46 1060.9 cv
1531.64 1085.05 1562.1 1079.24 1572.1 1076.35 cv
1582.11 1073.46 1611.2 1071.04 1621.19 1063.31 cv
cp
f
1611.27 792.065 mo
1591.21 783.252 1551.57 778.708 1523.94 788.383 cv
1500.67 796.536 1478.52 818.909 1461.73 838.407 cv
1454.32 840.465 1449.31 843.516 1443.08 850.68 cv
1438.27 856.208 1429.65 865.967 1429.23 873.602 cv
1428.35 889.533 1419.35 901.672 1420.9 917.775 cv
1422.09 930.247 1431.69 939.393 1435.57 950.791 cv
1436.71 954.143 1440.74 953.337 1441.15 949.991 cv
1442.03 942.699 1440.36 938.212 1437.5 931.606 cv
1435.94 928.016 1434.79 924.674 1433.89 921.414 cv
1438.37 917.377 1448.48 910.671 1473.46 919.406 cv
1438 905.403 1436.64 896.705 1440.73 890.922 cv
1444.82 885.116 1454.82 892.844 1454.82 892.844 cv
1454.82 892.844 1443.91 879.806 1452.09 873.533 cv
1460.28 867.247 1476.64 875.458 1476.64 875.458 cv
1476.64 875.458 1461.2 858.557 1468.46 852.763 cv
1475.73 846.972 1481.18 857.111 1481.18 857.111 cv
1481.18 857.111 1473.92 840.214 1483.92 837.792 cv
1492.63 835.696 1515.1 867.625 1521.07 876.883 cv
1516.45 868.619 1502.73 842.262 1505.73 838.276 cv
1508.38 834.762 1517.27 848.862 1521.92 856.817 cv
1517.32 848.199 1509.37 830.683 1514.37 820.411 cv
1521.19 806.412 1544.38 802.056 1548.47 807.37 cv
1552.56 812.686 1556.65 828.137 1556.65 828.137 cv
1556.65 828.137 1555.73 799.638 1565.29 800.61 cv
1574.83 801.574 1584.38 806.412 1584.38 812.686 cv
1584.38 818.961 1584.38 832.004 1584.38 832.004 cv
1584.38 832.004 1589.83 810.747 1598.01 814.131 cv
1606.19 817.511 1607.56 841.172 1601.2 873.042 cv
1609.83 849.868 1616.2 824.755 1628.02 828.625 cv
1639.83 832.485 1623.47 863.873 1623.47 863.873 cv
1623.47 863.873 1638.92 842.805 1648.55 838.552 cv
1651.66 842.269 1655.02 845.697 1658.5 849.024 cv
1659.5 856.329 1658.47 864.359 1658.47 864.359 cv
1668.37 859.096 li
1671.7 863.721 1673.41 868.953 1676.88 873.615 cv
1677.89 874.968 1679.92 874.648 1680.99 873.615 cv
1681.54 873.061 1682.11 872.51 1682.68 871.96 cv
1684.41 870.275 1684.41 867.645 1683.45 865.561 cv
1676.06 849.283 1659.41 838.154 1648.83 824.187 cv
1639.25 811.545 1622.53 797.028 1611.27 792.065 cv
cp
f
347.9 276.998 mo
336.89 254.995 315.173 260.056 321.831 287.425 cv
321.831 287.425 329.357 270.627 347.9 276.998 cv
cp
f
410.487 294.206 mo
435.992 301.904 436.571 280.482 432.511 270.055 cv
428.452 259.625 391.013 233.601 379.313 276.734 cv
382.094 271.208 406.43 273.184 410.487 294.206 cv
cp
f
302.108 432.107 mo
315.987 464.996 335.748 444.389 338.221 432.015 cv
330.277 435.274 318.93 429.331 316.716 418.102 cv
288.416 417.87 300.972 393.418 300.972 393.418 cv
280.104 394.001 272.567 418.91 302.108 432.107 cv
cp
f
305.204 471.421 mo
301.538 476.112 297.851 480.946 295.626 486.277 cv
247.529 457.508 215.003 405.462 213.566 345.696 cv
214.294 345.669 215.014 345.634 215.736 345.61 cv
221.169 345.425 226.603 345.42 232.043 345.37 cv
232.671 399.1 261.892 445.933 305.204 471.421 cv
cp
232.502 332.03 mo
232.296 334.65 232.17 337.295 232.104 339.954 cv
226.056 339.398 219.743 339.457 213.5 339.93 cv
213.53 337.224 213.614 334.535 213.768 331.861 cv
220.006 332.272 226.268 332.339 232.502 332.03 cv
cp
599.46 331.152 mo
601.188 325.073 608.988 317.256 583.026 312.913 cv
593.738 295.525 593.397 276.6 564.151 270.341 cv
604.947 250.256 li
609.053 260.835 612.07 271.829 613.449 283.374 cv
613.605 284.632 615.547 284.706 615.491 283.374 cv
615.004 271.122 612.256 259.665 608.084 248.707 cv
615.496 245.06 li
615.964 246.341 616.433 247.621 616.9 248.913 cv
617.376 250.218 619.297 249.71 618.996 248.328 cv
618.67 246.833 618.302 245.348 617.927 243.86 cv
636.489 234.724 li
617.094 240.731 li
609.697 213.827 594.719 189.385 571.799 172.966 cv
571.416 172.699 570.944 173.32 571.296 173.606 cv
593.719 191.86 604.549 215.603 614.221 241.617 cv
606.237 244.089 li
601.057 231.757 594.189 220.017 586.884 208.416 cv
574.57 188.849 561.474 168.269 541.799 155.358 cv
541.065 154.865 540.409 156.031 541.122 156.534 cv
558.863 169.176 570.014 188.224 581.606 206.215 cv
589.645 218.713 597.103 231.6 602.863 245.133 cv
556.983 259.341 li
551.585 239.729 539.087 201.4 518.12 196.492 cv
518.835 170.039 489.679 165.386 469.687 178.598 cv
484.904 187.66 498.739 198.82 510.813 211.657 cv
512.881 220.803 514.306 232.403 509.879 237.326 cv
518.888 234.047 526.904 236.197 532.986 240.272 cv
537.054 246.708 540.743 253.413 544.032 260.347 cv
541.427 266.892 531.612 271.204 531.612 271.204 cv
531.612 271.204 541.551 272.29 550.773 276.463 cv
553.58 284.167 555.906 292.104 557.714 300.242 cv
547.641 308.578 529.73 316.074 525.561 317.759 cv
523.263 304.998 519.247 292.625 513.526 281.36 cv
513.212 280.731 512.286 281.287 512.598 281.909 cv
521.283 300 524.233 318.037 524.28 336.384 cv
515.026 338.51 496.692 339.128 478.292 318.702 cv
453.916 291.638 480.167 252.931 497.904 253.202 cv
470.775 218.019 428.225 195.335 380.351 195.335 cv
364.043 195.335 348.361 198.003 333.682 202.865 cv
332.152 199.632 330.277 196.545 328.564 193.39 cv
328.33 192.99 327.659 193.264 327.809 193.708 cv
329.006 197.014 330.193 200.343 331.594 203.572 cv
329.976 204.131 328.378 204.725 326.788 205.337 cv
323.151 199.06 318.902 193.116 315.824 186.582 cv
336.165 177.878 358.559 173.034 382.094 173.034 cv
388.616 173.034 395.04 173.42 401.365 174.143 cv
400.958 175.95 400.706 177.796 400.386 179.431 cv
399.567 183.733 398.841 188.605 400.87 192.649 cv
401.011 192.915 401.432 192.894 401.569 192.649 cv
403.559 189.049 404.054 184.661 404.942 180.688 cv
405.373 178.814 406.108 176.862 406.687 174.894 cv
413.583 175.904 420.345 177.327 426.943 179.149 cv
426.446 180.399 426.023 181.698 425.472 182.824 cv
424.234 185.33 423.037 187.576 422.645 190.381 cv
422.468 191.61 424.27 192.704 424.874 191.317 cv
426.126 188.445 427.799 185.734 429.215 182.935 cv
429.679 182.036 430.143 181.079 430.468 180.098 cv
439.597 182.834 448.406 186.319 456.814 190.482 cv
456.018 187.243 455.218 184.015 454.379 180.789 cv
450.691 175.479 445.129 170.361 438.656 165.882 cv
453.367 111.927 li
431.907 161.669 li
425.815 158.197 419.276 155.352 412.836 153.447 cv
418.609 118.88 li
407.524 152.096 li
397.465 149.947 388.159 150.383 382.094 154.788 cv
362.981 132.2 303.868 137.413 293.435 167.821 cv
283.342 166.814 277.372 172.242 274.119 176.977 cv
242.44 130.466 li
266.233 182.8 li
260.69 183.123 250.609 187.028 238.677 206.914 cv
224.602 230.352 229.627 252.208 231.079 266.583 cv
248.41 231.787 277.414 203.826 312.965 187.819 cv
315.495 194.484 319.314 200.711 323.303 206.711 cv
311.993 211.426 301.395 217.482 291.708 224.707 cv
289.53 221.523 287.156 218.476 284.593 215.755 cv
283.309 214.391 281.444 216.375 282.575 217.775 cv
284.883 220.597 286.746 223.863 288.675 227.083 cv
257.6 251.543 236.545 288.122 232.679 329.715 cv
226.431 329.397 220.168 329.458 213.917 329.862 cv
215.19 311.486 219.372 293.914 226.06 277.628 cv
207.03 280.908 209.995 308.565 209.995 308.565 cv
209.995 308.565 199.561 309.434 204.773 326.813 cv
200.425 323.334 180.433 319.864 181.304 336.368 cv
152.616 335.494 160.44 383.283 177.833 401.529 cv
163.05 433.677 221.289 467.555 242.145 477.114 cv
245.621 506.659 296.039 500.57 296.039 500.57 cv
296.039 500.57 305.604 529.24 332.55 535.328 cv
359.075 541.315 388.883 524.61 389.838 524.078 cv
383.674 519.763 377.979 514.931 373 509.875 cv
354.281 508.879 336.382 504.804 319.769 498.192 cv
320.899 494.741 321.638 491.127 322.762 487.667 cv
323.378 485.746 320.358 484.936 319.738 486.841 cv
318.658 490.191 317.722 493.59 316.814 496.999 cv
311.193 494.64 305.743 491.965 300.45 489.029 cv
303.577 484.082 306.469 478.892 308.982 473.58 cv
311.783 475.123 314.628 476.583 317.538 477.94 cv
318.666 478.095 319.824 478.238 320.986 478.383 cv
349.76 491.437 395.943 496.21 427.881 483.776 cv
404.121 492.463 382.679 476.245 377.457 466.982 cv
360.077 472.776 342.689 465.242 347.332 444.389 cv
338.373 453.642 325.281 457.344 314.672 458.767 cv
290.426 450.14 267.517 436.337 260.829 416.3 cv
246.926 374.6 267.94 374.158 262.14 365.473 cv
256.346 356.785 246.489 329.132 269.671 305.962 cv
277.911 322.983 306.463 346.229 325.704 336.752 cv
313.834 335.532 301.054 328.709 294.239 320.988 cv
282.964 308.209 278.262 291.146 283.812 274.667 cv
287.417 263.998 296.165 254.562 306.949 250.965 cv
325.483 232.334 347.483 236.446 354.857 252.676 cv
354.857 252.676 357.181 200.545 409.921 217.339 cv
423.548 221.683 433.677 227.777 440.893 234.771 cv
441.853 234.51 442.95 234.666 444.044 235.482 cv
465.434 251.325 461.774 284.064 443.341 301.1 cv
432.259 311.345 406.407 319.35 391.059 311.479 cv
389.872 323.01 384.916 344.036 365.289 359.248 cv
376.429 354.798 386.4 351.625 395.325 349.594 cv
400.049 344.123 406.46 340.01 413.512 337.935 cv
425.585 334.373 442.865 333.352 452.26 343.62 cv
460.808 352.955 461.551 365.277 455.861 376.365 cv
453.044 381.843 449.055 385.452 444.321 387.875 cv
439.449 404.511 427.767 425.292 417.851 441.15 cv
422.916 434.63 428.836 427.991 435.085 422.875 cv
432.974 432.149 437.755 441.859 425.56 443.816 cv
420.349 456.553 405.862 458.868 398.902 455.978 cv
398.902 455.978 415.708 471.032 435.992 457.71 cv
455.391 444.963 457.765 432.216 439.658 419.467 cv
451.077 411.828 463.184 410.389 473.079 424.695 cv
481.573 436.983 481.718 447.131 477.912 455.275 cv
490.656 444.143 501.431 430.848 509.771 416.005 cv
502.742 414.835 493.805 408.667 485.241 389.365 cv
471.053 357.334 507.818 350.25 523.892 348.689 cv
523.168 360.664 521.491 372.794 519.555 385.181 cv
519.458 385.787 520.266 386.023 520.478 385.431 cv
524.799 373.701 527.148 361.127 527.697 348.384 cv
528.002 348.365 528.306 348.344 528.59 348.333 cv
528.63 346.762 528.711 345.193 528.711 343.611 cv
528.711 340.776 528.617 337.967 528.459 335.174 cv
528.208 335.254 527.92 335.357 527.646 335.448 cv
527.341 329.581 526.628 323.738 525.597 317.963 cv
529.837 317.252 547.761 314.352 560.212 313.813 cv
560.647 316.793 561.032 319.791 561.325 322.812 cv
554.214 325.146 546.385 326.813 546.385 326.813 cv
561.832 329.016 li
562.104 333.171 562.248 337.36 562.248 341.582 cv
562.248 355.906 560.645 369.85 557.64 383.264 cv
550.478 392.829 540.882 399.475 528.122 398.054 cv
540.932 401.966 546.457 407.48 548.515 412.628 cv
539.135 435.876 525.269 456.803 508.024 474.384 cv
505.836 472.524 503.757 471.12 501.023 469.998 cv
500.549 469.803 500.257 470.479 500.554 470.794 cv
502.372 472.726 504.161 474.612 506.013 476.461 cv
504.807 477.648 503.574 478.793 502.34 479.953 cv
501.839 479.584 501.351 479.225 500.886 478.869 cv
495.566 474.805 490.671 471.166 486.931 465.514 cv
486.62 465.042 485.752 465.175 485.79 465.827 cv
486.203 471.331 490.671 475.239 494.606 478.646 cv
496.184 480.02 497.874 481.274 499.562 482.526 cv
476.927 502.919 449.36 517.916 418.87 525.456 cv
419.011 525.525 419.156 525.591 419.301 525.662 cv
436.345 525.679 456.355 523.846 466.2 516.208 cv
492.167 521.428 531.967 491.014 530.24 469.297 cv
541.488 472.772 543.222 458 543.222 458 cv
543.222 458 563.976 458 566.579 427.591 cv
569.181 424.988 595.14 425.854 589.954 396.316 cv
625.43 381.544 611.58 332.895 599.46 331.152 cv
cp
f
155.514 257.887 mo
155.514 257.887 191.446 275.266 205.35 277.584 cv
181.014 262.523 155.514 257.887 155.514 257.887 cv
cp
f
149.722 233.559 mo
149.722 233.559 207.438 265.415 219.263 265.997 cv
192.597 250.938 149.722 233.559 149.722 233.559 cv
cp
f
175.211 221.978 mo
175.211 221.978 198.396 239.353 209.995 242.827 cv
194.916 231.246 175.211 221.978 175.211 221.978 cv
cp
f
434.832 577.609 mo
432.511 569.505 424.404 539.381 424.404 539.381 cv
424.404 539.381 427.881 571.822 434.832 577.609 cv
cp
f
473.079 601.939 mo
480.028 608.886 447.571 532.437 447.571 532.437 cv
447.571 532.437 466.12 594.974 473.079 601.939 cv
cp
f
477.711 562.548 mo
480.028 554.437 463.805 526.641 463.805 526.641 cv
463.805 526.641 471.922 554.437 477.711 562.548 cv
cp
f
630.7 444.389 mo
630.7 444.389 602.887 425.856 591.288 427.014 cv
630.7 444.389 li
cp
f
296.91 542.797 mo
279.388 540.552 262.895 536.275 247.823 529.798 cv
252.409 521.093 255.186 513.894 255.186 513.894 cv
255.186 513.894 249.951 520.272 244.117 528.171 cv
240.367 526.437 236.711 524.553 233.155 522.516 cv
242.08 511.122 249.393 501.153 249.393 501.153 cv
249.393 501.153 240.578 510.552 231.238 521.367 cv
209.098 508.214 191.056 489.105 179.05 462.719 cv
178.861 462.298 178.141 462.607 178.293 463.035 cv
188.098 488.87 205.419 510.975 227.475 525.761 cv
219.517 535.174 211.986 544.834 209.995 549.807 cv
215.466 544.337 222.729 535.64 229.531 527.102 cv
233.047 529.36 236.673 531.443 240.411 533.318 cv
234.268 542.033 228.531 551.306 228.531 555.599 cv
234.699 550.853 240.27 542.997 244.719 535.368 cv
260.635 542.544 278.294 546.17 296.91 545.236 cv
298.524 545.152 298.442 542.988 296.91 542.797 cv
cp
f
2660.28 1489.41 mo
2667.97 1483.57 2666.43 1473.82 2674.13 1470.7 cv
2674.13 1470.7 2715.67 1473.43 2734.52 1443.42 cv
2745.29 1458.62 2768.37 1445.36 2772.6 1437.57 cv
2780.3 1448.87 2786.84 1446.93 2795.69 1442.25 cv
2804.53 1437.57 2809.54 1430.93 2814.92 1432.5 cv
2820.31 1434.06 2825.69 1447.31 2834.16 1440.29 cv
2842.62 1433.28 2817.61 1397.03 2797.23 1410.67 cv
2796.84 1400.54 2772.99 1390.01 2760.68 1410.67 cv
2751.45 1399.75 2741.45 1405.22 2740.3 1413.79 cv
2733.76 1402.1 2712.22 1381.82 2686.05 1392.74 cv
2659.89 1403.65 2656.05 1448.48 2656.05 1448.48 cv
2656.05 1448.48 2630.66 1449.65 2636.43 1469.14 cv
2642.2 1488.63 2652.59 1495.25 2660.28 1489.41 cv
cp
f
2622.2 1558.01 mo
2633.68 1558.01 2622.58 1547.5 2624.89 1534.63 cv
2627.2 1521.76 2633.74 1532.68 2640.66 1525.27 cv
2647.58 1517.87 2650.66 1493.31 2627.58 1495.25 cv
2604.5 1497.21 2599.89 1524.88 2612.97 1536.18 cv
2607.96 1547.5 2616.04 1558.01 2622.2 1558.01 cv
cp
f
2605.27 1570.88 mo
2597.19 1564.64 2601.3 1550.12 2597.19 1548.27 cv
2593.73 1546.71 2587.57 1549.82 2587.19 1566.2 cv
2586.8 1582.57 2613.35 1577.12 2605.27 1570.88 cv
cp
f
2886.73 1437.7 mo
2892.88 1432.5 2888.26 1413.79 2875.96 1414.83 cv
2863.64 1415.86 2856.95 1429.56 2858 1434.58 cv
2859.54 1441.85 2880.57 1442.89 2886.73 1437.7 cv
cp
f
2966.23 1534.36 mo
2972.9 1493.31 2930.84 1476.67 2909.3 1481.36 cv
2904.68 1456.41 2865.54 1471.65 2875.44 1476.67 cv
2893.91 1486.03 2889.8 1498.5 2892.89 1512.02 cv
2895.96 1525.53 2909.3 1518.78 2912.89 1525.53 cv
2916.48 1532.29 2913.91 1539.05 2919.04 1548.92 cv
2924.17 1558.79 2959.56 1575.43 2966.23 1534.36 cv
cp
f
2625.15 1616.49 mo
2624.64 1608.17 2618.48 1609.73 2613.87 1604.53 cv
2609.25 1599.33 2622.83 1584.38 2617.45 1581.67 cv
2614.39 1580.1 2601.56 1592.57 2597.45 1612.85 cv
2593.35 1633.12 2606.17 1639.88 2608.74 1648.71 cv
2611.3 1657.55 2603.6 1671.98 2603.6 1681.97 cv
2603.6 1696.52 2619.5 1719.91 2636.95 1712.64 cv
2672.62 1697.75 2632.84 1652.86 2627.2 1644.56 cv
2621.56 1636.24 2625.65 1624.79 2625.15 1616.49 cv
cp
f
2720.29 1734.98 mo
2721.57 1726.15 2710.29 1722 2699.52 1724.59 cv
2688.75 1727.19 2683.62 1724.33 2679.52 1719.91 cv
2675.41 1715.5 2665.95 1699.27 2657.97 1708.21 cv
2648.48 1718.87 2661.56 1739.4 2680.28 1737.32 cv
2695.41 1750.84 2719.01 1743.82 2720.29 1734.98 cv
cp
f
2695.67 1772.02 mo
2690.21 1767.87 2680.66 1756.81 2679.52 1765 cv
2678.36 1773.18 2685.67 1783.32 2691.83 1785.27 cv
2697.98 1787.22 2700.29 1775.52 2695.67 1772.02 cv
cp
f
2969.56 1586.08 mo
2956.86 1567.75 2930.11 1576.66 2934.94 1580.23 cv
2953.4 1593.88 2928.4 1609.86 2928.4 1609.86 cv
2928.4 1609.86 2942.64 1604.01 2947.64 1614.15 cv
2952.64 1624.29 2929.94 1630.51 2927.25 1642.6 cv
2924.55 1654.69 2935.32 1659.37 2936.86 1663.26 cv
2938.4 1667.16 2930.71 1674.96 2922.63 1682.36 cv
2914.55 1689.76 2913.78 1710.04 2918.78 1703.8 cv
2923.78 1697.56 2926.48 1699.51 2948.79 1691.71 cv
2971.1 1683.92 2973.02 1655.07 2964.94 1641.82 cv
2967.25 1639.88 2974.17 1637.14 2969.94 1630.51 cv
2979.95 1619.61 2982.25 1604.4 2969.56 1586.08 cv
cp
f
2898.4 1684.3 mo
2891.08 1680.8 2883.28 1698.76 2886.85 1710.82 cv
2890.32 1722.51 2894.54 1727.96 2901.47 1723.29 cv
2908.4 1718.61 2896.85 1699.9 2897.24 1697.95 cv
2897.62 1696.01 2905.71 1687.82 2898.4 1684.3 cv
cp
f
2801.84 1556.46 mo
2782.22 1544.37 2772.6 1554.51 2772.6 1554.51 cv
2772.6 1554.51 2752.22 1552.55 2747.22 1570.1 cv
2742.22 1587.63 2752.6 1594.65 2758.37 1593.88 cv
2764.04 1593.11 2756.07 1573.6 2769.14 1570.88 cv
2782.22 1568.15 2785.3 1580.23 2785.3 1580.23 cv
2785.3 1580.23 2788.76 1565.81 2799.92 1570.49 cv
2811.07 1575.17 2805.3 1588.02 2805.3 1588.02 cv
2805.3 1588.02 2821.46 1568.54 2801.84 1556.46 cv
cp
f
2783.38 1604.79 mo
2791.07 1600.5 2793.38 1600.5 2795.69 1601.67 cv
2797.99 1602.84 2799.92 1599.73 2797.99 1594.27 cv
2796.07 1588.81 2793.38 1593.88 2789.53 1597.38 cv
2785.68 1600.89 2780.3 1592.71 2774.53 1590.37 cv
2768.76 1588.02 2765.68 1600.11 2766.83 1604.79 cv
2768.76 1612.59 2775.68 1609.08 2783.38 1604.79 cv
cp
f
2786.07 1637.53 mo
2804.15 1635.2 2807.61 1619.22 2804.53 1614.92 cv
2801.45 1610.64 2798.77 1614.15 2795.3 1617.26 cv
2791.84 1620.39 2789.15 1617.26 2784.53 1617.65 cv
2779.92 1618.04 2780.3 1627 2773.76 1628.97 cv
2767.22 1630.91 2756.9 1614.45 2756.45 1622.72 cv
2756.07 1629.74 2767.99 1639.88 2786.07 1637.53 cv
cp
f
2882.11 1730.83 mo
2883.64 1725.63 2882.11 1716.79 2874.42 1712.12 cv
2866.73 1707.43 2868.26 1714.71 2865.18 1718.87 cv
2862.11 1723.03 2856.98 1717.31 2851.85 1720.43 cv
2846.73 1723.55 2851.34 1739.14 2841.59 1745.38 cv
2831.85 1751.62 2834.41 1736.02 2828.26 1737.06 cv
2822.1 1738.1 2828.26 1759.94 2806.72 1769.28 cv
2785.17 1778.65 2774.4 1749.54 2767.74 1750.06 cv
2761.07 1750.58 2764.65 1764.6 2743.63 1770.33 cv
2722.6 1776.04 2717.98 1759.68 2716.96 1767.73 cv
2714.39 1788 2742.09 1793.2 2752.85 1782.28 cv
2756.44 1795.27 2771.84 1802.55 2783.63 1790.6 cv
2807.74 1819.18 2853.9 1797.87 2854.41 1770.85 cv
2887.75 1781.76 2892.37 1737.59 2882.11 1730.83 cv
cp
f
2886.17 1559.14 mo
2895.07 1517.85 2836.75 1514.78 2832.34 1525.01 cv
2827.92 1535.23 2869.21 1537.45 2854.88 1545.78 cv
2846.13 1550.88 2841.11 1559.21 2843.93 1567.14 cv
2824.92 1584.14 li
2824.92 1584.14 2841.44 1581.9 2851.59 1585.21 cv
2846.7 1589.32 2844.87 1595.1 2847.21 1600.59 cv
2840.07 1603.77 2832.23 1605.96 2832.23 1605.96 cv
2832.23 1605.96 2846.62 1611.22 2855.42 1615.92 cv
2851.81 1619.49 2851.22 1623.56 2851.86 1627.25 cv
2845.71 1629.69 2839.15 1631.68 2839.15 1631.68 cv
2839.15 1631.68 2845.69 1635 2850.61 1638.46 cv
2848.49 1639.36 2845.99 1641.18 2843.26 1644.6 cv
2832.38 1642.63 2818.38 1638.7 2818.38 1638.7 cv
2818.38 1638.7 2831.75 1648.7 2837.42 1655.86 cv
2834.41 1668.29 2842.27 1680.24 2852.25 1683.01 cv
2861.16 1685.49 2876.88 1674.97 2870.22 1660.87 cv
2879.8 1658.09 2896.82 1651.64 2884.61 1631.68 cv
2915.45 1616.94 2908.2 1565.35 2886.17 1559.14 cv
cp
f
2767.6 1671.84 mo
2767.6 1671.84 2767.6 1672.68 2767.7 1673.97 cv
2767.68 1672.69 2767.6 1671.84 2767.6 1671.84 cv
cp
f
2785.17 1486.03 mo
2780.04 1460.57 2739.53 1467.32 2737.47 1487.59 cv
2680.02 1463.17 2660.54 1523.45 2667.2 1535.92 cv
2658.48 1537.49 2648.74 1556.71 2662.07 1572.82 cv
2626.68 1595.17 2659.51 1649.21 2677.46 1649.21 cv
2675.41 1680.93 2706.13 1687.94 2710.8 1686.65 cv
2722.08 1683.52 2697.56 1671.89 2703.62 1659.62 cv
2704.07 1658.7 2704.45 1657.79 2704.79 1656.9 cv
2721.06 1634.41 li
2721.06 1634.41 2700.56 1637.67 2692.78 1630.73 cv
2694.24 1627.11 2694.92 1622.4 2694.98 1617.25 cv
2702.38 1611.89 2715.29 1609.08 2715.29 1609.08 cv
2715.29 1609.08 2701.2 1606.4 2693.26 1600.19 cv
2692.29 1595.46 2690.96 1590.98 2689.36 1587.17 cv
2694.96 1579.59 2716.06 1581.01 2716.06 1581.01 cv
2716.06 1581.01 2698.75 1578.29 2702.21 1563.48 cv
2705.67 1548.67 2735.68 1558.79 2735.68 1558.79 cv
2735.68 1558.79 2718.15 1543.62 2722.64 1531.45 cv
2729.15 1530.24 2734.91 1527.8 2739.02 1524.29 cv
2749.79 1528.83 2759.53 1545.15 2759.53 1545.15 cv
2759.53 1545.15 2754.52 1519.82 2762.6 1516.69 cv
2770.68 1513.57 2775.68 1530.73 2775.68 1530.73 cv
2775.68 1530.73 2772.6 1512.01 2784.53 1513.57 cv
2796.45 1515.13 2792.99 1535.79 2792.99 1535.79 cv
2806 1512.48 li
2809.5 1512.41 2812.53 1511.57 2814.4 1509.42 cv
2830.9 1490.47 2798.51 1468.88 2785.17 1486.03 cv
cp
f
2729.91 1699.9 mo
2735.29 1716.28 2757.99 1713.15 2757.99 1713.15 cv
2757.99 1713.15 2759.14 1733.03 2778.76 1731.48 cv
2798.38 1729.91 2799.53 1713.15 2799.53 1713.15 cv
2799.53 1713.15 2804.15 1719.78 2817.23 1715.88 cv
2830.31 1711.99 2833.38 1690.54 2824.15 1681.97 cv
2821.04 1679.08 2817.01 1678.61 2812.87 1679.58 cv
2807.35 1669.76 2800.69 1653.52 2800.69 1653.52 cv
2800.69 1653.52 2801.84 1676.13 2796.07 1677.29 cv
2790.3 1678.46 2787.99 1655.47 2787.99 1655.47 cv
2787.99 1655.47 2787.22 1686.26 2780.3 1688.99 cv
2773.37 1691.71 2767.99 1680.8 2767.99 1680.8 cv
2767.99 1680.8 2770.68 1689.38 2763.38 1689.38 cv
2756.07 1689.38 2753.76 1679.24 2750.68 1651.18 cv
2750.92 1670.22 2746.41 1679.89 2743.15 1684.39 cv
2732.89 1683.99 2727.09 1691.36 2729.91 1699.9 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.1.0
%%For: (Admin) ()
%%Title: (1909.m10.i005.n010.eps)
%%CreationDate: 10/20/2019 10:48 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B7&W-pGi)`^99'E!F3GXXBok@gXt/u#59T4J;c`1`$W)Lrh'-LB-]`!,NlNBi/l3h+IssZQPke6f4.:J;:6AJR.481';T?1
%+eQE&Q>+>`Er7$Z>@0VGY13.N,TRN=^Ka;Ti:pO;n/&N)(r]6UD4'"B;,l<;\=jkDG1[K.WAH_M8d4W2SpOJhNB]Q\>q+?t9f1,0
%VDMRQ)6LJZH@uhu0!_[VnT>dS5mR1U>SgbrFh!Z79bXB-I3\O`ePXON,[;XFI#h?D7;JAE`RKjdZQDK.Bu0'qV`#:U#':XSd.#'\
%2a%JTXE8R5)Um/jK!2'/K3\UB(JVQj-ERCfLaIU"qiCE.Q?j@YItBNVhZk,!L>NjZlf"pbZIoA@_,p[=jl(Hoc.EKhOTFs/O%^08
%QriTJ>qo?r4BA+AZ7!^I4E>>t<u2jd5X7au`(HVo^p5,GnH^*L!`hs18/?$_5+C(EReg[LF0$i;[:OD8g+ma'0AmaA;eu^d/$j8P
%[r5SqFL?8IcqGRReX^N]j3/pN3[!2G,c*#E_%'_lV[\bi=r#Qj))_$rE[0q5W:%@j:-GBM<)N@&H]X/_g;k3lA@d:Mb`(RJfP+NN
%67aLA*\,+FIi_dh7?:.6?2f\DLM!'(m>c`<@X$XZ6tBF9AFlOl<O>4tOuZ<7[V7)&*jr@Q?YY.pP4_+;$;$8mEqcb#F.e/"Wf8V\
%2"MVMF3$Q\3m6L/a[R^se<)>"r##UYDh(aL7`E*rs$?'=(S.F_$b>bQDEn<+JK=d\^N8_4oU=;lE:^#>FIMG`g%aTW^1bV:W1Fs9
%BGrI1FNJT$G_[AiO,rM%-f7gZcj0L:_1WN)l(?BIi7V!kem2r^IWka6diK2>Ce2;ClY<`q6e.0nULO\W9oiF_BdbPD\^B^sU]#^)
%$IGd0,m(+/SZ=q?=IMJjdL1UDlMhLta"95;A[KHJ(Z_%51B0172.W)WGDLZ(=s<PlF]sj:RVEV=_gU6?s%]b7ZX^#G<;-.oqe7NK
%&-GYYi<L2'>m$jb/%2g:.s/+T=Tu:/2G3?X0s.'r7NqB)CMnIBrN$eD?#/&=rAh&l!F`+/X1=j>;fsB^E<U<][$50&.sb[,::of5
%)i!58IE_ZHbanLL/Ss[7/>h-9>Vn#.N/hWT$kEUZfP34_U\.fM)[UC7dO;XMU!1#$#&j1SYqOGT-q'hKZ^+)<C*fNVc;a)Rm]S;.
%1Qdo48HV=8_,u-nPP\8Z_j&OU;m[Qj<Rr'rD*5@hAu^952!ReoJ3CHCdSu(KG9M&+0)8T<Y"nF'$r6Jr1hGLeh&M!^1GO..l$`;Z
%iRcmgjr@hSni`Z]0uQpm5H!;jp%\NdlOC?A"Ng_@JJhi)[fJ2:C+7%S`N#f%>&&[T0V4gl347U;r%NUEg2PMR&0LA^#Q10a*/r7C
%%(>r)kT.9,R34kK]a;I`V/F,dS-GXqB7shQr>O4U<TTL;Nh09lJJA72$5mT,3YIY/keuG`q*s>@$P\'8%L&;AK1&_i.TOq$-=+F_
%7d!Q(oe*JRiO7ReGi!7G_oS5aGaRafBG3ALYhb\`!U*Z@R[K19UJnoUR`Z.B83)66AkkZ,596kXdT09uoqS9?MJeBr&H&Vk1HV_U
%FQ?V?];)tm1gRn"U=4ZmXf+ubb%`dKV-`?bQW_e0c$F\0UunT6jd>T$[%@Y/E^ls,<0++Ke4#JKE"aKSAg_1(-g3h4BW@kqi<#9.
%k^8j#XYIr3%l/m-\\=.FXA,uU([CQ%c%>"'djMA`:s5HdAL]W?W>rB@jd)n$16qaKkU]XmA'n48(D^rj;`PX?\n*3I&"-\5V1>r:
%kD%Pok&U'(oTm&C17)5-EXSG]6'`0_J#I[rWg&H,^W!KYOSK+6N]SNK4l>54=2*]%Sc;0nA%@%d+Sc5%haN.G2G4ALLIS`C]#rct
%i3U;$TQ_`.WrHQQ0Ztm&8EmM9RaR!d`brNNAp8(e%U)eOj.T($FAZppE"a^cAf*$8j`4Q_5LG2hf(BE&gJZ4--XAb;?+;>g803cd
%ZT:,F)K;$-FZ3kK)fA]t\_,0Sm^1,/;9]gjG6eY.cO)>\k'tdHUc436"JdI_X9,Ib]$a4MeMJ1Z_[TeE9kK-QHi2kmUMVJf_QVj-
%5na`!LuH,52#?<c.)0A]fCQ/LR.okKm>`(PlP$U`0sZPb0Ji-S&DR6?1ig%)Ao*77O?nqCa#!I0chDLShem`"MaaT5\]QXF(>ueV
%$G)&:C9.d_&87YTE2+F2Ap-/D#WHL^W]:/@E3mcb:%IB>2f^B?9/EVkeT@SP$ftXKaP.uR)NZn(!FhGrTQ=AV,krmThQJoi=YfVC
%D,jQ2j?c<tmOe;0jMsJGMrcR`jV&S?gWL9i$pE0>eR'qp.-?"('>M9VPsSQ!AsW=]r`+((jZ]R1\W=i9%Z?NQIKKsadd[1QDjD6h
%+W!X1[$6a)E>(?S!G<GG)QdTdcSot)MWQT%q$tF14$Bn1k,F98nQHj7V=AT*/G!blK&9umCr+(OdGgPOhu#%S//<PpGJUk!_n9dZ
%[skpG`?*Y8I(J3hRpXO?q[79cR"_fn/s)Lu89oJG_:&/WK1J\i?*o^imK/fef68#j[,!nu1>Ct[>aaJ&m1#K.b+FS<VKc*T1fQW9
%lK"ccDH<8sR`l,R.i7N%?cR)lac*o-6>JN&V5WBHB[2k)@_*O<#&`:':B-;MSrp5K^t7hlP-8coL+_E.CnZb"cJnWPmr3#Q?%MEK
%lr@2aLt[/Xfk6,c\UAND=S$FfgcTA_OQV&%W9#Rj$$1[Amk3PDS$ojMJSDVKIE(XKaA6jUcD;+3-b3>UZU1F`P1Xk;/kW+=i@FV,
%+OgXe=et543<chMb+dX0F)9@L/Yh`G2_+ou'css;:_accr/6G=`4)>L5c>2S/#6F[;l9tF#<sS,9\6%*pfSbCG.I4S9O:T\AlH*$
%4(K7!_i:oO(-D37-Q>JYf]3%('j?LoVt/;jd=^Z'<*Cp7,R\XiR>')9lE7Y$rD1\r3ulK<%<@r2oF5u<'Yi*l'K=)aGG<:d)s1G<
%^\(>92eRLii)Z(\r6E+;GM7u7#+<$*R4n<//D\W:Lr=MkMrFr/\^u$AdJeaa7<)mfQ[;SqHVsbWDt>"CU:;stoBpXrCd@ffHVo[X
%BeP>_AEMap0))*aTm^/572[&bc,F"Ricj+7iWbf>.H19O<LQA3;r`b%?a(HTjQ0hmT''jDf9-f*GCIWm0]F1F`@PZkXj/SYVI("t
%1m6JJ>d@R%s7P1X=T=]MbdaX9J+$<JQ?MXGG"l)m[A@/5!5%A[:7$-@C"Le:aVJ,aL25\mXJs:nDe@OcdG!$KIDMp8K=.OU>6(_4
%N7F4pc';:MXpD`?k/I0c1i=p:n:+`,?)RqBV&FbfNPqY3\KJ^dNL"<9+>a%W2c]C4LNg"/d@0BdWu[*.fNDVd-8;M!V<V2hq>!((
%B--51Q>&:5CFi7FR1WJ'USO3``oK(8%d[,0Wf!3``@;,ZXAJdhLUq`o?&%ps4FC$Jpq$pkiSRqNiV>q^^=u@Ep169O$[([V2#juY
%-bct;\hVUh/PgasT(qjeAftG@nR^QDU[Rm0`IB&YS^%.=="bJ!QqdMHd.o>4j.Bt-be*E^NI'&e6Q0slEUah>Ki+.mFC3PJYV31^
%IcX/m=W2m:<ra&b$@GQrk2%#d.!sJkm5AtDJ3`^bK,`pNc0uDO(Y.'iUh.7@*4Yh6/Do\S4JemBe[fM,0uFC\@b_7F,Xr7L*Be0s
%krLWtcT0*9>_r0L+^%"n[sZVB\c03Gs8=EJ"7*_:q(0KR1qUs(hoQ-Uf70.Q^TK.7XoL9-Y"Ph+0PeD[njOYD2;dMamrHZs\`Pur
%PNA8%Em8f'd93XJcHjpj,r%EHB3#O.caf.^]1I'`)I'i&.RP]LQ90`WZbl%+Wp@Zsdui+e9%=&p?kL^RFb/CgK39A]6E<^^\_Lo"
%EMEPC9Z)kO*bd>Zm-KRV,H'T@UMjK_>J;&"=Wq!MaF8bcgT@h^[BU+%Lq3tAdjiB*&'`I$F18!3G)_g9R(,\p/=k$Wl-*0*Z)jQ8
%bPKntIeFkbT*[.$5#`PO\Z@_M?tYe881njZIVJJ83U)Ni".I\mS8jrDTokQgKD'\iHW(PXU62]$b<h*b2^toVhmL#sn`;\^XgFR4
%&U\TaHTg0C8f2EhPCGG5`c5!6)Jq5c"C:efmVKX7',teo/A*MA0?_5UJ$SQQQW^E,Md;#[op97KAQa7\(1*;\QY#,e=a1h)OZ=i&
%kb"(droX(;Z@MQV$V39>iE>@Od[,"L\M#4Vc\fY"4`4a)*:7!6K(&Ea!]LX[chhDiDK&^L2Xt^=KP"94-C-q6dA_NJK-oBDcnb%p
%9t9'`\TEjQAcUuM0.p%/>5H4qXVT(nQkmIlIYST(^0%Q5cT0$7>]9Xo&Qt^>ZoibN<atp_3.36EIa(lXP4@`+,rOTIWI,M[:+`*\
%+,E-oks?0bEV==V2qc1I/k[g'\4V;6)2CfOC]K7*Aqu"90"4go[@sF_>aj_Be+jB'j*rcgpcI:0T#nd\ETS?J(0hiV/2OYEL,ON!
%g2B/EFsbiEBmtIk)K(.j)9+#kODkjZc7heb=ipm\<Rop>],onSd,EcQo;>W0[JA4)>LkOk+<qPcFc6LHBpNn#q9U&E)q6Uti39:m
%b[0J!Fc9lPA)92OXCEgI(s=t[SCK>f`RQlIn%R(Pr68GQB(XGicIC(tUhk?"4%$NjVRq/SIfOe,eH?\Xk8Kof7F>(`\AHAp4=d5+
%OGflO$;+Ms[FC7tg*jPS%u0"TKj2qnEHGWtUq/j(mOQ!4Q3%,kT,X5g#90af;\A;;^PHKo$FtCYL2".@K/#I%/l,-/LsY_"Ufi&J
%Em(Dn$&Ao?X>'I9k6AJR)j\MK%Em`$fV%,_f(.IdJ$/:)n$EEB*E7D@Mh8)5lZl:=QcF`giQn5]jL$P':)B/p9VJh3AmZoKR_;7g
%!&lu\k'Y@=)\hF__\`!Z2LN&%kJ+:\lW`!#?0hVq^f!;fI;A@"Gcu$bNAmcs4TB@<H^W(U+/E_@c2HB&/[N!!2Rgom-=h0MSGk:5
%Rh$4!g"cM!ZcqQj7F1+$S5$5<fpiGOQH@oE,]g<LQ*a6JQKd0[SX[$q/CV.@3qkS^\Qcs"<Eb8!9qV;f/kCJECsF%6o:F:uh^b=?
%L!G/mTDNME>&f\k/.Z9YIB)>u+G8SLXPH)UYV"1d=;^.lqf='Lk@;fJkqYFa:gsHbfC(^B@l=KH*RYtoA^KCfXqYZ`*p]!:</R.?
%1[M.:ff"?FDCT?YgoTS^jZBX^7ZUg6ZRBRQ6GZks/TT$jH2%<qg?Z,f0q7^jY;=?ooW2Tl],%4*c+^`;+]tnG\-`?CT]\FiSp-ss
%@ae2ddjck:eLbtL_.SJRT2et=\a/tdg4Q"X@4-69%;(<d$`1.9*#^aSD,Zkt]#oSoFh#DlY]KcgdtNW#gqUi$S"FUF\2ZWCe_uk<
%nur4><kK_:iB&%&6aJE#JauI7G?h8ooH7cd4s`$pc8+gRa0u#iM%CnnZ$j\[7WZb_B,UHf0^ebb94&J^3cK/9?l/Fq?VR;h\r,Z?
%S'5l^g7@RHimlF'bFiOOJtcgM[#Bj=9I+9:n3R@K?[NUaSB"+Ve&QpLReLjsoc..en$\k77:9#_F:=9F#6^K.*8G3tNL=])-LJ2X
%^k%td88)TMD.7%jLe^BQBkFcU\pAG669,hu$!V6Zb^d@RZbsV-c$egrkKEqM]jGlV+7nn:h;GO0Mt<_[9><H%^Z\/Dk1q\>Z!-[i
%o8SZ16!h9An@o_1/.OoDd9/#r7!u1>E.@0eM8&)`hS/UWZ;XQ1=i>!"GqdX9>4SjfgY<`gg-aPC`dR/YR>r`llGaZa!G@,V&[ZG*
%ZFt#cD+.`]mTc9cZUe,K4Ebl@).N2S-GEQspK`jTpue8SS>?]Ir#$CP>]!t/#?/0h_<:g%N8Sn>/`YhtH>\"og:tFY9RJ!SRsV!P
%&iC#"rd,ZUqsCiCr>h*k+'^3s!$.MTP<ca*FnJ)@dnWBCGWKlm>jB02eDJNUhNcVl8o+Am`LKA%'P9H[Q7kq.TW:"h96LEaZf3m2
%`:ka$V)jUqeO#^eOQ`B#9/0Wj0frQ40r()TCltME2Ufno,fRSiT(=P1d4W%VPJS<^r7@[3Ka?,.V3$0Z9O$(4IKr2HIYquFqY3#%
%6FONqFa]\:r*>Mlgg^**CpEnnB(3d++K\/_2"d;RP^4uM,1h(PoQkC3ZHrt>`$T/)O/WkriOnd&s3@+pSn-[#l5fZ4+KmGM#t7KV
%61r0"ST`P)VDONpg@ALU8he;"2a,aJ\>&:m`NlO&B\kH8*Vet8X(-&9pcTdI6@d#4FT)<j-HluTQo%/pffDMWjF<%2IiX#fs86Ho
%?F4;+n3lb(ki6Bppp388Ti1_.5op^oCX4+ak9)*>B6.7iWN/0)b&`+Uh/,p^k>&iD=7?e7BgInA%i#^:QBNTh_FlXQZg^Bt(e3ZH
%$dHd-6iNor;<WM?MdeX$SPs_sn^e(pH\ZBd!dQn@T#YKd;u-T6?D37la<d2rfd2Yfm$)-#$04?o3mFsfY*u5&+dXc'2DWL7VK)$e
%+:1#?JX1Qs^W7V>8YS@Lhr>IDco,+(EX^Gb2"#f970dc/n\8m[*;+\\q[CetNlYiA5Aeb`X?ZC7"M_t>%#dEdgJRfL+Fd=k^iGO+
%\Y&PHTjq1(T@9MC?(Eg(4m@Vsm*m3W815gHAc6bLHN?PGIh)6D\DV=t@r>(c70)+a7fQLJ^M/p(5%FQa;kLi(lJ$!Z?[jK+p?kn8
%&&<F"C,)A?S+bddKdTk&Z=#UjdZ%^1SU)%bR7S3:HS,j\BFT?ei:Llc!"1QG;pBB8N=/.Fi4i2=rpN8N1osl1F[lcJ$W!o^_[WMV
%/dPfC$K3)pblYc-LVP.+`D5/El>pA4r_X7:[hT>)d"d2o\sLor6Z7"oG>nIpoD)^mgb/Ue#P,P.QFs>8`U@<VK/>1/+i1L+V(2=S
%Cj3qj3AK6D'c.MYWG##^n4P+uF&()VAQB:88'9YGBurIWYGRjRH7Vdq+_E3MY$P(#VU9lnmHfr;_\4hbcgWD$-3P2([;90V[*&$`
%.@JCnUUc4/LnV25`T0bS^WgA>QWu7lI`-1SUK(Bm+'&C"APH5jKcZHe-hpq[!&`p4!.q)rWi.74<`n6nV\?5[*,Y>=l3Ys>X._CE
%[A>BBQc0(Tpq0/:'F_*D$((G[JJSGN'/rTAQ'Ro[r[i[CBJ:6)qGpPU5;uUOm#e8rp0PL"Cn9L*Ja7E<2N4uGiAfItDZ'6Np[mpO
%hLh,C/uE/99s(Ss,-*PA2)327k@,KTePo.u3U(OTY=qFb5>Pn!A1n;#dRjbO71@J55Vu3aT&0;VYeANXA<]Q[UJt2genB5qFpila
%=h`KYp*_N!?mr.?LV2*T6[L:7[>,gLE/ZUkQl,nl)'OZL.S[>4Bl!C%hL>UG`TV_'3>JpJV]t/OF1NQ_T2pPHr)2>pe0!S!%Zn+l
%G>G>L'Pg1YKW^:U;('.oD$."D@AYMWT5Zju#A3Tr\D\-^%%V77D70%(p#OZ<9M_siR7]co27)V5Bn;Q%?C+rCM(=Q-8itWP'@k?O
%A%J\+0TiteaD>3[a%9Q/8&*FOmZYb[*llu+Y?s]\9Pmio=%XDu,MQCIY#M&ra!!)<%5'\R'*ph!ab]]Y0h9X!Y.Nu!%8a?'8=&Q'
%!i;b0)Q%DaBpcf^Xt/mC[rJTRePo/;^:m(cSnQ/$H?1-If]i*p@=jH&L(VGOBVV;_B1^rn3]Ss?o*WYgcJ-%tb`QcW'`CX@G4]sM
%@[og*D!iHj009M5N[LV$;"ZPp:3juF<eEa&>!qtic'D5m#6c??b@$Qr;tXY>"SkW!!g$0aamJU171V:d'GVX"C&lroOiLWb%c+Ot
%$lu'0cAgklBKF\kordB4W%B8"g`<.hJce`D@;6jVMUHZ>%hmH3.+8;iju!D'A0#>mP^6StH>LgBKUOC;mY?)k(@2bn0_q'g\,1dd
%O-+b3!66J]7AOFdZZ5MMDsmb_g;-i\[E'-VBH&e>IB*8d6RX>]c)r'BI]0@qmZ(tAP/5hE72.$B"""@%&;4"+k:(gOjJ&e7_%u&$
%csL1j.tGKIad[UmJP%P;la^o6Soc!dB<G/])`hlq)OV':VAht;"/5bN=gj[r@QS5HAO?rNk;8.HAj\I1iBBcNoNX>^^W''g$$E*Z
%7sQp"FK78k`h.+G]c$t"#2R=-=)k#2dh>Z;2=uT^dR7@$*m_)k:AKH/8SPci+,T@5pZ*K>nutKde[/@oO2H#ngm?%?7firTXdEuV
%l:]CcDIi@8<nuTM9Ge'YgpEgThI'g%g"5F9%1D#?9HGo1#bU<;FfgHC<kh4"X[4]>e9k@:LJbs@nDl#^;,gU<*AO%qL<Kd0:2S(5
%7<V;8n\R/_c%+4N/*PIhdXN&hDM7$`-TDN+?u,l.VmYR/i,S`IdfVm'*m`s'5TUd\E0=M=VlSj;hI%;WqEq$hA($!?)/PFN.Re<u
%&9F3]]"7bS`s)[.7`/3tZ/RLH9sWV4J&YJo+0RmrD92G!Jatqp#rlp;B1`g>ZGDWNC6SS2'%B>=I,YnXbDr.ZJ\,DX-b:?b'Ldc=
%7gJ:j/PgaJSXK`hFAg=;Yt;,b5BM^i8)<3E<%pFheM=2t((#145n5'qK6&AMT;[S]eTp_?Vlq2[%NZiG!/T?sB5]&O/W3*!UmB$I
%h6V0?R"P.J?DaBc%?fD7SO)Yu=92lI+@)GTHnQ8ll.7M2R[&1N<5A"V.$m;ui>?hYE6BDc_F3n)d]0\e>_hOVRjZp'%03j<U7YoB
%j$="jU,PI\-VV'ZL>&1bq[4'Yi\>=Qm'<G=q^K[`ED(Va<Am=[oZ5B2`t%ZSYYC2cX\h!R_%g1oYgeWKT]-`O<nfd$*F*YO9(VX7
%ZpU4Y5Z6,2*:[K$e4lJBZeA&4R.6iZDPf9Tj.N0^@f9rK>2bAY=E<o,/rm*/XR(6'V/mFoRLqM6aFkFMdnbE_p+k'iJ]kPJk0+._
%.^]7fZ9e$Pff=`OPFe"._\g[o7tAaQL*PdtAXEX3B92H+7$U$;%8;#Y-I;F2VO"Sah,/*:Sj9$bR\@_da_R]%J2!Fgc8:@NPWl;i
%6&H9Qdc(DgK;9M"GG%[1?"8O+@&jV[Vs:1[$l4aROuR0Eco4Y(pO"_tRMJ[=;\SuskRJ@3qW5:3YZ>PL,"V;=5V"(P'*&&o*tYV9
%W]B+X\IWA=_5;a7Dk/3U`D;J#44I(W$5ReKJU06^i&f/odN"&/1a?]$jDf)B#N3XKZ@VF*D&%X';T%d??Xi)X+H7D@fa<kab0VPG
%LuLURGF7s+3#<16C=pQO=p6aN&$a?SDOl-a,`WAV'-RVSZ:uCqfc`M`1CK[$To.CX!&C/hm@9b$TpE(jpk?R\:SJ#%eXBn)Ybf7U
%%6SAaenGu4Y*'(8;=YV9g,AV#ZWTW(TK@lF-V=YJZ3H%!;gYpb;'0g^QS#KnjYL8'A0@pIe"R?smp3aBV%>drPBn3l`b"0B6EPEm
%B3]h7+9[OQ^!H(E'1!b+[UgnbF3#QN'K:gGQIN?DBt0&p"s*,"YVp*mT?bf@p^"JPJ]_(1[Rq]Adg,g6(ek#ZXCLQg1K==S2n_(3
%Sfs:"b*\Xnl-t#QE<]Y>Gd!)?,_rm`I^fQ_:.;Zml1Oa!:q*?B?5m=o;%$<s?2uL.400@&?W4b!Q3Nc;1jMD_oN!"?3i'tuJ@g9B
%BmcAe=S-Co`Lib>&IYPik[e4&LuB_m:,"W:;Dd;3`eckr#MV"^VB>jr&9Ud6k:V[:HOIn[0i,.alu=SO9hk1C2(eZDeS5p0SOC5q
%1>2#:=2D`B<i.<B$hER`>;]U_eXK.:CtH$@84oX8FTRqs3X;:3GB^pkZ(sQ<$>E%OSV6F_T^:CQ`UG&ihlZH]Pd]6scLeQ5P'FIJ
%C_"i\2!m;<.4%q5O4#H0$h)!\THb]F[`[M@-?N$eOW=TMX[L1VaI95hZ,X.k1"P88$Z&5r;fR-fn7l>7E,Z+"JYT`")]d.hS59@M
%:O8f@HGl*I0ca$2'>).Ufd&;*k(UL;S0(j-*h<!BR%\pHf[J^s2`It@0D;HGf$L%Sk!fV=^/''Rb7TSToHS]$7Xn^sUG^+2Y^N1*
%AZ9-Bf1JJQnT7so'4@e3j9UQaYLf91aOud0X7uVOJ5,B8*6YrCA\GJnbE^CS1[OP?fA!m5]GoYr<?ur(0kDqZp@M"h\F3Bq)b6=Y
%Y@#&W?N46HleU9"nToU2/'tE:B9F(GqZ"Ac?7++39[iKBXbB"2;=V2k_jC$hpfNZ=@M/:SRaFS>!Vja\o7nF%Ci5E.agYaU"Foj&
%T.sC#4iEs/(3'8H(ri1:nhVb$Z;(,R>J\VZU/L]u%,_![pbNGu*,UG)g[J\\TiS=VenaG"I+pj*k/k-acL9[e10$LM\dGn)99:KE
%;fT5<JNp@.B/'.)nDV8<$@KpBN2[RrjJR]k%!**WH647E00eq*&fu^<2-J"!/#g3M-Q6GMLKeS2-^]nU5MGG&A8I/)HMa:tKsgD[
%U:bcaSiH,A08+(nSh+tZ3"UnKHE0^`c(6YH[DsuoG!fX8qR+^UCIJBb7&pUhi;EbAoEJeeebVS)b7eQLrt%XE$a7`3$b'j]ej[X8
%[2)SOFTlJ"GU4023F"cL<&[T[i-J,`!j@9>72N.H-[jO;YXjEoG*tFVfVe<PI2';C\;FUX%Q@k=SQ1]oa;:k(]EAiP[Jf0@EOU')
%HP51E[;]hAno:kP*"pfjp&a=bHZkLDZr-^Ver<9L[?jKm#f:<G-Ec_XLBGZ)$m#.'/;f!h-?UrFCRsIg?TYZZ;fCU0Cl('8)COKW
%DEH:&CR#MRT-;dX%RLK0I4-Eab,JJgI/[I,3@tIqZ2R:$&'a9R2r-[38/A/k:A"1-[1)t\&&a(jj^TK?8oI%?0g28;0qDZ)LuM1A
%bXPgU1``O:c_r6BQR=J1`e`b<hJ+1!ABID>\ePWAigYY#'F_)hb/#G`&N`'9(hTkod9f;/IsG,oFO7Y2;lk=I9#pC,DrR&biGHQI
%hSU!?B=_P.beNh`iq8r$I<`6<neMg\Mn8suCTm1EJ$#SqL.(tQDM*6Xde6`f]G3gXpMP4W2P.hCea:;cGDunC]^$bTn](P3O'8b*
%VN/='6iGEu:Z`)Sf'.(n)n9.0H+.]uDS3f`jL[?M#l;4r'lDi$e[(TK\h0pgG1BjhZCPdIbAZa<G_PP8(U$BE[_,N!N:k=BmarJm
%p:bcqMra@In,C>/kWLmb\aUZslrUi^"s*3Q_HR=br,MD[S(q\ZGuNCWM"c/-q;b7W1fqAg_+rLL;:]*fkD')Q2nL6/]pFGOk09aK
%3:A_IGO<*.]WZSKN:!G8iH;nm_`Za\Mr'dnrQ4r&kI8-YS#`'gFOsdhQ:hH#Dq.ZXDf(+fp=@.U+(!tOFQEBKhL9^oD<?)^RoVR#
%X3K;Mb!p2iA&VN_]3Yf^&#kh%Hi7f83`C3'=Sf*/_lW@riKG#@I+,R1)f@d?*,I*O/!8E]a%F!jQ!6hnS8p.EkHqsdGriZA\L="g
%.p)RYA*)FWafjJud*Yck?Wh[!H!aV[FVq^&Rq>^.CZqG*g3d4@Au.<o@r>T\X"1a3g?Jld=C(T8L"k-c:,lRVfm@Fuhd?Pe;I+"?
%m_/"R=!Lf8&$(QYPDduO*0j^Pgt)1#ZVQqCCArWG\9bpThctSqRk(O3<b\\9Q!Ab1SN2+R@9+=Kn`jk9,?e5S\Mu.DD/RBECOqhI
%l5I'WqS'srYNoupe*G'._.hB1(/N;HCWC6J\98Xtjk$ZDg\YcqU%$I`e':[29aS!eY*I=.X)#,PG%[pk*ei1Y]:F?eApr_-4L6*m
%Cd+uMk=T5i0Va3l^%759ob^]SXWLOrX6XDrqu68Y(lGEPYF'P"07*"q^%AH6lgM#qg%Asf=PrV6'Q.Ee<k@&lD:G$oS@Gl:&^Jgc
%)\F[eK4-ZuKU^GMZb'CN,JULs^[Z8g<7k"qNSCD1r8U6kE?!Wq"T>g!)suD<Al.<ogZ37D6^t]S]2+p$;hNgu?fXhKfr'J?c!/HE
%gjJ?ccSit`I:0CQ8\]/3[E'Lp_p*g^Y:ik@msK^<KRNadP3GW:G40fk?mC*q7W--<oV<1LV3>N2VoL4%B?!\Jr0oFKkhh4%Z@4Nl
%3Ue-)ZpXhfO$q`p%Fn)M]9E#ls3:&)qR(r<%cdT9-%9VmnIaC\D*4t=$."HhXi"YO[WTfsWEY].L9br?W%VA:&j1$][-,I]ds-9L
%q#-K@!$`AbJ_f@O66PefPlp4(#sE6SG1R'L/+*#FqjA-*Qn)5^%(#>J?&`\WWV$#[?I3rP::=*Tp-l7"\paUKA[dS9Ci[-oW8.YZ
%)YmPj\:+tpMW%r"(d7o/%A)ir,C%*jZ,*oIgTt9>FB&cn.M#K,&:6MI#oa%2'WF!1R*b)Wml#9Ofinh5Vq8s4rM6.UXIQMA42Itu
%_N%T!j`f^Tj-Q<pYfZ;q>bA[qJ2m*]+5)t^jmtq8./%tp7NM%lME3JuX40iiED%$!=e9BD_";s,Q[rRYqV8hQn)sUK3iu4koX,ht
%FFfGkFQ5?-_lS?$;23c]$nqoU;J/bb0DE]H<p5>gWB$+:aK09br^<p*$Cq-UNUq)?CfZLcYg;lDKRM0G,];`;Jq@F@*A\bpp@lK7
%mc6R9_VK(2R@JT<f&k]Q>+6&P[S1#A'j(1*G^Q'shRW.I`F+DZ5IS$h@;@B:-qO!bZ&jk1jFmG2mSt\!5$drFml/1e-Vb4aIjp'm
%mc`d)::rSpC1=/RCl.Nl3h*I6>A<R$\1*ugA"<11Y^8!:Vic1Koch8oN-^qX@iI@$q(c+/PMakId!TPG41qEG?\ZIt'ebrX_kZ_7
%>&B#%r-e^%fj-\iNEn/cPhJhW2VYk>`,fP"FF1=(CF[j$*p$VfpEK-OD(f*FVY:ehahRRIIX'TX*o=s3&%5+0rH"f=gjd"?45FhH
%nEe!bd:qoS5>cYh3'Z4k+1se-Ta2Vp[H>J;0Gpu6*h9^2%kjB>m%KTr:)p^2MB(<[3803W7<UJMo<!?aV0]6]otEQ?U9*pa7?aSF
%9(]Q4>E6F9.b326?L9m&?Zt_>djEV&]u5q3A'J%/!5l`Bk?Dabb%)"A3R^*IQO?;BM7'rj.3W#f[hC,*ThsbE[Mhjshp-8aSW*_'
%)3_N,am1<m1oY?Bmo,^bn*SWm:/t&[X0q7miPKCQH,KX[,<dNh*2WVs36]eAHL^@c,N*J\;t=Z#30A(.Npj!iKB)fo?:f(u:CklN
%^]-HFrE,#VhrUWaM8-ruT,af1JWj?QqKu2S;%HEM(Q[t4rJ-`/;b/fX0V4`$nO]k[bl0,FB9?bGS'e?3p#bfCbYNS(c473`r%*?"
%0k]s[?13&(XAmN@6Ls[EQ<ud>YO=V#/ja3Mh2B2Z`EYO.FLEhdP-rOc;cQl)l,0Dop=4OF0>5]ncD?a\<\?%9h`;0e=Uk`:/)O*f
%\iOBZ`N'qlkO>L#IXRC6;)bY!7lse+grkDdRJ3jH"nGRjE%dgmq_%FSZWt#s.c.75`u\$of+5F5j`N)g>J&j$p?A'QlG;.JGpE-6
%l]:-e)!3_[.::sr8F%e8Xn"dK:,m]O^UjdHG4-ogZf6DkD,%Z=4C8omT-"s8_5h82LN#+lplOAC)\;V;5P%F4gKT`:Cusc`oMRYn
%o'[C.:[rSpiT[>g4F$Q`LGiP-kM>`KiVE=*Q[(L[](j,k_Wo<upS%MZM-JT8U$M%*CYD::YJn+gi6BTE4)aWn?$gpD1lKL[]'uL8
%7W*+/LIa>$FOJjc_X:D^>IZ-<A.,NA_GsGo2fE)k@]iEi(6-eM;A-Dgn"n2OeLK*f*rRR46Lef6run9)n_L6$Hi-_l?ejL\b-c8C
%Xfr5'Y$C$G?7WFliN9DPNSS>mVg_RpCTWoB4o'<0bNnYmei:u`@/;KdMs9uk;kX-HXJGT+nqLJNh'A_(Xo7*UoY'=^Uu-B0[D$Z_
%5H%*GEqT8:P<*DoqW,mjEg(re'R-L(@p9A0`lTr^CK(ZHHVK7+=D_YkYA[,[i&uX"5,>Xiro5o=XL,WV88Ud^cSquX/b,e,?SBV&
%n"=#(@f"hhZIV@S-UF>(ZALIqa#R)[&Qm)V^1m7$hd]jA4(L8SV!WYE$"mN)$`B7aUgA,>dO=dt%#li,@\Eg2HV^&WhCjYgh=\W\
%.Y$8'jBG6_3=V-FJF)TZos]]MQiM^)PpTbO>)6mPccXR>fTafBDq2^aVZ,8N-0;1B>P0BreRMW[O'VbX[(G)QriE+/:YXS8WAH`Y
%9g<@DjXH;tV2[F9P<E?EhU>%>Z;8^j6aWt="!.Cu3hE2Y9oXlt/STHb9Z-/&U1b!sf!*kR*.kQbJUr.g1]W#dBjaG"eYA7ANT/>#
%X5-R!NXC#!p@.(Z4Dd2d<5Dk*$*nHun&u^'*Y7>1"1'o.r<[1T:T%(-'0nnu,e,?>cuZIg25dR/&$YP<b!rAE**JbYU92bAoNgZ2
%[;q!0kH:]pF09jc#L@n2-`IKB<@Vb[o5.N6d!SKe4(nI/.Cr<L3CG*+8Pr`,=q@HDUF!mQT%lLQ14D#MG:I5p_^JPi7U8`=Hs#Qg
%N>.^DZXq^?BD@Qd_mBk)>/@9@K%jQ;)Rm'!.2HD7V3hOL04jEEoi18E*Ml!>1Y4(+D+GNRo*X$I]/JGK/=87n*q1%pphq?&^grO<
%Mu:qrl"$i,nLm+Q5/='!5`R@lR]go"Knc>p[P(ED-/RNjk9/N4#u5iQlP%qubMT6*@s0VgUDn2,EO*ZAEuU42Z'tc?hM1CW8:g8^
%:&37OeJrJtF$""Vf)'ORQ4&IV"SGa.i8Yh0"u,n$*(ucO(o;e+i<bF<_m\aZ\RU=4]<f\[pO+nCql6Cpj2VkXq>nEW($$_Z??Zpe
%IUO>WO:&gPCX'l8SBo^$(:eG]0RcCEGjFD@:qD$.mn9C;/qLjhb$&`Rp1p\fhJ3X"b'rifCHn3nc=m]l7V%I!jd%64ab=qu(0a6o
%0f-sJ[FP7\7-Y!`T-HCm&L3[S@I/dTF^\crB_%\<M!9")MrUF'Sfn&3*o[(QPnFE5q9lJ:+uX<4j9/OC.'OAnp:>a*rj.a-`DWij
%bE*-l$k+"-J6>o*hFfh`=>p(>F-M's69+1Dq3O1UfQ[hkh<o4L.X0Vpm)DIJ(24f>X5Q[gH]mr;q_mK'&o+TVf>gHk2&s.j3]Q.0
%_jRFIZUh,q'N7Tc9Nm36I$LG[M>'DLRp(a:^4`p=HeZegUj^DP^bCo,N47>k3\b-0j3(,,O&L+>D?$8r#_b/e,@b:WpFr8-8?IZd
%LEeVFrZ'r>K%n\aO_I>73O9V`&6:ll"LiOnHe12p@@0HN3[p$TD,$8<im$TF;`#R,h+Sm?#oA&Nm+#"[O`3B]%j\U84"9&aW=6ZU
%HDTI`N>(F:>7js.m_\'feVmSK#C:nED]=NWSb\*.*H'_;*PnQ+nX%CV!T,e!E(/+m$VKl'd9LXu@85`V.<T#8q:ui8-B%eu04*aH
%GP@itlp`+@^AWdZJ_-m2g=\Ns3E`KP(5kco^M/703E*>?VPtS)Ch[['@I<0P'[tYE2hS6J;^\$UD1!H-rlFM!'pk#9h4*RuZr,V[
%#PQJeGJs@,^,E2H)5_ad()&(_)k`_2WJ\/9<=3O3*<hg(TC)N-gM0CuZZQY2qoj@3T&*\b9lA-:XsPLDO2C15(cPb&HT.eA0N2)%
%-N+uBecDTL@;?V2ngN9#QOP4j6*02bK!p3dPVNsO]R#mr;>)nGhS;JdLCs$q$gE@q^bA_r--_PoJV2IDrGD!]H"t19\!(`2Dp1A.
%"pr#=!XAtPD'j7)fsa&Sh;?s=]q<%NDY@ZNrE[A:mP"VU46]Ju\N^8O[ss*..S$Z3hH8d&O;h8^3T38K01PPipHYIcF8D"uPg-V'
%:q46p4&3F07.\s')9o<!c_>]>71k?5chFKeW:Z1aHTUTdW+65'J@*&?qRoIHW--m,g:`UskE7,X;Wq3P#7adYD_3SMcS/&`Pn)Tf
%\@[r(Ut)JOF5aI[6c(.+f3/5pE,.NH1ZXm2C(@!+,^l"Y(3?`2/H,nJ42+Z\Vdn3_+,5h$9!^Q>&.1m;2fGieo-\-_PaXtpFHF5[
%rO\@3YMmb:mN\MrLIp%,P1>e8UZmh@Kr]u>J_JjNW3+W/V.TIGHS_oTdN_9E./J6V':IS_^84Y;:IC!2];X@_^uDAYql$,V04&+#
%WHe5,U?L&m.2=Mdmti>2_hY"S0'qKh3u?,br^6$3^UcWd$/@&Hh5M3IUY<9d@pSMbXTMN_Hu"\dG8RIghmUe)k"7q*"2!@a&5@>s
%D5/*&g6t9#BCIY!pfGqbICsaRn4"F?qT=jcFr&^pGrY&K>'U1=`kpR)bgqpP>,k)6D^UA^D;U\c3[enf$dnm?;2O)hdn2)=?/ECO
%HN>Vle>#Pj\S[imW=:"u#E8,ma^XXIUH8NS'O@ufoZ#p'#&NE#B(S]6DE6Z.Q")M%S"+_'h$QSHmrJqCR-@iI0#26J05b%51EUmg
%^kHTA,g+NZQN<FlPtJad]iBXi(uU,UWl5d/mWM#!!GV_.a3f8Bh!1#ags-`1JWQ5-T]102JV/B%-$S`N-JE#;On0bf5&kmp*),`G
%GsAi4Yc2Fr/GT-GA3Hf^:a+oO@p`)%ktp-o+u^ttndg^qlI8m2_FH%ES^O@5p$Lgh?\WKC#B3Co33U^E>lSe#Z9]5;jf,Ern$[V!
%Dgj]>)KhNn7j-Eb%pq*rE/.Nam6+m/+>=[fDC1nf6mu\<A=.[P\.?XPHS&!-V1^uPCJHiNkf"Hp9SQqI]#:6?=O+KipI=Wr_dN(E
%.bU",*At/nW'c:_?2>TQ*R.C(M`lU%5(o!;W0<Ycn4TQMaLt4O&M0)/Cn>itH&;7");s'nr;?[QL,`UMdpiUB4mLH'VJ="5*cst2
%5S4C,s3hT!,!J!Y^a(IIH41h4`XQ,X%bA*A?M7[f:E3u0GYF<\#B.V=='o9'-'o#rO^8gJ#r0"*EF=dAA*HSg`.<%eeJ%.$Qs,L9
%!IK5':<2%R+T-I<0Ilc$UKY=p;8aAbOL5l"YY/bt5`B\4A!7t'TcQ0^e]*?JOT9c[h!TiM;#Tgt&no),DUd]q^QG@RQ2'5L7O$QP
%H9+M<U\fb'mPf_1,%BL<g3m]m0>X0nZaM*CUQ+J;\T/#Xk@o"YImileVi=Z/VJE[R@/]:(Jed,i3$O[6jn`<Ke]_r#G,_Q%OM&+c
%meXBMRNogk6jghGPS4Q$JmdGC"Z>5'"-2H%Q6Dq^N<u'c'D`duVH`'J6REOZCMP:C9,L&G5gflS7P[^e0cAb!F,AA`&'d1/lrB$O
%20.<rS=-N-".:1ei*AJ\Ok6)YSE%cL:X?*SdZ=3bkX@V"-'=0-Fk$_1")05SB7m]T+qSb'G^U;AT2)O%-`sM[E?.ICj6(OVo_&o-
%BR=XKla<M]L"`hB_Mf$.=8ip!V&#cN;iAun$5.B$;[_qd'X+.ZdmX#;S_MPtO!'k4O15p`ZcpSPkLn;%<!e;!AkRP<7HCO<r%<;X
%9"a&q`jL#!B=D,QY<_<`70?[&hF-n6ADlg+rNOD(E-(ks^FL"3]=76oGR.Ne_SJO4'(d8L,@%MZD\0]iCrWN,qtQ1pYTL=L2+X`u
%<2BfI+%l44AMc;?5%K]\$XcqW'rq`\9D33?Fj+AocEV@sM0iS?ZH#!Q*rY_=0K3rE<N`=!EBpK;8A2\XaGH[=Ymac^P+e6fmVKDj
%9<\A0.#5&R/_M0>m4qPQ%NJ>\+dHI5V50rF,b:d@I<!pq@P<'I[7U3@VI#k'<`@+0kD`W2lV^dep9rRr*[S(Y3Jh$R,Cn$erS0".
%FRIbUQfkoK<5N#-hWW.qYsF5S:*E8A:(,<q-9YV(?lj((Rs=VJ)\*i-]tS[OlT#)a%%YCQB)r;9ZfSplL9W6"'!!bahYrL@_12lZ
%l8f*C8tR?E+8U*l9FAh!rk!q4DTs69X2N90A`3&Iq<3j#(F-PipFD>7<kX-V?USs*V0CkBIZ'%fHY(&!_M!>ELJ^q<b2`c\[)6Xj
%6T?Z)Jr,1i?52TJhbLmDksAqTH8FV1W\M0#Z<Qa-hkU!_jW6kslW!-u_SUDTK0<F%>jB+NR[u:WPN7JdJ`aRZm-Mun)RBN7aNl`3
%@YEr7U;3b=WG:de$*%tK"ZkbklFX"us1eaIm[psX]6$mZE:fW>W,XB[=sYF_hAceKSOD\A'I42PoR'\G=@kC0Fu9k"0\H:W[)C8G
%DPTqR9m*A6^:YU\g\0uo')T*t^"ql!o/!ZJ`<!QXJT0\?Md:GW#9`b@3uQZ`apo6=QTc*3@;Y[)MM,n4[,(:mTb7[hV4:gop=i40
%jT=#,d>RI1h[@K#F,)uh5q*nOo4ASZpop5aRhlqT@gK+QDAB?0M:;CU8q26Y7aL/3o,Xt[?`D%dU7>"eJN12WS9:QR,l3lZAp+,M
%'P1?%/*f'sY4@J&hDr?-jtdV!7l`OirB4M`'pLf-m+'C&=F61Q_"HG6jGbDLZ2E)M%`h@V$c84-ldY6<F_>quk2<!ES?@,,)&Tc2
%"8UK(8qgk'6m(<&gXgu#(oQKI5(Y5U+o@&_d=k8_l1`SH\N&jF?qdb&AIt<aK5_C9\<#u7AU5%N)ijCl5XjqcfU<(75f0?qiF<S_
%+deq`LWre''l)-D6D7o#Zmnqsp4jCi?X2lLBhi.o,"lHhA&!9_#g/>jMdGKi+/8nCg5]tGBC/5L[B9dj_VJ)e4FVA($QFf&^Cg4I
%iaX0<]ZS7(>K.ZArl_;XS-a>+nspb4jQ!/&Ba;^;,=<SkVo%ld>-sfuX?L]7\/C/kOJHad]<]:>m&d?-.!q#%rjDE#'_8qJ@HX=E
%(m\BIPO]Z.\^]s17Lh*\4=+@kbp"T@Nfs%U9GV)App`]d/AOG=oD&jaJB/_-Hi7RCU6[AM)9X:LIm-SgP2k(l4SfJk@jI&a_,Ol*
%chGS@epQR_1msD^nl8-@hI:Um1Ib(A6,0(#0'*U%[e%2:D4cM=lED&W4)!V/;+tn))e8_@A$o&&,f\ZD>T`E!ELX+M[H##Q?@8Fo
%1/'9J%d?R5E%7Ll1!i.VO=0liPM&sW+<KTm+(8@DSu;M\=YkAM:R<&rm[p);&uE1P4g<oHF7Xt1^Sk0/f%;b"``n^PW,-D>__SuX
%F5oD\Q;@-@@7sgk1N0D/<)de;O;dDGd%C[&Jme@9^@RRK4l+kt@Q<L*(JH.>Z7crQ?EJ=[HKtZ'OP^ZD;pg5bYhnFSBglAN0h$E>
%&(Gm=6Gj^6S>KBIBK?AUBlCVI]h_'Fo+`,".&=L[gGJ!%f@WW+5_I]Jd)SMqd4`,no32O"Qks,@b?pD)Td;gj%_F/s\fR-;:ZndX
%7.r0u>&SFhB5Z6lKT/-6IAO<G,P]iN]?!<H<6VJaU[\";Z53rF`t*f!)b4"@IKHGn40!+t[4(3r>pk'f_DBm[HC/#<Hi&@J!Alc\
%5C&W$-H>i(q6>@pRjTLUXA>T\ojZ+4>(*9R7/D7%iMR%0X4ok%'a3S6P>H9i:Ij_@cOpLXXlBC>1T>!uJ]Jad:WQE]M4oXE=X%rb
%h/`kjJZs!e[f"k]6q?#nA/Z&NXBFtkEq..U`tM4NS[^^r'o,ItGC-0YkDr6(e!2jbjco6+89T$BM!X6P.c/OI\O*W=-'X@m;Miq*
%Uj#</'fg/\o[L59DoaWAm%,Eh?=%0;\^!&gl<sBf,$igSi5];LR%c4/hTj^6a\flCGRo^onZu,*FZe!^JVGEh42kaH3"A]7bAZ0"
%-^D158us)dE;8dkUcDnI_t,rt\)u<J0[uRZ!Cq)t#?-'T7NQJr5WG?!ml>)k9]''DGH$Qs;iPdf(o0K[O?6?a!`Jba?qs'\4nelH
%N?lrK9/CSIo;-Ch2/THX7<PG%,,V0HOnNsR5/H@20l_&B>]=IK\?49o9&FgaEpFHfB!G)mNUo`^Usb;oHUDPq`<O2F@Qo2=;Wsq5
%?C3cG)V\JcIrGbE^)D';"4VRR''iNa&U_Qg02^S>XpX<j\Y"2u6T]q<BJ8*Ti(/2f%)2pc\=sZSjpgWpYRi(!8sJ)c1h?IVF=/OY
%[8#G3!.eH[\VminG:SO!PNS![](`MYB:>(t]Q)l<b>#2d:HLnQE3\B13OY1rq`6o9]pd9`<+JqP&$G+&6sjb?e'/i;i2n6?WWWEA
%+!!L8q57aH+2(BJp^M)]P4ac9f7*B4[q2j][Nl/@E;'GeA]Cd3HQT5#2UW#+[6)B92,OoKB_a,TN%;<SQF9^+pXl:1HmknV]oj]C
%aarmC;Wt0GmUOt38&U!^7*@cMq7#CT<2($PbF=h0L27&-WCHLg4DN^pX6o<YmBC0#b6f)u>UNnDD[*HtUYY1r8rWMBE1]k1'M_UI
%VUGajYM,5La`ec=1,<db_2#ef9WXB#Z-BsUEr.lZKsj[g?d^7m!cS"4+jgc`[S@Hh47rs1mbmm(rjDPk$t`:p-;_It+M4qh&*?!A
%=qt5-a+k3;*J2*krJ6Rroh)7.V9_Q/g(UWqV&`Cclg<1_m=Xd%nnL7+i[n)(*%^"p/_k`<UVoNqeh^c[W:M&a8m5uiU!cJrNTU9j
%1lX)7gQk&N@9#=;e-S!>U8JNNW@n=_V-l)^m&[ij(WU>uB"(QZ;m4q7iF-PK*T`L)O=MF>kUg,?VD`E'>oK)PYCi]k'K&).41Jk_
%,4VbjY7<+3pJ!sK7(G>DP@,Nd^4b/6/@Bc1SiX%Kng;GNDV%43PJA[:**P;QP/Y:]M/5hpAIe+Nop$!Ir[S1nHNQ.rB/-^h''r$X
%EUac!dh3qc4$b0-7+G7dG#g8t0=i+UID1_uNHCae4BJ*lX:++]aA03'0HJgZ.&+-T3"JEV8TG;1J#cMh]-6'jS:/d5.;Ntc[KVjX
%``Il4kd]c'`96!?JZ[p%Jm&O?Ls+tpnLYYWLAD6&"4r5O/@Ve2m,3M1-Utpn5ouP14.f+1*R-@P1G@AD*@3(jZLe#B"'mpq9D\LG
%.9X7_nYA"ZJf?mBa4\G!]qi0oETj([VUF\!ZL$Slk`K_@>,.t(btugO1^6]"VeJr<;=e>*[coooaa)[Mnj>S+kbcq\e`bA":sNQp
%GfKo7g0^ii'J6BG3b51'O>[\51hW@nK]i/u7dh?qUW;YYSRYXNF"6Uq<#oV$Nt?(CjYe^*-6&f<HXf<)cih-16@8jN^W+c\ef_Si
%s7d]'Z2RShL\:upL?HZc;2,H@?Hj2`pn)JcJ04PLR0I(>b\c,C;6SFT@&38a0/if%>/7W.X5@E,LjFbefDQAg`h%iYRX&eX2BMkt
%l+-![%0cfp'X*#aO7G^/j6f]21YTe9(\g;Lf]&Mb"g?;H[C`(+lNFr8_mM]l2!$ah4?c]8dN<EA!a]'-nX\mW[trZ9pg<bYl+Ll#
%r\]i(?EkH0>]@,$:F,>s"eVNC_n^_"Z!L2U;bF]_mn_#)Q)5H0+"N>6Y-pN@a%^KAnj&Q#Yk,8(U>.saEsO>"i^5^"?.4pRr(qL;
%1c-E^r"YfU#rh@9ST)+9<fb)KQObr6*d`5!n2uY16Z$*X-*>YapY1*;C^<#Vd.#EEbDq/ZfU8liD[eHYp"kVOL1#/!=Sl%_*?Y5[
%dP,#pR/*5H:k&lIDQCV*Z4Ah&FW@:R[I2iqj(q0a9bPf[,'4W)U3QN5Q+6]h[oD7M%B4;IBdr`KK\M.QY!Yl(g:<:nYmfrl6@pI]
%%#nV-QBjN*,/GS0mo5)U-'"hBHpNr5A9g0\$7m)DQ4"!M,njM'U9Tj^-qMO/LuB3-'4aNi,h!`<@q[%(b-L17+XJVVbH(hJ=V)4Q
%+ODQ&nfiOXp^kEcE0mDh&2/m!ohFQlW/+r)BI(\DG0dtJ,alQ$\.D#;F%-;e$1OO5";Rks9MmK-b=NjCA,qi+\<+q?fIMkm8..8B
%'SDUH,j^FG_We=5Op-4L,[;!LN54'J$*<>6e)35mn.]a#"\+YpWcX'V)+6joPXNGf&cj5C\#(F/+c0WI+sIj^:4fW.M?Djr/5D39
%d53M%IK1c$?-*Y!";r8j,RB2\Zkd<e.7XJ'U%`m8aG)+3`]eqt1e#6R*"n=lO<PAR@K?";Q^kk,4CO>5bRiKfo(2hoO5m!S/3sgf
%=qll`M\&sO=!]mK(U7K]BEnCsOH24ELEp2<LqqpWAQj\r!e!<`@EnrF!9q;j+c](B!<nuIMt@3c_;%ii3!"g`TWA0tBHB/:iX%pT
%bf&@'O9i*NTFhMVd"`Dc_%Ih-A<%Fe"@*B]k#"0)BOjEs?6^XQ3pHEXV$]^a+=K'AO/$)(XA'F%#bgb:X@-#&d?$X8ab2rf77fi!
%P,48YnrgsJL''^aFJ7e-/IN[C1]r^[WX$C[.")LI"&KFTNe@T_O\nIX?^VW[c/L](eI4_]-6uG:BH[9tQ:37!_%D<=E%"p)l3brD
%=pU']=Uk_V_+aASW$j#!*eL4:ncY0XAOV32_>O%jQK;gG'P%B&A/Qm5@i613/YaSBB$a'oY^7OE7oA5*r5)Y"#rNQ4#8_Xt'a/Lf
%O=?iX16;]^8es\GcitZ8,hXA+:^;6]i`.<N;T&V<HW[LQ*h!=jjb]fQRU#CWif9h4H,*103M:5kgK+Q1Pe_r3MSbd47@"cG=V:=6
%,R/j_@73j7l38"-N=VC?R?rc[i.Qs+@DHJG'O!MiW[+<mAO''[<$?u$o#d93U!_R+Ws\DgM]@TdbY';Zaar:,.?S^CUY3ZDK*%u!
%:UF.jC-rAJ+qt3>5j"`m!el0U@)aK^7_s\-;8>TlD%ruV,67C^pa2^FJbqaqd!u]_SKa^mES(iTa[g*P74(Dq6lj)4!*`lR&Hl=8
%33+K):M,\<U)7?-1'WYk(6qd,i"F;o,t%dgdM-QO0rm$f,(a/2JiVg-6*b;[_[@IKO!EckHl(EqUn\(FYS(l^"]#G:N[</:-,bt?
%6(gW86S_Hr,p%@E"Ubi4?n>l$^d`of_]YW=4=uDUDZX0?X+@n$3K/j=n$[8pd!4UfMaW[q.p1^H(<)%'94GXQb>?<Hc9Nqt&gmmh
%7m%G[;j9;#*?6biB1ZSeP)R<k.gO!]@=i9F#`$]e!t'%$dju_u5Uo1]X#\OQ8t\^W!>^Z\M+Id*&c/f3W%rA8,;]AE<f.O+Z=6?k
%K/FGnfoDgEPY.BLQI/,W<Zo9.W3sR3K+1./!aM'?g4J?RCOQC#oG_9HMEt<U'9kd5%G)`tOU9]l+riWTY_aN(?u68U5+1A#^]q,T
%XO)fK,an9qLTD&(AELXr1dHD=GS8A78HoDq8-?/L8MONUAJ^.?"2c>*.)>&E5t;3pW8\H;6tjlgh7sVE<jL`d:*?e_"56/E&r)Q)
%nI@CE'?2pTps=0=Fp\9W1sk%!`#Bg:BZm_;kX[hrk5BW5_sef(,".K",pcA,65G;G>><*BCWjP"X>;OML.4QUGRP<ulfrEoT+r1A
%`r'3q?=<+c3BO+SW"^um`e+jFd*A'd:l)N2=onS_A6g5?i&=FC;\P0nRh3aN('25k9>m[rkc8P&:<URfZR?oS'k^)Lo:trN"_PAQ
%"Vc\8!B!S>9sg]^'WhWS(d^#Z4N.kE97qI\.!sSbS1Q]a&1%T05\EA*Gp!G_N4*P*XO.pc?AYBgBc4kmr@LA;??YE;'1:c\+<i-L
%@_Q;;JiT)B'QYtOTHSttLpJ+nK55'eNj\A3Lr+>t'SD\ioHPVaG"]b%*aLNQTRGiO)ao=^j(+lbi50^SUC8&')^?O%J1_DpA)F$p
%s38-pi'`G!!)(IeQJ'-6nI;?G@%+p*P7.t\OG'#I\]-GD;R74t&IXNK-s!_11.d.Ef!81=44uCIZqOqW#qR'Q1ggI1=jRI18>\"Z
%0^rV/=U"k_6Mt7ON1Ee/+<$N$Y`,"JVpl$),dIKq_**'oiuH%"p_Y?;5nbCP#S+oV.PQSH*N!_1$VM+IHu"p6U^DBCdM"I=&A?`d
%%Rr4l%>,3_%,ihGOYOZQK#njn''D),p@$!2kU_UEIN2#mN0Wd]B[")-hI+&G_63#Xa=Nq40i1MGbY1<-6"GhEJ4LcV(d#OQ@K8[P
%A]bM0`XMQf1N3oR&4[+[21Q+7RDg\H2Fi?*/Dc2WD1b-H^l.\_I)U[#AB+B6HVLi*@2ZXh#*g3'/^+ft/Ob7r'E_2TrW'&UA0cD"
%^taGdZ*e6o+IEcq-TiQ\N(Fg\)=&d1r\8GD!"'>E<(enkOP$<#*?"\Ik%#S=<`KC3"3WTcQ'#OY-)"aYYZ=+r+drb,iDCr+?mSr8
%@OctI$(X"#oeZtb)2s/=WJA=VPn?RPL&**!OGrjd`@-8F3b2@):r#=K-W))P'=(o03#YaL9MEQa&6>Q_K/amq$`QDm[<U70Th04E
%LpGPq$8W-G9->hf/ItX>1^C<&M1f:C07h!op)Sa2Nq<XN19(1:p&u%[bhFF0N`87hCddPqi+=t@\4'j-Z+u)H)8H5267`E63)V<D
%X9U.A&l\:-S0V<t#5tkJ2OY,<KR?lNA;GLD&R?SCUr6\I"."a29SgApm:6]k5iC"K0j+800K@*4)[8ZE8QYs9XoWP\RR@N3;A*Si
%<_`jO1T57\,T'EL";2*\UG4"p'"W8l"m5OafHP<6i,pUP+m+ac6M#e/f:dGj1]_%#Og$*c!>\n'6A"bRRK;;6@>8'p@nVhND8b]Q
%cc_i4P<]0PO>n"2<NCLt-!$%*Ki"QK=g1lYb$rc)1QVZ@F]g7(M^/@V7PH56'Sjs9k6[m/d_pmW9^i4bGR^dSe<O"#W^&=_&7AD?
%JConAX9&Km'O%^J&>4<1n?Z/dMknP3*\]3u@+D5%'M:,*N3]Q@(Q1'n2%KoAbUTOtQto9Z>6ZDeb(36E12Fub3WL5'.lIWqOR+&6
%GY,-\"<i@sA\hc0Yt>`>+W/>20Xi4j"i1q/eL!%#9QVB`6j(J<Q:#*]TIiUl0XrG:<g<lZ1<8#ZS&!3`cQ3A1.RNk<8,O/?=eH==
%-!$h+3(@Y3F"iL9(ifCcg`WI;;@,B3=nVo!a'!O')XAP7Bs>1b>I&jc[E+ND%[<S!$'R(h@Rrp(jVK-N?if>nPXIhFTV62"c6shk
%B=VG%&JB<(&J$9n,m`1]j^gst"hW:"d.S(P9k2G/-o?QfAJ@.0b+M1d6aQ!A87e@Q'GO[N!<31Nh^\K,$n7B3A3kqnmL-oZcF1d/
%'@A9>OZ3HnJr%F[Q+mU#NeKJ8W!Gmk)*qZ4H@^l)&Gm+q%O!>ZW.1TUN)CeIS<N%.@i7#?f0^>U.t8`.5e>F1NfaJQP&pt3%OOpR
%'oqCer8WSZ!?4fJ#-]Md`:!4VZ=Ja1#f,*9-&eZO4B=70N6Gd*@pt$N)(I[Rj)HN&Zj-->MBpUMPJp`0(dYrFN`[8T_ZI(Q,;]AU
%q&#D7M+*U>iU0GBFB1@7/36=tn;dS^.3`6?K#=V+%m+P="PKr::rGucm(:d\N1>.9jIq"[(_Z"O=?,pah^T9qJ;sB-*7CcqU<$M,
%@rMI-BA>V!Dp6Ao=AQBDT>=^370mkH=GS,oLP.PtZVV?_7^`CA&OTL&*X#=lDoG$EAU@g@CJf@;X&k*km1g8%-fGO@+@fj42J2U=
%b\(1eUNk0i&<O.TDroe'E\_LnE\%O1d+FKUKk*H5?kjj33_QiF7Z+n3$7g1f`DWegUI,$&"8NTc%n)p8rY`occ&hRS6mo'Is((18
%MfrDlSKglC*=%u8Ma\8@P!%c:rgR]CkUhVnUG/h0m=d81*LCFCHNGc4^4WI4CV&`ka]\_JfLeQod2[dQ\#OXSI1bgbM@rLrMTI:c
%Bl(si-q7=>?nA&Z5pR?V/*"Xm]JV;r"s@'-aEO\aS7L5;#,hBgCCr,#*K[X8`"83#lro&BMMW=l`Dd0P,RjN7Sm9,\M,Z5J)HX:#
%pu*@_LA7&"Pp/cQJ<6Eu,hV4op(81(7J$S]'f(:`ad)qK-pXRcOF`&iA8PT4m+>U0M5Z!9ic0=]\=*@tdTlhB5M>)gHgYdn/dD]G
%$a9bm#8c5"/EGFQ,-H9KS-O0?j]]TqQ3VG=EC:F-&sZ'#D*_4k_7Ub4.=:p933r*H&pT87Z%0*uqR[14jr#31-UCR\@%YJ.C0!Y$
%Ss8sqN,g@:Jr;DH+YX^;_Suj'&i[%s*3l7O\9A9)*L9*%0L6"s',n7gCFCArH8let/c[*Y_=_1ONPObNp11b`k%L,-=>l\.M"qC(
%=X$!aWQXu90kch#IdggU[1s0B&oK(),nC73L:<uldP(*T5S"o;/Kd5(4[=V>@QbD&1'X->`Sor[[k]T%@($QVKc(J2U<Fei-l\6R
%m$&6JaImc/7dU`i@(&RhM^-L6DK2ERQr"<hD*VBX'L?87ARlpH'X2V1#n$AK+OtJ?1)AQY-HN^P.*:*WZUV5d6cRY*Y_N+m7n9e2
%,&ZUs"J5]cgu2XD1l3I#&X%piQk/1A1,=P="Cf2UN%/c^66j`lKYW.s4:AHNX$VuWJ0a)g&1SZg+poUrHbbe$@-E0K$CCpQ.?iC!
%Z>4R>4Mqb,0=0SNckA1E7o9?:3]_qR&QSm""GA0kAr&E<')5K=:CkGf\:]Q1*J5escQ,.Mg&g[gm5Fnt%[3"UluBiNJR+uHe#kbL
%JZ0`%S!'\!Kp/TQ_$u!)JHPbg`/dE?pT@o/:4UP.7i<>aVDa3i!YV@O%<6&j3[%88$3nR09Y>QQQZOr)`M#!q``a%QDe(:l-G'ZD
%$6p/G6qktk&GFI+=c.gsA4;t6H3V25&<-iMd"TlW2^UnpijoYfFU%4GnA>?plpZ4k0gM7?_J?Z=Yok;*R-A#oE-)ePjs&LnMO70\
%G:^"boHF]?M8b?7ONCq)+E,*'q?H=(WA=Q^7C'/=HR'#8YRH6?NWdoWq</)"hP,\I#<(R"+;tVkFbe@sQkq\m8RV/n9[?"=J:82e
%mPbWNhZk+2E^+FICZql1D@K@V#?c$OWc4bSDp<h[$]C7fp+<$1&r'IQmN2O]$mr!i%4h5u(7%HD6o$C9_f0`%9Ha_bBoA;pC'baE
%@l-he<Io*+XalAmJAKk@a/1,OQQ0+!)Y.%J?k=Lg_8&T>=;mkf]7g(oOMs1cYj<%u0[NZJR3MGXgJ27pJ]FT9%bN9e<j<G`)/D[s
%L'6R&9<ePM4,R^-!j$qV[!lZm!M0J=!,76t3>;VQ>$)Ch3ad]Y,<oaT@>i.U-6@Bon[Q6V_b_IR(hh!,Iju"pK&bc3Z%a5?Ca_O`
%EEF">!".>aa$9\<QU0!<o!g_.>6m$PhXc.G9iJF4N5s&]A1O#3lO?YKIS#Y%Z=m%\$]u+m;/'T>1_]sJ@"JOZP_#/6KLKh`@sF..
%-3NWY_8M8A!W[eIN9`tj8<uMadg3n3p&#DT:Im4`o`/_H>X8[j882;j0j"DgpSQM_KoiIt$A2_(PjUsO6]hQdd;t>]re]HDXg"1F
%3!+/;#tt3+*=$BlY.%PgOi!T.^LbaAE4GiYQ`)SbOV%V^msACR=8+*u1BECCN"p1qI_lZt6Sg$`(?:DrE"&$`d6s;IW!JdRE*/RJ
%XY?D`\-r[!LjO7I/+5lq^gY%`EdS:r"Af%)82@,]2dEYkdC@m@mRC^i/":'\F;U0O"^dWB?pKJd#gq'kBWPn`lk;i>N&<=`)?Do8
%D&8Lf71_]=J)p6d4j/NC(dnR[1T7[u9G1=A`&MB8.H,/%ZjkT4#%=B^q]rHEO'>#fUE]kSFQ-\%_;qi1l]a('lWbQ,\<TJs6,"Vo
%Ft@Em.Y;>.9d\U5!@RND1bu0$R3c*KQ"`lJJ:'-(G9&Gu"q',nTF%>D%Z"96F7^Y)YR)J7"A?tSe]AfALnP>e,0Qc;b'U4\J:]X7
%))nNK#R6_!\H$q0go?:HW]L4.:QcQIlk@!#dg4$hN<"ln\Hjd2N@QWhi_g.e<PbIQ/qK@e)1866`Z;b$`qPqn\:]o4NOQ#<=B.2o
%h%%7Tb8;X!(oSY\TQ4F/8_>/K72W'iPW8$5)u`*Pi3aG:A;364bX)jS/8F*T:Wu[TSX8sRh@l'##l#iBe3N%ZVh%.4Hak'4@q:#V
%1r2=]@LWDUXtfETE,07@<_M"qH;=r_X@knjNH#r@^0,f^!>+urb*Xu9l+u2uE!_ILm[D"(;6k)om1C@+?iF`oAI>#j-KL=MbL1r#
%6.<dq+>=eJOJhPTS,s.$ESh;l$tt>#`X7"pd?(U_6e91$CDS,pP]8\b(G9FW>R?a91E^:Pcj*A$8E3l#H7Ka=La%Q0S&b1(O>,H?
%`\Y!XTnIk-'qajH,f*IK&f-RBc:5Bh'c2mL4cRJV:W0tMgiLAW,mUJ%1(XUJ(e_AQ)_O]!e\eIW<$R^<HGnWH\-n<Cb7m'p,)ri7
%g+qGLc\V9/6*anDE"Tg'\;:qQYup^aqe;bS+YEh(+9Td)d%KQsToBfV;'bQqGnDaH-,ju]F%LsY>fVs1Qki%)dSR/%cbl3M[@\4I
%$9="*dnt?-guB!UeI[t7-9ZrX6g;RA"57%^c9oH^?(itB+hMFlCZ174BGpQ>P&78,JAZt8J^'I:b.tcdjdg*:H",u49@h*l''S=E
%&X76j_80.2@O6_u+e.OY0$u[X1o(GV]HGUtUa:pI6o#s;WN^n=4)U<0ie]N]8@(&)Q\kEEkIA2cDFOFZ&T"hQ$oZ%pgD#<K/8c(8
%TMHH7RE;`<_f@N30?Qfg9"*e^^bl&jkO%)J/4l.E4.QBOU#ZUB6292?0(l0P_3U!'>@[j6Hc?n7YqiplEo06'?Rh&:kS5`]GB8,T
%3K;DS2S\QJE"VMH_7\B>gcnC=+OS$I,f.Zo*,WaII/>A;mHHOoA2=Diq>8iJ[00&cA$9PUp4a<%O8l'Y9e)'k^qF15QZDcTY6`B\
%J/.06>T=(hpo>3PQ=.F'Hb`]7a,8(fGU"q9g@_ll4T0-FJJ<3hn'1G^GM[Z-AH\6M(V5UjI?6JprYY1jnV/<_#X!oW0@61V`LH`&
%c\TUo@t+Jr[ojrE"8#+=^/g-orH8`5Gnf$Cc6C;ef?%0)rXQd!^&Qt2jum?]^%XZ@rOmOGgYGd2:ZQ0TBMP3aSY(*sGqZ_G<n$NV
%HlF+H=CV,RcJ<-i#4D[/LYl*@2U:[>^$E+EpQ%<;J;RIf!bm?glIa7b:JBt%D#XDW'iuk%pRt=WoDTof"ubIIQ:0)b6NF+f@cP1H
%442$ne>c8a"#sF.jg1:CDW$^3_@^fJA]2.Rm2G1)m)?\B38t><F!pKOjQb%>0`N.XBLIF45#oT7-4)Yp)eRD-_q;3Y?&LS\Q;,bV
%Bf7<*`I6';BH]>A*\&##6!@lA2:*>13g`*T<1IQ1?jBBjJX.?ZSCrKfF)MT`K0&L?Q7c("s6[S9k8,'Q+F-FX-9`3'X[]1Q1tTFn
%#fDPP/kZ-<9e6OLjbKV$!+M/IiTfL)mtnEB5NGWCJW>Y.r+`-<"\Jd(2s#UM_&=LOYj-p!,UHpB<`@k,0<rX5@U)+b;;#?Tmf/B5
%]:YAL+!0S3Q/!/d&0D`"5M3iRf[dbi$46L:5fuL10$<YW$0tpA;'TN/PSj#"<t+mp*AdW'%HaAq!B.f(D_puCNWH[NX;WUQ'^Pf3
%P%;CB"IFrJ[+i1)K-Q>-FA#:$#UjD+2K&ENj<ibt9m@4W]2i6n#X)?nSGVnF0_3L'p;kc\d]L_GOeE!5em8(!LUA$nWdkWmmI27r
%MZakofXO+7mU)%2cTJDHl'F.HZk]OgN@?HPLRU[Rp9EA%i5V-UlB=^;0h8tuI6BD1D[3HIYN(^:eD663Q#kmHj&7h/JoC`[Nsui)
%nUmJ?Qgjr``4FS(9/67$Rkp6X,snsc&aLIbZ%4N),TmuCp\:$AfC/C#8J`?N^#tphLSQh^ds9hbM=.7`GVl<=5(b__6*gB-4)n;V
%"Y-t'VIr<u^<&2M,Y0,iIQ!5>*!rYg`#`"<P9b-iII5dXK*iBX+l9?4oc@PXG[^j>m@0fjM(D[n!7C`cmS,l#PlR)HW$109bAD&B
%\HG7W!CZL&\.EM8,MbaM`(Es/$,=C@3;Sj*>W^;"RhXmG=n-BUYo5+B/`Jb1iWP5,BH_/-0@qN@l/(5G6g:PeaZ*@b*%t\la39Z7
%+JJrr+.j1iZNL^Kn._PJJ7l9AFKsAO,CN*-[&>*Kii_%_JLViArV8P[Y7_gVi$[tR7je"J,f<>&"ZZX9F[0XDYE7t]=<kd&\gQnD
%H&3TM`c+!ifsO&=TO=a\fRL7-OH><f.CH2+p3EN.Xk"GBF2NYj5`n[(-%b;V8gJ[8SAGE:<d#FrpUn9raOi;nJR9K%Sun-TiD1'S
%=O0.ser<'&RBk89c:Y8&Rhq+,p=8Zg7X()ifbCED;80/#7[kM%)g]'C-FoZ_+VCB)lPdn0\2PBYf)8J?ehg7<l/a!FnQFu-+^>F!
%Pb]-#Lp-[m(c]o0`&rJBYK)=_?&o/CcT.N7QhZ&J7(-S4J/e^--XsH0Jg?2^'1[@,952#O:tP"O@&!KT>7u8Wl[HfA:8.l2Gk[ZQ
%:3$SX7T.GQFT:clJ,5ZK\*0g0@lfQcqcjZ!#g1"+ru?@U>*i(u(mF_e\<k25l2Ag(bhP..\bdf)jS]eE"Qo=V@i`R*24&3=f95Fp
%B@QYCKe/3%3"342K%![4aOP3I:T&kW.dU*032q2sof3,`F@"@Mn]es6:C4a1?K5mG<XBo-#+d-dOmlkc@rK^B*M=![E4+GtF*!L9
%6'Rm#Lpp=QI`4NmP/CFcrmU=dm%,..OPZj'#bj0>JqZ#pI)ggb?m'#eC"Glc;J)/54h'>0m@o(m9+'=R`!b!,iJHb"+&N#K)XhC'
%M3WDl?m$_0?^]anF\-HG^&X"=,P*XRCQ1Kef0i;uMhNbK%'o=GW,Z9g(F8PI^#?5Y^HL&lI+SI+'9h<=X'AMtTINcnaOFi/i?mH*
%+H^:/15V&*0;&c%lF^FU3tPM6%O>SS?8`qKdLt2X;(hn2hWZ>&b"@hZB8K19>!-LEg#gM&2HYi)QbY3R]bDqiG2D,6!h^<?9mfEH
%j:uK&Br.9gXWQkG(7F-5F$,#--%`0Q^V4u\T=Ib08'7XArM?TSDle),GWuT)R(W,m`!5+2nW$<fnVg,f"5nM&lf:FI\`,EA/gu(@
%'%&B]cO;GgoomT/jk*_H!pB`;Qqn>.4c&Fu5]<Z5&I`\e03S[f:M)n^%eC?7r0]R0QBYP'^M2'h8,=IF*\/L4MJtK-"/M;U4#[JY
%M,s'3[$g&oOn'j.Nen"L8[M%B]u?!V_I<G=4SN9IOj#e(nIgLJ!c5U2n'CJsG<NIgDP@4+=-h3*kXngE#j*YbVRF$%iQg62#^$AO
%#Bkih;>2c/\PHmT?UV7pFge1?Pfh&kJG&]I-f"p:nBJ<#f*9C*"SrHkD=N]ClUs]XN@Ca6Is];ad-n(>(UENb!_PW2G]T&pDUF-o
%bLB@CUiau0U]k<JPki]0<>1*bkP41JSu4DaOG$V)6^AXO#tsS68[XMf!^s=\_%=sU$]iRs*'s_W4eq,!$jU1*puMco@WRQ;B'/uj
%\YJ#iD$PQ.^du^Llu.sWH<>2AZUJ!P<aYtl@0Nm#r%W.f+829-g(,1+l"CY3(nn/d?9o83qquHHnJ*Q0UMG_eVDqZ"o=+eF>ja`L
%nP8N`ofVYcCL'5)>5(bOEOQp])-aFN-]ZI^pi%BTnT[<EHD0+TF)[h'mIDBZa`8/iS?;'h.f<-7E<2!$A:@na.R1XoVWVZ#,=WFI
%:bVYq?b+@bdH;C%ZK0;SE.JLtRCM!l7Hk*nOS(Jc]I!Io]MtR#9,++Z#H0:-*@YCr`n!NuXW%P\5>uGP`;a?o5"K+SFT(0WqJ/u%
%K\H/r@$gUq:QhY#`dn!t3.rS+(2<*\Vntg[B7GASMa.LEpCI]/hu<BMom`B:1.*_15Y-b1J(N?S.<a#h1M6BVYJc2oA%jn>AqJXU
%(pB4s*[GpVTji0qC'=::`N?]3e?K0pnHf?%+nP8M6%YT6NH\`ba:,2L7sm<(E_)LSM@3sB#9;:b5fZB2?2"RL9f)r,5KShrIe\+b
%B,gK9Nn7.h0+qqoWqH,0Z0=CfSD`WtBWSf"QOCM;rV\-,gs>nZ+&XMth7q?PR(X'#?ii_WFsQs`K5Ccecq;gU"@M'&MVK`:\5>#$
%*@:*HP8_aP\oNm`"7K:!,"/B0h"P=a9Iec`2.=/PIFQT)oV[8UcdtN0\F-%-6]%)hN4t>3@1=*9pKs,,om1-d8ZhApb'NcWjD8;p
%@Q+'VR?a-i.Od__bC]sg&Vd&kiF=[D'W&o'F\BNL+@K=\OZ#VpAOqMk<ZoM&j$C.[ieeZk$CD48[V>hCHDcsne8usRN3EY3*$CAU
%S!nXC<0(pdZ%2\*k/`-uc0n1j43k@DFU,SC:tP[C+gY#.!O"PB%'i7nDc0>#bG"#B%PcD]JJK_&)/E!]M+Dh-KlKNoUEqCTCE%`-
%*%8&\q/=%J,c%#VIho(p[fI%\bZf>uk!5R=S.;Z!3".AB&uS]<B8cE*T/d:q_cd\Q@aj#W(7>QgXSYk4@Ira!f#1B^.em7Ws1BP9
%._?C;i2(*&_>i2H&fF+01NP]FXt!S<%RCiLkrobF[I.;hi,^<\;j#eW]O"[F-'If].c[/Q,LX9C_[peg6YtU"9a._E;&KBGb8T;#
%/":d'nU#AVVB-@@*[QBh(^_72JcD?tQH?fSUA6o$Dm01c\$'.rT9"g/mr@&P%`['IBV.f`YB*.&!*!K^\AZ9d-G=IqP\e9l2iKRA
%h^bSX7;QuJ'Y%"E^1W/R3?rJio0lemFI8qMT;i1TT%nl;72?S8U`@qtUWY.B]ql&EW3^h%WQu:/O(pE$1'P[^+eS2u;.W9r/]2r_
%39/W<+="0i/a#"UR]g'UFJ@@X[Y+7D74.hnp`76sG??@p?C-F>Aqt5WJHuTBC"t#Cm0$Y:FQX(2h/spCC\Z]>XfUR@#!):$.Sh!*
%W'lAbnhCuZ&p&+jJ]69J9<9jSU&tZ#RAq"0pBWP+]E0%Z5A>G9TDu5i'[5=RUkPCt9aPA@JG1k^6Bf5So(G-=gW6pfr(9gsZ(""[
%[[*rX^/oSMT`qp+aWlHD]2iRQo*p?)F#g:uaFQ;_dPfHlpbC%grU&PF'JA8h5^rI^\"*R*K,)h/JiU!*k9Ian@AKIC^K_B[h/.,W
%Mj)p]rI@KjVV!%>G?!u7eG7q]@]_&D%u<l>3fD-+'r2`Z(G.#1.i\i!d+8d(+qKPYJHHEGqU]qpnUEZ]g=Od/mBnh\/9Er\>p[W/
%`QH%CKtl[dT,A3-_cqO_6,6r.X:6t,-Or73kZ:#jpXGLGG-0SSfPS$,(?IKhcN.!Sk)$0WD0[`TVE(nUfg0]p?F#SG;=cqn!;6kE
%[lu4b+"D6"3ebjX8h<s$JaX5k@*h).6q^lDO&3rcIo,.g5QlO!q'O8>+%J2K=oq%EB)M:PQ%j6!<pbS8QhRqOF[-(W:mJf_2Buh.
%O')f`nERl>J2U%ahhD>2\sB<_rJ$!NKf`B\:P1T!5p\"l:_2Z"IZRDM*>LL<&MT\5_Co8N?l*35h?PWkJ=#heP6a(^"T@DfP<.td
%%WB6O_>mJ$PU+7^H)N,]GmYG91@eu!;7nkZUg\oYZibtY$qBi2WgP:'m0jglD?SqQi=%"sZ4-*b1OaS*CJfH`TYUjJ[>DuWcNh25
%6Utqp]1TT_P37)poVe^+ZA%=8***cQNqh\.Q'OXGer:I,T,tniW#45oK\X_`;'431pm&CbWH+57^3^'G4$*CM\Ar"4Qe?AW.gU3\
%m-Hm\#0O8][Y"Fh7f;m:qE0k8[6.Y/J=h"T/)U8f\9m5%pZmh]<.q;G;%?l`H9g+?mf?:D)8\F;/;e6(,tG;#7b%<$+_HkF4k9s`
%M$Z1n4`I:p/ND=j-[H`<`o<d<_^"W9idH3q@YSSip5K61"h;622078&@hf(IZ`\f(s2*q\,_N)LIXlq:/$o9eE+hEkYh=cR`OSdS
%9X:a&iA^D-nL5=9U"o$$UF<,DVeAHIk/[]6mUIE1f0-O7El8QQ"(A_N;8i*?5=%Q4Gh^b5>O4,@J%to][7Ejd$=NIB1:RQD-]SVm
%,&GA1hG!)^ANUjqla#B5o<RQf:)&bRKOG4O[aN]s#9Cs!k.,%TC(cj6\ajhT$(0EQm'pm5Rsmcl1go`g_?+.uY)j^$&,)DnO<sR5
%QHO[#.(%/P?\KDXLjb]O6mhYb/@-((U[aV\HgpOIM3?P3HEA[3+nh'70.r"DjOqc_?Em/1VV-fCJ/_o>L?>.#<d2nJk0N:nij^Ju
%(3d>1'@<HI0iS9Anp'M+?BSRPRX'2gEmXc-Y7S8;fK)*T'agY2#i(koXHo0,nD;\'eN5-K*@=H-nQF)D6ZjnXL16;6=hc2T(gB8C
%.aC"9d33S;\1Cb<:(]#KA?nh4gr8QuhKnpKE!#<o<3"(Q^Ni'J\CZgla-HO>_p>>_+9>WcJ9I\EDlUHp:h1p+EFM!5'=Xtg4mK]T
%l\\k^Ecn<0]Nt#88Q#7nZ_?`j=YOI8.5YaV&B+d,:7>?6!X.GU]XGn0\(GH"a8so1@1q=7J3MkVjMr$M\OZ"L(T=TcpEXM!)_@el
%ISm(0a"+T('QWY@fP?NL(S'KVHnIG<4>C72)'dG0]!Xe$p=ReJjP+NrUC5'spuZG"`WF@L_,nI%=3j3]%HmBd].-u@\Sfi7oHOPD
%\Sk7C43:mOm:fEs8dp"W?m1KeZm[Y\6&52%nk.eV;WN3i3A68BVCODe2h2ckMDWSBk>X!U,udkJc:KH)9s?jf+>^s;b[+`nIWNc3
%VC;k7:h:W'7!U^Xr1dRKM+^^S]*,Y;IK4ENCW,%Jkq)m;cd2c=^Ll>^14<*OAcb.lZ+&%p@!-4JFE<Lb#\r7d<lf2I<?!\^$)7T5
%lGn,#I,1n0X5SM:oX\6'/CQ":Z4s'V,kh_WpMCHWqIn3uOkMoD2T*+#@)$(A\_i\icMp1!V*53%XHBHA.7P+tOeCCpM<Wlk)I`dE
%`1U&ZCO2<8f?CiMLpRj^Se/d!?A:@!ee<Nc&//!G`gPCFE;Ib[(9+2mZbg4p^usGLru^]Rq7lLgPfq/jBe@YioPbt`+-9ShYXerm
%?niOu@a&k,9^?U&=#-N*%)<*N`UBu+H<\$$WmOY,gN@'Vj7Vq$%*-HLZ_<ogopDK^=GsBU!N0Sj1OXJtp\TMs_3^&E=UtM@:0AOU
%#t8f>6qf`op_<>hD,8k5:k%;-oU.`_dtdTs.3N-`3d`M?r7Qh-]EF77!h<mSpAdBXP3`\`?j;hSrNabd^DG7uk)^^Le54Q%(>k?R
%`aOi'!F8Vo&#3LcNYhV6\09_h14$]KDFA81[HbYmBPfc$Ghg3dqdI;GPSaW27c_UPa^*As]m_I$Zi]([m]t19;9Q?30N4A;Y7*OS
%3[uhYK\?cT&2-XIGZ_]JGfXc1bJJ;>+Eg9nrc1NW_=>,"2A\cnAE[_?lBjj[@_UcX`TaotHFOsT'`pE@Nib'g&.($_,BW2/W/W0T
%K(.lmn6W]b22Fj>Q9a=Wo5u-:.&$2#e#1D$LrtkbFUN4"Ag<s0=-%YjL>e6?'KLgWf)T+Ub2L!.9RINbB9/\Q*N'"*(dG_Po`lVj
%N0RWFG)Xd(]FX%oYIpruA5P,,m&#=E5Y]([V8l(ManFd-88G0GZdktaE5.Mr[HK#.=UGo*@^/`N!Yc_ho1XHFP\<X$Jfc;hdphh4
%W[Eh_&'V>E_beMAk#+)7+J[%LJe;dAf?%!opk&a1!Z7cXr<1%m0pM4^C;u+@_#k`e9DJ.H:DVAVhMi\Yj*>lkpB>G5U7?Of?s!GK
%h8_"a3O/7mV69_c#PqGj9lB"eF?Q9WG$iU*!MNUjVYAF1lhAYH>CWYeOGQ)RU2LuJoGo*j,c(#KZ&Ok,C*X#cl]@QlL^$g9#m!0C
%JQ/iC:^=u<Z"4<&(+/dI%UP97-J`]-+i^,oST5X)YVrl`%nMM*g%u>C`6)S"kP+$k#!NOC@SgIt`ZQ8ODEp-f%.3@_S.9^SpH2+l
%iqjS`grJn-I332rE51B]dER!sWS6?N%q_`UcVc]6X$!NQ?l;GKQP.Sg_C9df(]Zgj+fC/pkrf=BKcp6c)AqsUP(HJLaBUrTV0`(3
%6lc!ihgOG'5pZhfiEoSFqESE23cp]Y9B"<1K_?hFA-qs5mGTQkb-je08d^&hahLb4A>O_4$JL*H6FUI'[C8s>6;@j.<JQ<Qqhm-=
%U"`LeF7>#K)]nOQ^dXl?-:$uEA5K09>.j9#m`fifJ`*QO">6E<OocY(or9@q$1')2-:FAJKF5;6WF7If)6lb]LE+C]:k#ppRPTYi
%Oe`/cCADloWeO'LYu_B)D1?/$.5@1s?L[fpXY`J?8EOU-N[C+"B/mmmVUr#I6=2kEU.,@Q%nKXH,@K^Nil9l7EPe6eFr)lP=L`,N
%"B<_7QsJL170*fG=lcYJ@(Y'T!nT3PYi/6*V>clsn>5+lWP"2uLg!)@In_:4%3Lq,2IRaAdffTs`DhXB1UXN.JF&o1-)O(beF@b/
%So5o?@*-,2+YfeO>&p_ODq56jK^`5^F.hoNK?HdiL>`f>Rs6/mXS3K11\4%\70HDAhfKD.AS%R6rH\3ie_Ub/='pEAlI+W[g5aZK
%=2rXk?37r20,d1EFX[ohAe36bk*lXmZlFHu1'C@TD.X(:e'.gY*=u^F\T@mu`cL-?e.NY\:ro6N.u<)/)mg$U-[9o#1&;L/"L&&o
%89%Hi+K\YD(M"eP@56G'WHa0JJG;<)(hbL!3sRRDfGFrAbUE)DB&fP0(Q8Ic8?'N^Ki$n,'p-[Lb5bEP%17^(6!$Wbq-#.kLoSum
%P3OXGVA9Gl/cs^.^'9p>QeRhMj_MJSe,[s+-nT@a@KUdC%Pm2o2WSr;[e&m3$0cUT]QPSos!p&M`M=\`jtr\Yd7=s-:L40G@O;7`
%OZRFtY@#C.FD!f=:p$T/`eps>"lAbIqu$@n+JSo-hZb/h;`pG<96`n8#L>[bZhP88'c,;.RSrQX:dIC!>(QYg*'@%)k4NN%!kBHb
%(OnHL!-\hOhd\3Nqi55]-]&3*W+`UTbWWHI0.UC8#!PpT/0L\M)'?8L,6JI3T^Q9DiJ;%kIX[q/UBR=ILB9@s8B-5FfV.Lr*uRMh
%7"^SoQQ07/G69n:0Er::W<PD.#u6Qh*">0-:jc,rU-+M:e#a:<SON\k'+,7nZGh2$4N:MRs4aFW+3mbDh\8mZ-SE(s&MU9rc4)bZ
%_$hLgG0d2c7?D;;jLYO1geZ!jcMCA(b/E&nR$)!W)LD3&-R-7%W5rBbVWjn0j9bm]%9Ai[*uB3j%Q+[E,p.&M,/%M>24N7o_[AmW
%Yu61UdA7'GQj)S/oGo9a]^N'!l`E!:m;MPV/ZOsGR@q;cV5).D^L(@0Ik^F9%4X=\5$<NdlN<c@!L5PER3&%V`VG&-=A;U2LZ5Qu
%:nA[%5cmn-Ob7\.iYhr/*_VS("@Y^/hOcTiZ7mqfVt_Ad*e3,F9h1Y)rPr<G6->Gde^X.&6bs!pk;oX$*E4-53i4XAM1P!Vq?4:E
%+:g=@:jlf^BqY_pE:M<b%r%,P2%Fr**0.g2n*&'prg`NRb0I7G\ZhpgqtZ^<'<:S3P8-?uIc(%P0^S'9d%NVZ'8IfF`4?-J=b5E?
%f\+%[MX@2,IoD_/14;Xq@*lfF$AN/EZJZ&.S--bK:rGcnCg>J")UhfZ]qn8Z.]"]2?qV51S2,N/aH?8WYpLLZRe5Hb<8O$Zl9+:=
%T\[R5N(^Pp>2lJmK4bBT"r%/9[jA3,&#?r>!I74)Ih(/p]uYlAk8>JkE4$E<!Eh6\N-%;RZ6;JsSOYc4gGE_nZWpDX*WfW#0MDaR
%Jq]SC3)U8GhAp0"5WOT<"jaW3+ABSki@0DcCl1u)JWejH2aCA:.%ujnh`^+Si`Mof0gI$C%Y_:l7G5+_T0b]U3QN="W,,P_NM:eX
%WF1`%c,9`SqUAK'8Pc'X1r*^s_un\0clZeQTX=2/r#_/s/gW2Z#i=n(b7A:^?k-afqineW2pIlNkjC^ZQg>R\JQNIeTtWF='-<iE
%Dp$2KJPQeIf+e"6Bd"'CpjLI%)j/*=pa1qI:rI_3h:LQXL^GD:&]Xr0Srj#.""/IuK8<&;n]7hE<'MOE%`bbpT=r:JVRe5lX[1<i
%!2h3%)WGDj,FM=m4GdO&?-9<PWf88QQb(UNJV>GDI2H&ZfLF"9EQ9DV&(_6/d%T*,J0&OU88lGoj@!n1r2qMP.AOGDKS(!G)JID%
%kW?o&WMUH&aVCHhELfWKgbU^Ei;N9,+*@^6N5(^"DDG?`,-g1!&8>oja#IO`*oTG%'\lQu-h&?>;.*bpc_7SfbcR+bhkt[%E@;4T
%d=ri,N>\YD6h.P<3=W)[_RnjHeL!D5m7O@2&lJ'N?==Ye2H"E"`AJCae6&lV`/66%qpNRNs.Bj-<6W-]O3eqPaKMqD8QaqBF7a^i
%&nNu>_(K/Em!GaL&ZB,mE%0it%a_8DLi0)e`1oXoF0A&$Q`QATiOD[Nmd]1fV&i4Zq`q$4\)lNLAi<He_2gie(^GPP#?PIA&B#!%
%)Wr+J^:H2'5>4U"MO<Be1Tr@#q\sqU'dlmm(<HhPj'k1!Qg>(HM)E_;r::k>a=/JS@u7<X+&EIM;3r=j-Ool5Qskjc8L,SP/c%1M
%b#.BIY'`2Q!,3:RK@b\;YUD,J4fB.!!lGF,\0b"0rH#,@hZ:Ys`8Mil6$SA#n,%1Go-;bs89,s;1nu0bV5FuB85LU%`&jML4EA!3
%["o=u?]0]J;Q/Ga,A=C@;7HTk0OJe.m>+'VR*`SM7Uj[i+38`K:uO3f_ZlM8]At#hXf@[Blt+qO1dZ`hi-/"S^gH,7%8=CU$<"'R
%3?.Dk5p46]pkdT2,Dgb/oED*SK_pHg71bU_BV*<)$Ak9Z.V5,i$7J<:DM[IkENQ5o\qZAWP<&=pVE%Wld*WFrk`Sq/"p#3t<.#AZ
%UPFYh3h7OTl#'Z*M\;o>L!FUcL!Kkbdo*W\^c2[fJp"5V3e2<LTKQOq]4F".1n:Ws[m?&EB.HC)OdCYC(**LKo>od._jqh9322E5
%dpupI3AN$J4>3;hXkc@Am%SJM8$M?[Jq<lM)jnZmPXp..?cA=-`rmM(@mS8,h0PKoW]u(L?mp]!X$mSG-.hH("jje2"1gkg3e4B#
%0KUN\X(f/k2'/jJRI+(#Wu%6Y0`OV["X:'3RJ@HqftOEeijRQ`k=!`X3`2YFG2u1I*N_>dAY#O1Wp@V=D!9A9WJ#]7!4O0WQ)*:_
%R,1">Mb*<uI;%'F)C*%T37&CrS.6;Scio53O(GnD'JbqMXN&\g#pB[`@7B&T*A?(L6!RO/\u3s<D;Zc6Zu4oiW`[OTUJLWaKhHum
%N\M.#;Vas>U#_u5@S8(`&2j`3#^N*G!lb$SB@.lTnu>fAI),Im9J]/[YKr<`fdgGhp?THBao]Bi\U]AfY41L"KF&lPn>:@/];"(W
%NLsAh2,34f3PQ_HJ?6JNX-3Z7HPE6e1:&)]NUc77#\#KQRP]\8@W"Y]K_<@ppPA)sF4X#Y;n.nQ``a(Z:R#CSp@aC>l9k>l":6*u
%.BcK]UP/!^\Q4M*DWR.,FK7/J3]m$`'m-&1d&/6l>%CO>*L/T]4l[PtNU'H*NW)&#&)q'B#?s2CY.CPO.:>7<SN!Pb4V4]_MkPTQ
%,>i*,bF%03\]eHC'Am+M-bIkT2YTe]E*>s/.k7ejeF>o;^fkD16QNiSrZ[e?)F&W\D>kY6KZ/ukf[3jm8u-Bmm#VMTrXN%O6mU1p
%+PK#5biqlm6=XIm64+4qqidn2>N/qh1pmFAa7rbAifY6-<_VEHdV762@=tKmD<&88Ul'D*g!a[c;1#;.VEJ#"N%,?hfhrAnLqg]N
%j@l#4Y$)RV%EWfU#3.`H(a\Q^cTDM<;t83oDid01&QVn"_b6SZS5)4/9^t>S0]t"T)kS/&;S?Mp%O?U'g3*S0-NSCEM[^8UjLM"*
%>7^V20p)/IQ1sBAMb4oP71i!VS0]Mq@oReGhj,co*M>ppf;'+jKhE\._g(teI)ps=rhT>o2UK.I.2\qt<iJV\/.9H0CjV*>>oZ-?
%l@e0Ze>3=MNj$GnP./5")[K#t4bW2l+atha8IWX9)!^Y!ZED<c#.g0m;SbSJaMbA->8[AER!2%4\@jpt.Wgbn1ti)L7s]'Hn2A?5
%/2C45a4ZUfO<7??6o;/IGo/Fnj+A/1#n`7/1h.4Q*&TkB3<B44m?fk9n\1lFB6dU=(5,M.X@BXWg^:b*f)f5n?j(Vk/0_S6&l>au
%pTK[UJHEUV/R-P[q*d3<6%\]Mde%2\%j$mif,j(,Ja\%AJG\;4RhTVc)XXB/4Rk2d<U(<)4_U[rJK\9),77V&kO`ip.R])A\T]<O
%<),,9(ZgCFE5K]kQIJF(`]:'Pnj_Z^!9RaU]Y@rGRj]hM/\i5giFW]Y<dO\N!.Shj]$WK9pLcMk4fegY:;m5g1)_>#L>+Omers)F
%=MeZoa:U1k[5VnN1Ku4%Z_lI^p6Luq>o]OE?O14tQ*PDhi[)C`pIV<>N)02poG[h7lGk`5-*MKXP5Z/;!q+=LM>41X=Ug=C*s[[L
%!uCbl2E>%kfIG(jk?QCKJlG,cj+Eb]UWjS%M=699.O*fA.IF8jBK[h07*.%cg6bjF-=df+fZ1#c7ZFM,0oW^,_p1([\TCAXdd7kQ
%nno-5>dTD>?"qL)QD3+&FY[rmU*hZ%<fq'cB>9O^L$(;^@,>6F[igd:BEP"06D?_$B%-K`oJYLZ/k'$Cb03Hs2g)<9`+=A;m!C?S
%<FXeQkeOOn72Uhd.B/bJ+,ANV$[mB:Wc7.PYUj9Be<F@q^HLc+[q%]cXJ):In8M4s/Wb-hK<+D4TlMl=b-1jO.KOP6(#j3u>+66q
%"?n2TJI+ODCq-&i\o3f1#2p`bT;hB88[hBo2ito`ib7a'G7q%RBeZDl*5I2@Dm6;OPa8GBGn:_SVc>L?2rnjh-m22Q6?jHr<'EU9
%/].V7[3Yup0elQ5Zqt=AE>7mL/]AX&LQPYkGD4?Rg&<Ie+boV)ag`!ZR2;ALntF,,(3M&AASm_qg'>6dkjh.)R"K$?pJXjfC><]&
%NL8-E/fQID#CrI-20Gi6<[$q(P.V.(l%oKcN")jb+amNB;m5Nr4ltLEbtrHjV*l4C_eb@XJaUslc/Ttd;g2dgLB*+o8f*Bf80ljO
%pJHOQ*mE\7E-<=tEjT:"<AK1]NnE5%j2f"11;M@j\JIl-?EqRM!7":%%F/hm3DeN<(Gd[6AjpPaHKs%JK6.t(qPWFS<Oc8[3?9?4
%dNEKLlY\r_prMgc#CYnK4`*eqbl'=$3gdF9NXg\FP[k[0:D&(9+'V8o'sh9hg]ru*%MVU(\UrG-:`];?+R8of95tQ;EAhFR,PB\u
%E/'Cjqg/5607,:WN_/@3=$&Ch`W0)G\EK)lmD6uCCi`)Z]3'J0!p_:<f$H9b93/=\6hi'c=o?=*D%_]KE_sQaae%(d!-K;i>1MUW
%M)Ktg:h]^#fW&LoV@'q(WT-ha=eQ$i(Al`m<fdPn_u3nN1r\>bR&tt3n#4AUZ'6XY($i8bYt^]9`&"DX/;mcTYf3`d4O+SfP`LJh
%Tal4!'W$`i5+UD9IWZqmHH6m<GEo?'eTc=b[KHnR5.S#qS05<&Fcte?BLEYjc]JO?EM@<)]kD3?1k3osiReW@r!o7o+9$:+Op:j.
%!7aM$"Z5'E8p)@[=]@3c/?r,7`IE01*\&AlA"'qd7G*1tIKFHV-ZVM=.!,Tlc`edCY`9CNb=+FL'p;j(:oesgGRi/PTnkT,^j_;P
%'/VF(Bkt?/<O7J?<eG0jf^k$<Sk!$R=<.at[7&KV&feo#&]EPf[YCb;5:EL0;Gil``D9)B%gEf:h?1I0247TA[9:q@][;P"Y#J#:
%MtpNn6!YTjKk""3fG+*u_27BJ$R7'/Qk1kUlRV<1--;Zu3/;.fd)(_pQfN'XpL!WEr-rW'cn^uTii'4/4$iCV;FmN_/QUuGdXA\W
%>63K0jR8W;Uk%g`=n,!ZZ6Nu'T#3goEh1:IPZGPOaAg562"hKG<;'G);!]\nZP@LL?JS+7WdcKV;L>Q[PMYTkMJtp:O;cU`bm1"B
%9n1EgI79>qC2Ua"rG>M4[>s+lnlWa>'hA\Lm%iI/!(H]?W"8,G;1)TjDDbk-CW'b#9$SoUn^p>maXGVmb),t'1edZT><X8hFm\N@
%0U--GhN;uu;T5WQ"od#c#\4-KD@oL5Ci/(.i>&(3]n?p#$$NQDW[.>F_)tL#I%$IO]#*'lEFsMc"G]^WT5?3mF1/-jaWV?VHE\ZR
%"u!Bm+Q-;0#ImFdk"2[M^>>Kmj",I2:#/"B4sYiZqNPh"b3U!r)<.)WXgnX-K4;Q`3mTC]Bg^_qSQBT+I433u<;IN6jX%_iL.89Y
%8LqIg\lgb4I9gQd%d^ba6EmghZm:O"p+Y\%Mb7VUWL[EY1[d]kMg9.o;/kko?Bmr"?%d'7G<&O@e"(iDQHp!q6D!O]?M'c@;+e5"
%4%PW6dTQZi%o#5G5oJsf5`O.Z+a5cokG#!!/>5m]4e(L=?(M\g$=Tq82!sWhM>P7EfoBpM)<WcH%?4/P]'RUWpYDM?RnX[4f23b;
%;N#rNSdAU2&s.#\GF%SZR(GI]Z[ibEPD$gLfk&26)d0."h!O*iVVA\<L7hbN52hBb&M7O1l]dF331?;lIP64^`^H.TR1dEuZlea[
%7jufkTq5$KjgN,_gST<t_Ijr*o.$YM%bj[TmV++)`$?"Zb+P]?e=RVii_%mdmR`m:-o?7k2I<)@5iaYQmTS1dg?&sYPW;VcYCW=U
%_\(i64lu@Vj4J9+@km9cb"W&8I$")"Tj&m*_A+@]j@5?i(^Lik(kL/]g(Y8/Cl6!0dn+IZ]GkZApcfqoP-@WJZkR))N';B[fJA88
%mA]AlXKNDV;=UU'"3Q!3H`Q^;q9g\*L7[i_)1&F7d1ZsiU)K$RNr@'QPm0!C$4ZkG'&9fRrp(k+ND9YUi$V",B)H`R`lp^?OnuL(
%6%8eJr<W=O_Zha3A6l)<:#GQ"&okO\l[ns>k2RLOdc`E6d(.@tS^L.t7W;<or1^J^9_414Dp2,k2+e\"/G?`0H^6Y":H!A?(>I<+
%%Sp,7k$UqQZXf5qV5DMWrE#S^h(9Pgcp!IC(/;3#JUC66$Ij3pr&Mo_h_"kXZ[kF,?q7^96C3E(QW"J#^duT":1s%tT6Eo"6'n7\
%NqpSb,-f$_Jh-u&qiERl2<"o[$>%?.;/d:0A4<bgbV,obq2"=rr^n^[,Gk2g1`.*&Xrq7GpKRA-F[am-$9paBY(cA1TsBZKio-TW
%8[##@4gW\+MmaN`Tbq0tA_El^X5jM?V1]lNE"F&:j;QLQ2S&\`BTeFHRgT[D"WkT=&B&g0.1Aq)UJlmD4+DQc!s,DhA6'i:BR:G?
%CUj$,Une'XgCG1`ig>l?Nr=aTot"arD9e`tb:5[>3A*<l$&L0=/1>_fT"l\a=.obqN7SR0b.i!Y>[)>(gMfGE5a!>P-,bZdRCU,<
%8UW7S0KUn5]"9sCP"2r:6b1,.F<Busg2QOqqG`I9Nm/#&%VZ)>`b3./?A'EDk)%?#%Qc^N`Tt"K\1.ec"jj?>%9YpR7!D%#SjsgW
%\\IM==X)2"G>%=K42V#g@hgVI,,.%B:,@U8MqTO)*u/@M;EPAYkm00OD/=G+f_<N>)bkZG0FuNodi!.CBdSRj/Q4^f/CORr2hskG
%.GXU>Otef!W9d^'3_=tafEO6D]\FW+7Ts7k%nSX`$[<n%X*WG<"8VC,D'U@0iU4Tk7`u:Te'QntCR$JR\7k>4I^h^4nD0l=]:H*9
%^Tm!k@lG-N/sPBc:`$)J&Z,Q\<,3E_>L2b1!j9c\7pFH&UGCj:@(5"Qfc)W%MJ2WiF-?;dQq#eA!#WT-6LIT7/)W<4-=\'ZjhmG+
%]OZ9jPJAD=>n%?c$LcoYB,i_HO\7dSpLZ:(^$Z5o5B5+s62e_1,>cT7o%\<k.8!oTV*B1B@-_We<<Peb/X?<=6>>8"-4tXd#uq>"
%%*mUHs8DEcT"p!NiP5MtQ&n-G+$J>6=Ma$c-]-_CeA*=oAV/=s,(T&L=WfVG=\E#lG.q%,;pmfZSBXgfha*480t<J^EKeFsQJOtW
%]knja$Z^?S6`,%?4Qmi+,CCu1>L?&c8o`:[3Z1T9C18?Hb#"qCct;oR+Zjig#>/q6ESu(e>cjduG2Yu(GW'-0A#>tCD<>/q\!HGl
%H$U1KY/.H>aSkL?!=8ORQp9=n>[KYm's/Ace(M\i8<&)]3e]/^qsRTi&]&e":0K8B,N1(TY^0RQ@Uln_LM%#0?Gh"c(2#a9.9YJ:
%Zuk]V;&fO;UPk`G_uCsrIcsR18!i3@6G(1#,.eI<j*dBpr&7hon;LFsinrML%kG?Teep'?E(pI0P"uFe9aG`4c(BSq.jmF<1ti'K
%.c;lsC/Ie-@Tp?:Lm*+<fcLK/=W%[ck.(J5((9-QZRE^4nE\tB.QlGcF?AV8$I4?GpJbZg"<eo%@e8sM<HFuf7Go9(,FPI)&8b'P
%ZPV$@K`W#inrc7VUFSF[7HtZtIPH5J6=W)12OtoSORhWBGeY-VJ+H`02!>p'78i3-3lhI%(LAVRHYV+*#)a3O?VVcN7d%5^A%Ch^
%W_tmpa1spYd+clU=gQ$#Z=2;/52^uO-Mskg^*[)\()JQ%lP\*53tu,kW?_(h"a56f/+OgLPdu/e3a8Q-Wq'=B).hC1ihAb\_j^\h
%C1Vt`9\ge^C"`uG/JVVF/kWR%4:[e]%"trefbN@l;=u]a2MsD"Y:c(n.b!OKiFauhm(qm.cfj<]'HR&4KD^(S;ZG5AR3,78QhrF2
%mHd.,rn(bt<$^Eq7_=B!MGsd31':Paq*%ZgbX;+)"K+FUA?T@WNP?n@932qgnj/;Up3ZN/9?be3'K9`RQ!=,.7AG8'#9m`FG<"+M
%G!*]#?=tKYl:%&!XgkiC@B&gm"%5=P)U2W.3iKe,,0)K-+_h>ieE0]0mATprfdED>g8Z`)jsl8+]K"T(DA/FL+m>kg2+%oR^6&Ql
%'^ocp<`u5Tcg09#+"@CAVMM^g:$PD@K;!>QPh`$O*C[@N]Or,J4c7E\3B1_&cdP3ebfmtsr_a[*%/#6g`)f.,E'B5@U2&YO=E:_S
%@gZt`?QS#AITCA$1i-i7.W:SpS<=jg00ce0]'>!g'T<)#B%RBGY-iGc0UkmDQ2PYa@^g,VKG+#:/</+9VXCrDoQgMT*s)J'7!b>(
%G?)(g2B<Fu$Xf^.Q"d?fAM:L*k2`+Wr5oVUNom"\(+kY42T:\$]OIJJWnbWGc-e\-A5R.`MK(,$q>ma0BKaF69KWGr/em>P=niM&
%%!mo>,P+419m>s#WA;^CE-8R<]`#NG9onC@].gkRIC-4WC'$';L0H^+pm*/+q8[[p+SIAjHu8KR6-IX/"!I=!0`AMMrQ1.J(rYe8
%G@:DLQ1NcV@Zh`q%8WhmWe)Dtf.Ja7:'#trh&-Z@&B:rMUB'H!F)BqM%_j_uHgZ81&B])&.4Tpl,tLV[O3lQZm^B9Ca;t%)$1[Bi
%\]>C-9Rlo!fV"eXVNDk\O]kkGH[E$<q;;19RA3a0"U^krk<]JAG6c71Hh)m=5;L8Pq<tF.l'1)?TBIuI0Op6lj4UCt7Qei#8<Ihg
%&<@N*:@DNd288u$@GVQmRBdt,.3WpaYp<@PogYlQh.,2/-n@\&<_+di_kuM1%hqJIQ=69E+j_u4(b!llDSPS7](</b'7:/0OH)DR
%pC*Hp4r3[`YLBj<7ncYNm@_L9a=;g+Nuk36D<r/JN>k'eDZhtL>cf*KD5AD;],N4d#c?>O2(tkh'B"%7;PQO,K9FYE'?M?[a':OR
%Z,a;aF<N>Y`%$n3&+R$ROAZf]SI<]!9?A%\SdLmB5PX?IB]<Io'[];+.<J&Srlok2>6a_R(*'rZTmk@+Yo9&Oqip)i@0KDR6holV
%9&!*9%NTs5B$eI[Pg\n*7)2V)Bt2KC:"5/!oll<WI$kL3_eTCj`4\HSq1kW@TdUPP-T,_mi66c*"uqi")',CBg7HiIitNH2)Lks-
%Dq)")gSUMHFC45qauf5i)galD#Mi51;>&Uo\k8H,nMu&GkH=R-m6V@+WEoB]RpM[27Ila2GLHi3V9HE>E2T&m-=oU^D9lP^n7IZM
%lo(\ae%-*^Ps#_n)n.Z*0<^5`[Y)El.sHp+?g:u.LBa$,6"d09TAN/P<^6S$+YNDle`4IZ7j*)IOciMW:2IOG6e.'2_Zj5MYL[3E
%]o%)KSt#`PQW&bi8h^0op7?$M&45']&(>e/_U0_2d@_PTg&"0IGK"Ps`!_p6KPPD=MX:aK+lEuLK<XL.lFh#Ai-sS5OYYT^W_lJ-
%&KDnu/lL6Cp(<9p^9!0feq1ad2SboF#K#bM<2\PK;J18\g)F8tPh<kUl+uBLVo.njdru(r%sMNMH$F?S001XhiIYBRG+YE!rT!qS
%='@0T2Feie:8j/pXsqam6r>Wm/8NpGJgga[<3<]Bo:6qkS^SkOF!s45iM8Qpl\@H,HAoYom(/.24KBmLD<KQ=E&u:<?_u88@cQIc
%WsVJKa0(peYM$2E_/Rok'&aZ<3<PE*Vkk(F%Qqp6kJV.Af;!?ACO#DuKYMkc'^7DJ\Y1H(?<#K[(krYe+p]O/Bp'=!C_nt@'ClrW
%p.GFo\G6GV[`_F:T0<M#[cRmgj,@Zf*Bt"tkp`L<`VON+o1"Rn+5_Lfa/g[kT$l#mL)-EI`V)A81d<!QC;r5he$Z`hD7&AfRG4iO
%=+f0B)W$gTE;*8/p+0`OZk/\7*LG%rKrP\>,_^D.@jmSsY*BWLX2UW1oL8ALQe6&A?AoT??D6-kGK5+]+amGD:8)[^nnm[S4-\QM
%J+4Kj1g\5R/5u;8+`I5M0T?i$Da7P@>qgdWXN7Q*TUbholP8Y4KB(pf_6W9uc4>Q4Nf6GOeDBi>/hm&)%8ieor$=;%l(@K:$9"gf
%(`HPH9X.k0[nUm`2<b$Ngjm,&cJQ"OEPdVr=*@6kqJFBNJbK\W`;QY$D3^$Sa15*=WaG'_R"4l86`Dd]YCgGCX0OB.F[[(FLNGIm
%7Z*c)9GW!,>t`=]f:eB2Ha50A"iH&9m7$L,m\-6VF$GO,T>t8"/\O>b!rm#3i$W6eMcTarXRK`@IXABV3,5OcQ&c65.`@N7BZ52G
%GR[L5rq/9AD"BI'O7/spYKs%(`(fX%:>*^rLG8X$3O'1mpTQ,)%HqoAPKJQ?7D-I<oiX>F^8!R"K5uO_aWoScbiaq:UoR1KP7P7W
%8icn=OoEFWV7mggJ\c(e@aT;cV@"tfG^[RhjXZDYE'YUf)_G=Tm'e]Q>'#$WkUM^jdtBJoSuX'(!!&%Mj!M*LmrIu8eXpm-?d%WA
%fOqi1ZM&/YDbpB(s,YFR!'8OAoH!2DL=uLDoWdrZ,-blXE/COEk><]LY`<a^<7Q:*/X-e2\<jEll49#0[FI[%Um9'!F@.[c3&3h9
%G"5:3<k>$\QQ2i8A4P3^ma,7s);gSTknX[4HYn%&RhG;Gr\R5NbW9,/K;o-8C>u6f]q>pX^N[a4Rn-D"GX1_V1etk.P$YbZ>"2\8
%Mmsb8`;@HT+16E*n%a!+$07M&9JZpGqp2*o#,5p:AQaW+8rVNX/__?Fp4](h"p0B(13%EDc>=/IaXL,P3mh8kri)UdN:N?3DC2Fs
%:F1rG]PW!<3)%mjU-BXKaf]e/,Po!]r8dSJ8b!/]@n!Tb&*T@?AjC*dZSfBZSQ6GE,mPM!:c*=Ol2ZqcHJRI\PB,rq56)Vg[[nl1
%DUI3,7$D%C"^f$noAP2u,G[dfrl!L2$.D7COHhSq`:N`,<_VZa33[#tft#<f2G'X?EO%0\l.U.dA)BLAIO`>b3eqZ\,N8;s#,'qC
%*m,D(XcTE97)Jns?,&_P.,l7L1-Hg6B4Zdur1P\8Oh^LuH>Fr=VB]0rZW+TY'jV9MY1nt2"a.&bIqo$B=\n#I^n&]56Wn.):C1lS
%kp+T^8_nDLfB^)di+,+B'_h3pB'e"ORRj`P\T)`bYe.%P3n9$/4\dEB,L.ti<)81a>fE:'OTh..:EoAA!4#VX8SVs"[a]59\Pq]6
%Au/>r4Yc(8M([m@JZRN]DV4;:QmPt(o<g8RqU#Nh]%[6Tb%`KuQ'V[@DnbuGZT8&0<]l,PckWe1VrC#%CSbmZCjD*='"eZaEZ5S^
%5Q7p.8TmRtrL9keR6E#DE.ulGGl>-XoVSc'<U<AO"l2s!^0iH4JWotWBf+R[Uu?d;B\j3ih7N.d-,u[gL<Ya[mi(1V[5(O=UnQa:
%,="&DV(CGO$[:G\qV:MH=q$T-raY,K*UTCs"5"ro9<Os'.KU6(^?giVi0Rcjqc09cYo]pFprBhX,O^E>UV\ppdb5Jpj5IG&')3\q
%d:0!kD5-[8Dm&k_\7,QlbU6&5oZOLKqU:G,ROQYsO$j:#XmBDu"F,nW'kCQJ#2`\Y\KBX;_sk0PUJXUm^+HW=r$(4Y^Ds$am`Nqq
%G@&;CBO50pEc1l"iOn8Lj&a,(L*%\u?b'`kdk482a/42_o*ZLn>G!=!01k'u38oDbbPR!c>M;4qqDUYSC#OH&hE#[>bS=]DBgK$5
%UPW(XZ;TPBJ3JDi2Rc3-qsCt?a4mm446hX<KPE%'(hhkt!>/KA_P5H;[Aj8`ZKu$ls1<(ErENZs3^%d<pcX5Qpb8g_*&FC?-ng&u
%;]E$Hr-4n:gM05.^1Q9>D_M%$dcY1<$=4:$j.:E\0a0.jANjsH&YE%AR,>@jK/Wh`?^Y@FjT#7?+59M4LIuPBXE;o?p.ml(Sk=1J
%m6)I9SHk;Z3J\rem3"aRE+1n^Y1Lld;]2'-l\I^S/0B\25kBEqLACBQ>+6,\JTju/k!5(aC+"><KU<:^O.0neV$7:s%t=mn_H\DQ
%6+53#(]EqsJ!]B2V\,IG`3$r?X_*T#ZXclEX`fYM-AhIA)5L.k\:gQ&prug2"i=4uiT0?e0+38P#6s'0?Z5K0TV\AI'1$c!pLD..
%((0f1Y@u,PG1Gc)aO]):Lg1Vlb[PRR0/YD=:EK[3VrhrPZ+'@=o6)NU);=*tNN07.]BGmEOml`6lDF]T,@05JU78rc#fbV>""k'N
%k][p`;Rjn5n:p5^g>'u$<_'n*)?!*I37P3@LVhG?O#3&;U)bJ?7OECuQaF^H\Y21U*lc.&-t3)_mA"LE%^IOq^k!o4.&pB=/Wm%c
%44nSXJU=b6>r>7!LkS7&JK=M2mm+^Nb:MIC.4Gs/Ct_GAImFSB'?(M\,*&qLJ5?Z2\nj':j)P9Me(5g]Kc[.md%C\:0"at4LCR[5
%DEum"?D5:nVV$Oa7CXH`gt::NYX#usZu:q0\#]igiQ'Xlc8p?jpHrbk3L=Oa\G[a[TrdhX`ce0*4WOn*\jppH*qhuiMNipse!)J@
%pWk!8=Nk-$rS;Mtr1EU7Xp9<f3&7N2XJ#i-d7\d,jdtDO^'\0P_0rc<s5`CcI2n#\j.i7\3MLqh*DDJ8!'SHV`7S\q;-e$'#(^Jh
%U-'EYcVN:aLDtfRjfV.,_cDCXV<lZgSsV$9SHr8qlX;9A!4kF.XeCGY]%4U]5=>"L7SWr.,kTN^H=19,nF0),5;a0$??8pX-gJ4h
%'U/eo#REck(QO@%Je5se6OE4)N3]BY5Vd\("CAIq9tm;AUmKBhZ_UQ?1`."`694P]e;]GVETI'T-*sE9]p>c:'^8bqLg`8qQK*u8
%A,AZ(%k_P]a;0WoMjEF=cpcP,HO!iBKN4S$//etS!*6.G1<bfBaJKCi(Mr>!g/&mp7nps+M=9T'2&K.Ln$(*4KH+\%!WAY<XGN?)
%j,.<;<f$sN\V/;,-3_#6ZKN[\k!!K@Bj$Q;qZmMSIuGOfKdo>XAV,h#2MrnG05.DlkX5e8$FOacLN\ta2ou1M/H%S'.0IFSqs1Wk
%FJdONU0K?2fgO]ma&q(^RM5`0'%0a9(<@UbY#IhI#tXfOLIDCj1D5:Ui/NIeLg8,R`dL/9,$8rXrZ@IG@+F("@?#4u-WLMA(F0#C
%Xdr?$5RIuXLkVqbK8$H?;!"jGT]%X<'ih/>m-A[TLU<3UHe-fD,Pi'<8VC8:)IE<Oe8VK-IL5RD,J-aWRUb=W_*)B1k[&?#g!i.9
%1_E!>jC<@*ZiR/p9`:_1R0ob;MfT$4C"W"=,_T[EZ5=f0Y$rtp?l]dr?Ueq?ZYH.o;"]h)\?@pU"i6`uf.cn!<3h8<bUr,jn6=tC
%>0$p;Gli&D`ppM7$,DF@WD&95=O^r9XU[dfMQM%-buYFf"IHZ'Vr&h0d#6VZ$%qMUV0q<47'bdg!V%\m2ATZSVX&`.G]\"T1_Q.r
%*UXf(W,7DCid=/(m.oi52D,B3$V/gF_1Rf&!,QnJr>*E'6@%9!e$^'&m_q(%\.[NG^sSeU&Oo,^T.j$6/)^`/d2EqICq=uc`;/%9
%gTC7UgooHti2n=;_.Ch@Q9I&A!W&_Z6*^d(`@Q"[0<@I@6DsF4nU:A]:1V+(Tq*=$Jcn_Bp%8s_R6i2p9&k"TI9B*N908h;>STRJ
%hm.#MIJm8H+<aZG6;(U7bRS@7'un@3EetlI65iU71mM(n.[4/k;+*?-nPkX`-ffqV>`3'I27Ql<=Vln;ce&bh>7a:P5QhSa;0.'-
%(2u$Y.'gmgV=sA\pigPEBBG`mPKS_F:I!ckE"#50A-FfflEB\Tc?a6F9-JH9Q%fP'5fa-,RI8:1U%:9:LOjEN09Y_o[t+`!Ln4RY
%hE%Z;LRSP=Xd\RLb6g?<%JeMM,<6c)7:`A49)ue$lMo%a>7H_I"=ORHm7G!/[*9_sS<^n%/((=:Y(sb:rn;[DbUdO"W`Z+PLm@E>
%,b]`%lbZ8<64`KLigKXE1lblR$;gbue/\FuQTF0U6W%IrJ5Am`<U+ho-pqTNSn]Ln'1ogd"&@8j[=lS]muMkWqZ["U$e?aZ"[u5H
%GTUO%U-UdBW!],;Qe9*IgGoNg6#tb`7#nF3@TTIX7qkPua&)CVr1e@lM0W5;&3?ZK0I*P0n7CAV"mVOrYH>]78W..iQ-Xg&q>.QE
%+Ygon`o=S*PdWl"HlBes)LkomPEb%on\t<tm>^aE'`BLq;'.;]aq-0?ERkkin4NqFq&&=$oKf)!nVtMKN6ZqMn)4=RdD)*r!IXWK
%?Tfh2YXAB`b9<-EO.!aYDg.TAV#S=/(&pr.8o"6$r$XGI5hUV+?5CFL_#(:c$4)5&?JQ\`!ZiYW51nH#\RO@:c.Iskc'qoF*F)cE
%XDL-B9a(gdA1WTD.cndTBS6fLGt=s24>\^f8`-Zf[q\75GNLis49NZJd"3*"8'7gt?O6b5kXTMc6,A7+VioT@n+=j.j%_FMC(Un\
%keb<:65X\iEdTAhL%oss&'4VB7Pu$-,I5c0-,7"E^F"dE7^$n5=",.i0Q[;H(A^5B!gdW(jepK`o[P&&e@,gM4WTJ7e/!`C24>E.
%IriFGR&+@sOT?%)q,[jccVY<F3'h:H0")Qa5^XDcm^,iMFm%_!!-nP+MLW>cDO&AlD%nVIX[).Vn.ec1pCgf^C(\VjU\mXGjS*/h
%aLj-gmI/[(QX<$Lq7RIA=$Hc?98YL[[iBs^pa]ge*kCm2U729jQX-EUNJ.[&1sa+3=3nfA?&4Kjhl`A?!Npm%P/Y1)``k0H_-$Hf
%Y&'53.7eooD-4!?,M8E#7aGSZ)+*f\(JSs;&P3-0/o`u5+_XNn/J>+[JenQXc`GC)l0O4'rWq[c#:t<bhuJ7JdJqVg\3KTX?X=F;
%k\e=853u,W$I-:4i"5((+$F:V+>bK!nADu7LIMcB-G)Onr+TTH^:@pG62k$H9CZ?5">\3L*PDc?`/O:tb-*c#7#3`lcr*GE%_'sa
%ID9+D87$)INOCiONSq15oZB.20mBjB25npd'kl5k+ntIYT.o]&lfF,)87i<NK,&@)^TP08'n.)5Mf"cW62Y(7"qU&g02H4jLl:.q
%n'>'bRT?/e=(AbM&]O.oZPki[9W(MLaTn5EfshWGC&8fUEfohBb;Z.o<0;9&:@tLC7OFNqli@nCHR=0>X0*G]A;'undHg4"1EgL^
%F1l5M^mOB[<I8HA2e'IVC^%(215,,$<4mQ(r4!Dr;)(0QD)BuDk)01"q<bed&EQbs."RlSbDO9k8)jr4"+c211ZWFL:OjuA!co:6
%MS52!Z=Q^<<ouub$<ab`-`U>`l;eGZ>h>0^]D"ueokif,YGLYeFtoNpaXU(VNB_+S*\JTM@[^!RK4MA6YDS:?H="p4=/V*obHI'j
%=-62H:dY?`N?!k$NaPc2J<AV/8)9IG<TL[Ro<Q>I)Y/emj7iE7hha3HSb#_FX-?OL'k>cGNJ[h:hU$$7a"K1<1thf2L[pgX9orWM
%Ul]h+FEmR^^cYbR-aU4IqE`3\-^':Z)_3$m['>rBG""VF0/nN<dZeaj/<eP@<b!HmWZbN=6s'U)^4&Xe%PBZ4R.c`pXB50F1U7B,
%U-a[&\n]W7r/+Bec^f?^mI"iq<&2jl%''dhF@%Xl:u<$Vn0TM]SD&fITe8Js`?A9m=qh/oRMJF3+H,'>=0q[bO(=))Fn>b=UYJ<S
%`If"L14"+:;(AnZJHi^(5Md1sp?7A]4XMP(;Ik]<n3ZAaS_p=MHkOD`6b1,^cJ]:9fV>#2;.Si2*#6&3IO4&IIR`R#emJDWl9I#M
%T&kV(2-D*#\18d+13LbmZ2p[T0+]-5!\d"D;GG1^`T_t(AVmh6:U_#V)XM?qp/LenfdVsd*R/1c4l-L\[K:$=pltFqPeA-2"kr,)
%Ze?B"H=Lp::et^Tmmo@J5Y.JCM?-Gc/%<AKNs2Rbc.!un>Y.W#G@)Y!>s+e56(3<PCsPU7WV`DTfTfJJ<fXIk8.qkHA!Zm4?**>E
%BfW"SV])QC=7$;2:n?35(KXLE\%,F;)=99B18-rGl2t#ZSn53,fq+o*:oES-9C:L2C_G(G4:ek=N@*2kMRb.e*`9#uOedCq!k,AP
%INKQBeK]PIM.`C:hOZ"DoVn'tZ6"ShP'Cs<50@2Wd1Qn*<Mu57rDuGRV)fZ+cBY1`MTf?T%suo2"5p#<IL=&R/:/;eM[!$G5KLd)
%BmRq#NLdk*F#HS.../fCX+,%,hVXs)fIp%jR`.Qm+d"g,j)>T%`Jo9VQt!,l&aNB$-K5:Ol!6fdAdMmHlD9M8:&7A93(dA@Lh3^D
%G$[&e5/h]6FoSDOMI%#jDC12FkdBMP!TeS[(#_j!2jJl>Csf\p%("13;f8A0k)rE`X]X\5W396.=T0Jd2K\bc)X=amh'nVMre]`$
%K"MZfO-PVJ(\AB4Btga]lmgf*^:t4s(FbYYX<^mS6^:YefITqDL=s/uU!fPH/jRE,,fe2L^7Q"<b[Vk!,uD$8&O,CjGL]6]H2li`
%C$R`!?2ttidIGjLBrtcAc^d90;YN+O%;;i7>!>1h;%6[4&j/Y&/@_pJKrO&Mo,tS=Q:Ot@7].Gd1'bNhLgO9>Ga:Ek"3iE$A3p5l
%X&oK9"pS-Y[bBo>TP/=*%q%imU5&htUTXRLChqf6,87GG=ju0Y3c.?3fE?R0,r%TOg4Gs'LK<ke=UTi(irNNj`ri_Oh,*CIdGHt]
%Qf/PF=te,@W1"9p#2e"tA!nh$EVo$[D-MFB3$*1o.#>B2YGF&tKT$I=#A+T(G["J3>^d#1NGo*RXN<Zs&-^S;YIs#\;8amUbs-',
%bj:\,S'c?Sri$?'V('(qT?jm;NSG13>_6hif5#_3M7BA,n,_#MW$`J]JWtFsDN=npblo1GTRG-("hk52B7LMrBH6e5UY;P%gpW86
%F45S23SX)FY"15$7b>'EG/X[eFBHh+`U)IA_6<MIS[C]Kf!7(X!$tSjj_*3Bj2$;3/$t>.IImEK&#9Qi=d`[p]pEED,O#+89dIGU
%5e)I^LHC*VHt:&WVYu,V6XIe%S#^uWGH&.-/RB;&&drZ*beb.9[+I'jWeIJ/$bZSUm^,dp5ktbsP;ClQlnhYK>'`RFKtUdX8dZc+
%U[5&0F"4:`koeWu\eJA:"geWrH<#<HG&I"QTOMq."Xb#SY./.O6*8BVD?"`P?lb`H%%Jt8V:e*Z>U`A5'Kj0`TBBXU<)k:QH3OCK
%TbmA:g3S"(^sbaLR/#%a8L\30m+l$_Ho1O/0/f!,#:a_@NX/]3,)jU3E^.'H`LT>+KPk2>I%t!;Lqjq_H3hljB#c(QLGL2Q^H<\H
%J/&b^2j!)1kdC\G&Sd1G:`##/9UA;!-=iT,&f4-.DMOU:4]=(t<kL0[d?Gn`]\$9$\"kWdYR)[$E+6:ZZF]r-5JQ@DrM_65H(FL2
%EX+#faX(msYeicLd.Ya[#54c+3ro.QP615b.KaGq9c0tsM'lkq]?CPo0(@]n#j.LboT@e"3g-sIWA7cqi>r(BBUD<f&,Dk1nu<cS
%P6-PM:LCC_NnODP.aMXp]Vo2"9<_464X)0XBfj6WS2XC]74B[hO&Z&3'0\i#Lrq6p7t%8j<i0OVXF1s$</%*+g/S-p-O8]Nm!3QN
%pX-CS,\a)u-Jt#HYEu=:O(K7!3eX]JEXf^Bb*TQGinG,1a\!nIBH[omOkCrd01m1#,qWB(M!U\.qt66f5/\ChIY`O[i$?9`_6:@t
%.KT>*cPHZmYTl=&HnMW=j&*a'AP-QD4#-Etre0h&FN-.mLqZMTPj[^e7un90k%eq@(KY:iItWJB_KhDNO@=%S'G>44$2W&>C]p2>
%.rE3$#8bdrf--RZ_*V'n<KRiP_s7bm0X^O%JWO_EDcDaHHo^f/"kS)q8[`RADa-/ReEaBlac6+LoE6)mbF<l]C)3:r'#b18kD(hB
%/_iBB3H#"egF&WR"?IVQ!,s6t&7tKL+SA)+mq!NeY3@`T1X.+sPmc`3#6mf31;BG$#[6)l[D%YGD4Rj+jhuWe>Oqte#i@c(j4D3a
%mMdVJg_4Q&+"BCJ>d@'KIdT?u;eCHTo50TS<Dni#Ye_I$HOI+[<T'J=9&Za$pml*Tq2aErk@f9V-3NgimmZq:0DP:^I$"*\_JEEV
%/aGW5qF]sNW-NA*VHk\cKQdDLiCTPX\GVur!$X-`K4k(q`",[j3;<ut^uo,l9W$-$]a+ae*K+cf#.j,m5CIn.Hj?rJb8qfl\$*B[
%)Lcu_kS1ER@t`'`B[#)+nTIQVlgp1`E,8#*B)mDi&0nV8JEm[IV5'4d7'op?/`hKM>):R*A"[b3om$r/8b0sknH-1'J+MZm.7PZs
%2RtVRBn/l/ci#a^)@r#hXRdP.UJXYS\-uQ$FAKl1C+)\aY08.D_"VObETfhS5N_!q#CTpp7W&EAf;0-&g]FqL,-9bE2Di-[10hYt
%0m!&U@qafK1'"^!@b(S359BLAkUWF#ga$pW)CPs7+k=8P^`Fj9RCV'D3g;Pmh!3WaID#g`P[[]"S7fJ)BFphG$_4:K'Q;t0:T#%g
%BAc4.\G>&p\4I`-!;5ZVIG$'8adW3?Qbn"prO8q+@8PP8r:kT[[&+<769Kk.&R1D)<Y_bd.88*.JH#&)YJ\.i\krlulZkaL[6ta/
%!RY0TVjK`W&"=;P*sp7Wa42AF4-;EM6I1c]h8*?@?N&4=a7MTgBqO<PA*8RnU8*_IH@Tg_9pu`i8&aj7Q9]'4QL(U7U%kG0L';mp
%f2ap\=raX[D:=7H'r,DRQ>mDLF<3c-#[:PN#%]?C^mF$6QOdKig$!q\6'H!:;]<*Q/*^&OYOkL?R(3Q9iA.!f9:R?uTeKl$5DP@]
%)5SV4f3U2:Cj$NH/Mp569[mLU8ta,N3E<?WfKa0X\;^.H:ARe$[*t2eP*XZ;=r7\.WERYnH;X$*\T*PF@i<Q_N5AmManqsi9HX7u
%,rogn6cVLooAF'nOcif5T*cqg05CB!#@qBI1%S,9!KY`#.J!J<_IITf'`L=Bd;3t)jo1MHML)_72iU<R"5mTW>'p0-,[W\-qUsF1
%@3(gH:jg^Cmf>S2'sL$P4!]78'"reTr:kHEf=jG73%"J:K&W6TYsSQEI^+b#((D!jKq+?`3b3q!47CdKI&^q:lE?,u]92=dr9E;F
%8%YP\'Lj$SKTN=\>Ip$Nr$kb4Ru9K!p3MXjicPke;&CoXJ5*LWPF+"%0Z1AUQ_SuP28k]PpNN?BnTNI7rNHFQ1hqhbh7!J@B?2f;
%lTk(]Cg7:*g,7>eW;%2%7"t=c"oNh_rt-=554;\T<BS>cQnW%r<[5;D;YhL)IJOA7+VLBD*ZXU>-s%qgJ,%LhJD5&N"i#P.ec3Hq
%hj_U?s(/`IL`]^`SP]rV8VA@D)EdTR1gECDW<J$0VHj8+/fM,jjhIPer&<5Sge_C(7=Y#gVN2<ofkX'd>H'p[%[OXtEbJ)PKUj,]
%8deK!AY[LF]j:?d$sJd-L6AG$mGU5Y-VhQ+5aM,[_&=,ob)>m!LZT>).N:$!+Q*g)Ckhc1($!S_D)eu3B%c]?j&S]fFr4VS86SKE
%f+KK(Ou7/F;YQd$>pZ.EIXH4E]T!&>k"a[^l=tFIU!Ya!A&)C;fK'2^6Zb1Gbo2`F"g_?N>oQIfC?Lnl/*<su?ics)D&!s4K`)>e
%C/?`oYrsC]IEJq'0as2-]i'^OW-V@]=^[c7\R=470#n)W\!b2Lfdk?pO_BFl!j\7$@4OR,Qo_eh:QsY/kR8K*Mt*^.moP%?CkPl^
%:2K:sD!F@96Od<9X<5\6KGPIm$n_^DAkS'3KnlZ0jHtQO-Gm#(@C_/17T$o/eLF#gcirrmW]R&L_RJc1SiebNZIrCn]u@11-u2<t
%jjues5S_mG/c$,[7PrOiZ5;MYn,#0</*6eb0Rs'5><0XNFc&aH].F\-G/LV!%3N:,aMi7:DT=*HBUrG^0)fD%*_;0%P&ZCAd\*#Z
%(&a[l61=KR.QesrG$K!nkW?1]<MRIH<]K@CY[=c/(J-l=%qKmW'`a3D8+_C`LB%C+NJ>('e/BTX\fYTGgJXK;X3"@>U4<!?r"(/r
%3]ck"\TlnpQ7"n5Y?chRUQKT6bpq/=@Ih9r.FmlQiK<&UWO;,FasXLn29ap>,0,D?o;#1Xh8!ik+gd1U=V,psp"7)Vbou/QeW\HI
%NInnBE7]3Ci.$nFkVPF_2HCuV%Q.5UqmGIePc`l_d4_nNHU&,l62'X(rG@F>YIR"JEo*kFSDA6h[mf9nYa.9?G,1Euj2VmIMTCd[
%n^a5&-44^u\m<'bGQ8!$p^G/YLE'_!c6`k8k,N'+'*Du6bMO'3ZdI6B_t<3U,+!^\J$Tm)1@%Rp-tKKl$HkM)0S")<]XYbG[`krn
%qYaLIIA"\07><%NcfNkq$LB.24.%4nHZZRuk,d=TH=UqOd\B()r#s`J/0Yt\qcsPsbbllse:n>DFFYCqM:>UKZ''6l18.>>GC1Ag
%Kl(1.^j^rZY9SO0pUU1^p@WVSQ'PfB<KLCmZQ#QK+9j`g7XsR2J37KVHa\>me3RQC6J2@hoZa?6bi)%jLHbE[a-QO&p<E1u#'IAe
%HG)'Vj_B\uq`?K(%2k=/ZCSi'h"S&$*O3X-*pU_R8WN2h2A3TKNK;OX^'ZP86BEN['MFJ;D5TYE%X8cVVkuHqm^n%Mc^8e[nd]aC
%+\B')$E.i+lt!^Iqom"1;CQ;7gio>N6L:'$HQ=\94)&Q)%*`[kfe1hcn'lDqaZ&4Kr&0"RkI;.e&d8g_BE]AX_.>SXaG\RiXcsNa
%'(44*8#W`P2V?UQS6X/q2qV6,c`4`I$+'-?CCm+BG..U'6]fi5b88*khs^'gZ9;)7ZI3U[njVCV3+iM&DFN#?GA]9Q!k)T!OKFtr
%)sh6Idka*XAti#0[Y,*;Zk6INYmgeAW=1_Y]cE)SeSer&CXF4qo3dX()L++YcIsQLL9O!/?b?Dd*ar,e4V"We5csCnS<70mB-U7(
%H[9@T0iLb=LhJ(Rg3W^4A!rUoN<k/`k)#WQ)lJ[&,UrLV42)UjBmRG=+m+f,nuJaf%@b3)Zs,\P7>?S=gXPRW@)A-_/Ts59drrX_
%C8r8bh'fbaRr%P?[`fiNI%LB&W`IO!&snW>^TuQ+c(<kb6a7bF='u\%)]A9i+)S%$gV\$EEe<#($sA<#)k3BJ_1/`4_1L<b)h14R
%J9sM%Z\]H-K38HHFFJ)38Z1WICo7%%`6[e1U??sP:/O-CD;-WJ&1@ae!qisRF!E)J^h@Oq>>Z7IQgjA.^2B_/H_Z3*8jF#K`A\42
%?jsIaF/:$P#@4RbB8W]e_%'5lK&\H4_s:RQ.E^.-Xo[:<PM%&b5OO5B5r#X0ps[gUOog8MEqEC]J(\HK-qQ0VfUgbsD?KV9m8VlK
%8=(8CJ/,lY_raFWnjeBFH+&QMLotM0iZgD9p5&tO]oB3i5<?.-gAA_u&q0COpPuDa%*DDnHHkY5fVrg"/u!3V>.g56"(Wr_%*i/+
%f&2"kQI6FX"c0VQb"Zt5MNT9%0/V%[55E\&bJ)t#m,+q!=MW*'e$g+&4ZblOn0V7f$[iTTHJsh?QXarm<^0-/gkKb*m2>OEjGkO:
%mafhFEDRE&IthfSl"gm)@k6q5T7dudG=6ZJ@:PH@h]1=^3HF%2G8%^C"=1j9)KonCs0VUHHT0-f:ar\VZBo$[^,u,3NTT*+;ce7'
%hL[8HiPDW_Mh5S(:\-%Qq3>3739)U8G\+;n&J;Ho-DOAd2^G?J#^&3*O>h`KG\jRC8d@*(&-fL:1jl3hjtHt+`hP&bcA,?mXP<+_
%r&KB=O\[Y)rH4`P5QM^^BiW(rZ5Y^gmW>T6C,;S[,]Z(BAO&8&7i"@-2#D3@Cmi[^b?]gF0?$$r81aYS"/7,.'fA*?Ga662'mGc[
%!panm0;2-7Kdl]q[T'[qH6!:XS>",.\ugYS,uoZ=0iI?nMPeaBa6p,!0:F*c5F+L^OJZ+&k2"3=F4aLFF-,D@&?$(,5c--%ThSko
%hkS$XLl[C5meu,4Vkt5!(X,4W<Tss:AbK5-@AcG/>I,4dh?BWl"UIlo]A"$DWG<Iu9&A_9!iK:_>ssQBhA-S[[>(R0[#6#_dY;PX
%D=pBUhY-,V=f79DNZe&=`\Hlh?$T'4ig2J!#DD1f7Di;8$iYdA)C5rF9(!*t]HPRR5.($Kq)cMN#-A[0UP_,1j+hc1\l?.YfRnmk
%?o#X47Lsaua,nLHR8PBmlLXb*TpM.MdS9p,/>MOq3rd:E&V^PJX4ggoS3Y2.,-OrF%$@Hj658uN%5nMYpVq,-Ma&8b--X!';GceL
%gC2em2U&g=/Koa='H+kpB#93J?sHn\[BJu`NuCt]&%ih96KYf]MQ17l4SACj,[@6Kps1?bPb9m1:;[Pk)'s(MoJV._X^DmcAjm6#
%3!L:3m"iZ8WUK'9&mR_JW++"3'T/(o;FQ/kdOe&h.d$\`'?=sN:#Tr,#S**7]54OI>@H'l/Tl'V`(/4Z&\kX]:5+pl?0t6LN]aZl
%@fHcVrAdo!D$*Ls]FqOk">9c0I)o??rdaYN"3(I[[_nq,YYb\G@p`5@jD^8=o.a72!M`oQ2nAAhN'%1k=VQ.4.9D,&`U3(@?jC@&
%bKMj?fHL.?<:L\X:T0>SF0rHs#4Hnmr1LT0BLpn:RGs*e/EL<.;%\I(8&A[aC/RCYgJ_aC7a*4QHJJ5nnm[pLh02@8r(n!&Oapob
%Z11Bk!3;5>j0hLqgRJrNE[;13U!(I*@Mq-j6JP0k)Tm1#r"\d=<_.p11sDhk3OXSi[PYVZ-gAt5m?ItL&P_D[0uPH4ok9gk[:/O*
%ekE*7./dViS$,Ad&3-f=bbiZ!e7j2Qbb5A%MHJ@j2t8/MT)/UUOiR4n5njL+!=]SZQ/8YuR7>uB<jHR.4jg8=rlO(C&3sg]$BCh1
%VcqUg&Q>sLeUX:_DZj5e4nQOj68(@K0SSO0kes#H$1(InB:FL,1Q(Q(#0*ikWtT$cgJf\$#4<T@TAV6>qXH`h3D?fT<VhL#s,'].
%Hd)^7.=,nGLT"_beNEU#i8Kc\,1.)XX>D%<*LN5QZVi=<eAV`+T[JrbTi-cgp+*k?&m'_kk#/3+V>`_IBot#&.b`:%S/E=@!Zp!r
%4&\m%TMut+,/ijcJ;ef([<uQ:3:SFS]+F3ckb'e'9iQW\GMaCYe`+@M8"+[I`pduL_,qhGa1^NUP=h(IL)L<:Lb\]f$P*Gs#_REK
%IKf"=F5eN^*9`_m"X^=#Kns"S=s4-H^.tI*agRKW^VA=&Uoc.BD1rifX;US%ps*n$OniI-hsR5g[HrOMbeOu5p(Cr=Y^+1aQ!VnW
%EpP;9rsS:Jc=nOA2]1r@0*Xi`cXO-kqV4#0"&,dSAND&9Rc=%+YP3Sl)eSP?0]iI-:hk4YW&7:X;q)"Be`+Mc>JktFD9neM6epZg
%%0uI`,YAaVX`QS6^W5*=A5X1QB"8fG=^,$\,F]M!M,"E`UQ$%K'(1P0+o2WN/P*fK:\si?2NAUMb0ag*lh9P]__)rD]8CpMJsg?a
%oPMMRi%,N'D!SbY:cJ6I14Q5t7-EKsd'R%\`KoO9!GgaW37=Q:'r_56'ApH?N^H=#eE46)%!J"6N`O+`3I8_\jN;9!#A&hEA$9C$
%i(O4:A4uK!?krN*THkHi$YrVH07Q]d&9t!/\HI2UMK?^cd%u%bGC$[1XrnV84=?%D7%:XJiXc;=_INcf:)lC>h][aO&:l1XV6Z[n
%!o3g9lS;usEuX.sJ:uabah5nP@u?U,:VKinZ!-u%gle+f?,VhJ$*#:@mP68:+6'1P^k+R(G'&TROf:p+Z$YnW^_heinV:=$q.RVs
%E$?>aDDt>,'hq:`k`d7LVL&hH<cKS6X=@Zo"hRQ`hIP)J;T1#q2Os/22.6;FeL&!VRtu?GIDXrYrupgdK5:N-=b2'U77nQlc+?1:
%;C<[jkhWGlF(8+#R%jdjr;WXu1QqoPZc`U[OLe'5S_SE`]5)mT5)O)kM`h.W'IfR.4re]l.#@kn/S9baQ$Gskl[q;8(%BkAK(a73
%'XpO.Vu'?H#a0PYdGWCCbjq#&9W/n#MQO\8B\ET7Zd8O2\L5J&;#.(YII;L-/nsMHph$TK+6_ZX;,aDp@"%+/g>rm&2ZYBf*e=hI
%Rs1l@3&O[TOE>c/RH-XS2)9A-*0b/!NiqXjM+qE=UW8ec\oREX4lB_)^eRsC`+,<6gALS\G[B3kFDmbGC)fq'[d2S7?J/m&lL421
%>N"UkH>mp!M&o"KY[-cGMD1]^#Dd)?Lr)8#41dV`4ENn&NZ*?=1K0A#q]Ess'`%153X4D7aIZrp2Rd%ef!_BT=sQ>*!#11rrYR6)
%WO`^`=#'H/KY\DX)C$dRTA#\Z@XdP3li[V;SA':'(^>#4a2Xa9*_(u=k<k#,&i5ABb.;,r<fKI6/i#YK#-Xhj/"'+:HcZ)(5t]%f
%>cFo%)2]oDnmpmUCtZh`ltfUj)bGGh:UY0dnOTpp5',ATa9&LID2"GMbSEd8q]LL4K?#3G0Ca.RGkdbPNBsfKN3aERn;0g]2>_'0
%>FEajAEKY6"'b<RdZJo/l6`I5Z*"Ap+@Xd-Ek;mPrHa8bSP7q-F'HT5^J\<,a<=(gqNluOVS$D=2=GI#j\)Bh5Ir$F:3g5?J+DON
%pWoorSk(e2L4"L&S-Xo8WVh4b&uU@J=CN._E:^k*$7ZTFcB3f?emMkN20n0BMSO7oGUa5*)[PL9IU8"e8[+9XV(-EPK8RCiaRF/;
%B0/CH$rLos=IM(>p]9pSlP%1P.<45n*p+4)(%*4aRoSEM7,[NPqs.1$k89WT)%Pq=EO:WC2MtLuQ(3i9UHAYl`C$qE?K^lEZL;:a
%a-\esgns(iB1B3mb8en0^.(>)k;8i+p$EXnl*&6WIYAs)8=M*AiG+.;_3c;*2^!G)a<6f#+rSbXd8)3aJ%k++lJC9COmQ1Kk1%T,
%O/>+h0P1n+dM7cHbXte.g*tp485SnF<Z**%&i%s:?nXT%.E5)ZM'FNTJ^X#chBqk-:()3a%m-4VGsOO?GJHcm]IM?7FWL'F,6nQN
%bf:gA8*5eC#^T(S,]iqXP)kZ81SOanp\7f2PqhNd5t1q]V<FSj.^Es.KHFRmQKb2O;M_AoWRMSfIOc!(8Ih^*>'&j[.=;(F5/e+q
%9_+[S"50#&lDX6bMG<*ZbdA)dhFk_&VQ/=;m+Tr7j>kqAOXE.s+hi6X*!_D]+b'U+4^(4@DisB`ZpPKYD>M:&oqLYC-J+$a4)33Z
%0P2Zi(q;+)@G<NFVj;+__*1F+=MD;>Z"3ef=$P+%X!%a8>^`)]')LEtJDcn#:0)Tsqe^/T8NTZ\-D57orJ<0W)4dm*epT#l;lm'X
%_!gK+r$rKPg'k*/ciWsk*[J<`$(P*h_@VSuQ__NE66DA$nl1&>Cg%96H>s55.j4Qr<M]n'6uFPX+H\Em4rNqp_?-k6(,fNjd-,dK
%k'!F=r1SR\<tN+"<XYE)":t.V0:V$">W<>k<]amYFF]&aa5T[W^=I*@IUD@O`0dDA6#>`&qqt58$XEk75FV_J6$\W6i5fb#j2elB
%%TO7&gcU_m#EL$+b3P[H[p\1D91c^Q^!6[3=RE.aG)o-F!]^gK@Y,-UL8[R>?[$::b+(FY[4c.UW<+kd1/Z\bq5#"Ld;"q^Vq_mM
%j&_%!8ih#sGH`J&7';@!WH4/0H!_3K:%M4mW.WU3;L0")[:ZUWeeKel`F5$t9L#q("fG_HdR'1Y"L2$f)F`:XU+H`$j!:j$9R//"
%8mZMXMAP.c6klL"faWdpqI_+CdrkIgQe;!+Gi!H#FDYCs[nfZ&o9_Y4+s`rnnW$O35)Geg+*$Fd1f_@JZd>;Ub6Q4X%Qa'2o./?H
%Z,u;$-imL.['s8%XhI%6+o*;_K(>%1>XR_33BnJo]XUBFmUn)1:8.%Wn;RK>XIs1gDNfSu(YWZX'"ok2OZsXE;.Cous*%"h7SadD
%N<Lm&b7A;+9.BMZpgJ89-N<4/ktT)>P%l`pI;m"hOYkRBU^r#+<fBUJcO?cZ/guXJJ/FJfb6%lGL*Es''JIU=>S0qcbVcm9KBb2g
%l\N-7]e.?$?V--QH?2is7T<s`Wm9rK^eAe3gLe_NZJ,S/pCX"G[d4nI?BA:./1Y=2/Ea9C,a!r]"mIRrV'b:i-*@Acd,m+]37BVK
%j%"o6Ed03UB`+maGSPqbgRA]r,=cMbmFX[^;N3&(Fpc'$1%4Q`9T4YGK4g(5b`-L:eS"(!j^dJXOeAJF;@FZC<;4R^=-^U:X&3o:
%\CK]:[q2+MYUPugdGT#JQ+]0%[Q%?H`S>g<5OP63N^1sp&T;Xm?^BAo,#0e3X@uKJ8-$)LM0;fN1UYSXh7E45#%oCMc]m*aA9KRJ
%6d!Iu6r?Z2>"oQqmC9&hR#d3q[7B<]6LuRQCNrWtXs.5l2d;_"VJ%-OdbTO^(Ft'P6QKQ7rFW.S"f;p(<ARng/9//G+gNSsBl:Gm
%#Vn*GVK/n+.EtC[br\=;+#GcnpMcUjJI;!^_1lsNUh2Dh=iDW.H?ci_3MgHu2[iZ,47]gMN5Z%+:-1@`A$%Li#WQ#1M@DC^reaUF
%Kd"Q2$`?P&TOipk>8iUH!2N<\7D:46XH^"[LdP&`+u:[Ld)7ne%$`WKk2@,>G:(r%R355`+eek<B&7sBSrD>1X]pK+)hr*:_)2,7
%MRH0mg!O2.bGALQ\iD+c[:[Go-"<s!McQS.@"c0F7k98nG+Ql))4L(\9Xh8_.ff5ABCnd*D-D\kK0hFIMmfogU1_TQ:q2O'`=9gj
%TNqT)6r-MG?Ai?=\%9]_Lqla?p2-'X6D5N"Ftd%,I49^!<a$)u\-X2mLB:(lC+;mYRlGN>r/$FgbR`mZ[dcV.0PE<R<O`jB+LbJX
%U5T4tOcV'$WT*,1*>[`)OQ>/\YTcLr.7orB>#E?%<+O$M]UGj"9o/7]O`K_V<MM!q]^l=TX"7LPs,]/PT$J'G28\/2.5+W(.[&H=
%QK&ND%$omn*?<!X<Y)/*FA;i*^bP3H19[!R&eV&D`qD9(87J-#@8pGr[b0#pgkADs!VZ4QS`sc06DEPWS=PpdO.s'7GC6;C%U)C3
%.^)gs;gh_ZpB.)9&8ZMM-We[B.MJ91o9Ar=G.!<n-#"QR)Q%;TDpWX'L,VH@P2b[ZT2p/PiLM"+niK<4ZNiIH4cMh:Prr$+Q[?%R
%Bggm&#4%dG(7Pt,Uru3aZ$e*/6G=j/"]dJj8?GbVEQ6pDpQkUgi0AkMJ?*\o>-Fh3YX.ag.^VK7hrYI@6tU7k4<bH!35(i,;b3R#
%5hQ,Im/UeT%p$e77f\fY^blUU6p[50PfTiOTZEp`P!k].3Wd(8d@mM5^geYhr1Q$X.Yfi*gTau^BV"X>H+n0]]@mgKgkMg<HcM?&
%Q>n;\&rt1nCr!4kj&#=XU+tgDLT-<M\>VnfHL%jM&1EYs@o\\'M.D\$S)fg,_q4fI#ER%a%;0Hu@P:Mhm+Aa<eh4'99U=@LJO<MJ
%$f0R=GY0(bF#K2qLeTFOn3&SJ;8`UiGg7)E"oMKrbq^=8Lrab5l#52Nj)q,,W/!4L=P'V)@P^?3b0okg;8=?i#5-(i9a3IiXbDK:
%5NCN?#m;_3`""p('rVh]Y0;R.qrXBCeRRNBlr[\rRUS^DJ8%X"gM)4O'^.1)82c=%(-n!#&oN=Nj_Dn58T""lW_$F)gX5h&Y]Vgq
%6$RGC=6X?dnm^:?W5Nb4>4EBeIKWoWW797rX$i](0O]]JSq_.g18BM-+r(9sIZ</aX\)FcWI+n]TZ=E,TTa=6>8I_4s1>D>Bsf4s
%f(3.>s%jA'%*)n+7h"eE)@QfC^_ZR`1j'bj?qEi!PjuM450mECc`+(9F[tg]4*P4G`;4^CW]Hq=]\0l"C)OI[[`=IICpac(!\ut%
%:,l+?YmW6H*U=[jduU>]F<FarBWEc.:mk0NB):YqTQI#m]RS/%>lmFMKB07<2CN?4\;GtQT+U65L-Zl%i<MW.J@bY3n^rG@s8Kk/
%+ZO\=R(e"C60br/X#NC4H=s61n`e(OorPRQ[eF2-"GB<Y=onJO18:8aV*m&[gjjnuAC^8Y@,_2(/QUm8nnYcSj\d-g):[2@_=Hia
%^t3?5m_=KTdCeP<5L;fc]@WW'AZG_N6bS6dBu1e'L.U8;q;3FEnp3ScN;W0do5IS-iIr0PT((@aFN<eu)Hhmb3D`%gmF28)USe+'
%7B)^.K"K+e6LYRl*&VXESJLKH.g-]rN4"\]gJGr4*Y2,2q`e+RE*d'(p.40m=H)9c'fX?5cU4G1:eqlMFsq(/pP3"FlOs(`i6sap
%6'SR/3Sgh]!@Xc8TE$roS#X`PeQi8phtBYgDDaS_)&CA?9[a[bLa]*2+KA?rpmPX+c&t,EI9[]\KGIe]rg$GMeW4i>Rs-M(@%KAM
%J78mE,B"F\JMbou:3.PXP*]iG&kWn>oTb>=-$0GP//$:/!UJ8&'3Wk^ruJ_>>nEI"@-W$1CgD5<q;n03Ff9g&;Mc79gh2ZKOWq1W
%$J*L<JVq'bZhjjDUi!SXKlTX&R`"T&"F-<O9?OY!IBLpGQ\TV@+bZ;o09;Y=2i\WT&,C:=UKojs^nU-(=?\PHJS^:P>W0/iD@L:"
%5iqc6N6XD"LHpRXZ4i-I!XRosb?E]3HM4*=ahk8OZ/S([7:Gsa]G,P("-:;DajFu@`8k6?_6+QJgQe"A?a=iq7r,mlng1p7-NS]o
%=,+7'blc.L5k^CjpMPJ@hKY<@gcs;lrYi5)j32='C^I7<GRK@c7^8(4N#GGu;3S$5%@"93m09-sm)0EAU@pVs>?qge^>\p6HGiH^
%@^!ISfd^CK8deNk88gjFf?#R_"4'e%f"9MSmiQpofS&pW#Z'<ia=H0M4e#l1l\;!SN)lUPA5Pkgeu&'GGYN.(nELu3fu[j4TB_8c
%HVja2Th?89L,u/71,*]fcLY4:4#a'Rn`+ir<]JPLonJte9g.=,6@0`ciKYkW'+GPB:Ek4-\lo3bN?*'P'X--UEf1)HZoeFsIut^j
%#M3$&728CP4tp,.e!S4TJ_%jV\rY+E?T`l90\[nr`^B@0-:fqGDX>EuO(624@X\%ZoTOFE2?LDGP\5IKf!Y6fY/0_'K_d8`?@+47
%IMFEC/i;8Fg#@2Y^LZ`/LIK(q()(5un!`rHrYEkDWK^>f?"rX.p7pc\]R"6o&@Ut?7pGiliN5L=!J;I;ebC^_^/bq3#A#n>]F0;]
%T%.C%^F2U+cn8U!e9&DYMNOAFen<L1)bc%6QF@jH/WTYr:O#;e(OJ";+NeUIW+u-;pnUP&*>Z>s+,!V;@Ei/dS#TpV/!.8oTrZ/?
%/BSQI\n,uci`Ee_(@NFfA?]aWZr=)_.lj*#+4j%9CBXT]C!fiO_mbf^?dAsSoJVstY&!J#>hSC/!i74#?rQ%XdHCX.?1dmO@`VSa
%$shu*[-fFt24.dMW)m1\odOnFomCG;fOdY_GC+d/VnUF&>ZZB.\uW-4c?!psHLBE#T=7loM%A/m*mt0S*!lraWP^^-ZE$TAr.p&.
%9]@`X[(YM=<fq>]2#>G:h%N]-BX9mg9WI4[CWMW8bpok('Pgp%_o9$U_bTMG?"EVY'jEQ^fi_-RT[PGUbZH?/-hfL$D>WD%pFIs^
%(tMUo<Qk!4G3FM$O<AACjlg_r!!aW?AS>3Q@VF`oajB6<5ZlS0BnFdP?[;%PcP/S\V+Xn_E3;TEpnFKk(77me)WE,Mf$=T!X^d+*
%jV2A>)'^_q$k/G8K@#'Ud8?pST@JdlN_Hb/S#b`!eZu>PR7Fr!n!"IkmBdJf*kAOUAa,u25\]o8\Fdr2j^B3aC7(eEd$9Q_]rIV4
%-)Q+MkgI:/GVT[+,nrTo&9doe9n@IB7B*Wrahtu2l)4"&Pn"Chl_d7+:dQUj\LpbQKg:eO)>>]<D-f^sS(NO\Q,3\(AQ<)2f7u/R
%,5;nL<AKD(@p"eta2.tsg%WsT@piW"TD-Eu:XsBJd,\%(X=:\QNUt20.$>f=411&)G9'PB^j!])1\o0.C"\pJrNKqe@9"A7%j2'a
%drI)qEMRGKq8%EIR6=OPcV@POg5&S2jio]2eA>Jk2)#\:&,)\0^OfPHk!/)Y(!'lgiAI(Upe?DqQLR'bUNre8<$CCt&167+]H*"#
%SJ=6%<Qk-C6qnGk-!P9j]\GIc),-E-HO@]6N?3;OqeSC07ps4$b0&<K;2h.UkMeXA1TD^%&&>,hpZ9!r!*("qB&%971d;"Ig,4ge
%LT&EIIP7uYiWb:OMu;GWd3U1].KuaROt"WW88\)l49H<u,mamC/"9^B7-Ln3YlA!O-T$BbpZJCN*7Gn3hVt+M"=34Lb)@Fr#4H1[
%"XV\Ynlgn@V@2U(E.?;A?=<C"rSF%;-7+.Xi^_oR1iHKK.^KmJlp?o,hHtfP%G]Wp?J>MlI-h=pCe^;TesaYjPUa9o'1<sH.)3\A
%0K`E/&Kb@C]XG6'&kWggN7eDolMd66Sp9AY!E+hlWQuFe.'Fo8iMepC,;@Fd[tP5Rqo]_7,RB\]P#tojmWaN\`D=[?i.?\T't@?/
%jVjsR>uOcX=ljLopVBpkHtC,agP1go>_5aoD[:*pof10F;IBBm4L?dZ!Lc[RC9oVT$h)Ss&l2NmV[A$FZQu+,A:/*T`@*f`lR;H7
%OD,'gdN,[G&iGd5M'-+2'%;Z&dFAsEe]Zoq@6F#h+R^f0Lj^?i*!)FD?@t]fP4)l?DO1(NY$X-]5*Fgu20_kNkb1e2qARa'-7jh>
%)QHb*ZquNXoLe3d]G6*%m:eP]32*Ip;=1a/8$.e?V,gke*J&F)Cg06W'7Ica=GY;=:QJ>B7J`/#M>Wf=IZJ4N3@0h8)O@F=\.g?S
%*G#DM+AN<Df/%t7cE>[DnbMfR(_;;BT7a(g=Z^i$iN!De;Lr%_!Df=2Ej^&Y@T?E1]Ja(&J-/\^2futCf9P"#H(C`I])fGDfuAb(
%#<C/F*O#hri3<GS#mBT7M!_?bE;7>%.IR9T+qm(b_''+-#A`d`P@O\!i@MbTq?_P!/NoHl_GR!.B,Y"gJ@3Je]#h5]&QfuJ'gYBK
%+:I/PI9YO]=+$)\J-s4DYLf0T9*g_hIGO:;15>tn$7AY`Si"#bUd%r6)bZ1H\7=_p)K5u1s!7BRKi1)$gE32@Y<Om2dHZL[^MCKO
%_ThhGL3a(<Zb1-#R!T##KaX%M_]<*<mY(f2)Gta8/^rs\'NgUArp`XURIdkqR`!TTr9-:L08I700K7nS0!>7p[8>MF@;\Z=H&!jB
%4E66/5$KG2YXjX(.j8n+RudNSl]Pk[4^$AuWq"qkkXTeFIO>'JXKPDcKc_KoIt,A.;pue5'S%+HRVs[<CSj_jBc>oIicYL/k2HLX
%pF.A(a/,hjWgs?##Qb=*[2?,.W)_KeF3.H,rXG>VR]pc)OK?"er>#r[.fk%AN[($6M%nn<c0?PoMXPWfEohsmO%N.c@/]l4iWm4[
%QO^tS!.\bJ[DJI9/:6Q9EZrFgYS/ob74ghXVuQp>.X.p/@M9[ZCl"@TiDg7U#]`r1W]Vub)`^>f#]oS7HO:,8?NQC`"ZsGN=o%&*
%aTZ>i%"![M.VhQY$;AP^0mQ[e\"W7HpK@9;)ZnMsDk"i[^EEu[&<RnX$6Kc60D58A[/aj(s24Iu9J"^%TcaIf"?q$G6-_Z)N*eTa
%q$1+hE[EbQIg?ES(9DhB?B2DP>]Tk&/]$BR+X@;_qPnfoi.&?PF&*@oeYNKM%,c_>EeYq.YjOgM>fdDFpkkh'_9gDb=&c$")C(I;
%7Y3btD1>"L;"3m]>C!ts?h.5S`KcjP`'ZX4C'_=-9-e8`*jL5'*H4&j"?Pc4lq?mQ)+dZ+hpBOtr"&OJl#"_-R$&TuJU:q+6&O:L
%53^b*gaKGSn.+M#gm6.[qt^![#?V*<C(Qc366$\tc2M70!_d8f?ZPBAOp0nV::*0'F=PE+=b^mOc7LlPBGn/mrVQKDX`3.Z#9T-u
%7'[009iaXu40Fejoc>rEg<%Bg4k1\:@!$`Z@NJJs&.L?+,jftO9^30I(RCg5=tdepL?1]:1qI,imopDl_QaM(3af;f]E50RO6JHF
%m)*'8^^o<b'Tb0)@i+\$3OrD=,uV\Y>C3*$agcSJR6DUbY7RL;cbI,*W`l&:FPQOdJcc][6f8X9qQLnCcE&?jqBV=sAUNsB2D0sS
%Gntr"7Kd&VVf_jIoJ4tSNY^EWZZZJV9r^a28b]ekID0h/nrsX50m&scm5Q>GHIP"Q;@B877C0,J3'#uYM/IQ&Q@q9bXDQg!.Z9?A
%^m_d?%h5jGI]X&!:+JZAD@B.@:uP4#Ne6s+.:OliD0;=3k>K]A%t=C&qgV!)l>0a^>56#7Orq&g/b72'M<D2WCM,.5&$$Wg3BD^;
%>N4"5(k&K2$t)%US:mcKFB@sP>^9Z7g8:"GWhsgAVJs^S_SCf:J0QfDoK%V.m"KLNoo(NMd_p,TW)?!7V9#*,e^@4<_^tVP:T`$'
%;u/A-%q,&iN!OUo"Yb&;YsTcLftJZs%:CBp@NfFXL<_(Rqee>JXORICG'T.sU#L?-(=p_L_I<#,+^!eW&:_8M0@Vp'g[Wmu,[Mqb
%042.TX!hD$`m.TuHYK-7WPKPb#^B^e<jXB4J7Q-rKo6^D#MWadnY=tVKH=I]B8!JEY\GRUI/'4kr"J_="]S$2a]$];/)`j3$tJb`
%;6q-M`X$@-D65C-)-/Oi:2L,OeBp>-Q@jNNL8^(9P't6b&I!-.Q>B;aEhDr\#]pW".mg/['rLNdc(O2ND\b^s$QLaB/><'"\u(p6
%SPH\ps10&'FRoc2kE-tS;u*MWQYq7g^u)$UG9aQ&!]O\k-lc28&L08<!6N2JTa9%uaLK,d9ZU41qN`,p=*XQ[o#G3X^X[m^5):DM
%H9[;@M'H?dE'4W5O?%8_*46ufnnpdG*RZfq4$!"10FFsj?m(#(no-T14Wa&2SE^csFR9bh2_9Wjpi?gc1VmU'Pe7tV4/QSukAs2G
%`mC)ubEjDqhd*hHm#]DVG,3rL88u)*4OSWtR\<!Kdbh-o)iu4pGNO[JqA\?+q@7p/UfX6/M9XA6-U>_te.ORMS>iWmh3(JEQZf(t
%@;)q*n'>\4^S.0PLnqKm/JX!E;C"fs?#K1*5WGtL5kK1_aioVlg!GC3XR?A3,u1E`9Qc3Xj/p;fHp1>=SfkTG'Id=?4T61q)"W$,
%1EUXD^3R$87pZO:Ki\8HFRdB;(#(7bj"Os2^W4g\AN\jR_MN/,rRGAJTg"ufiklBRb2SGL<)TWNRj,Ce!f2cA9IZmYX3rR)Y!uQ\
%7m.P[DK.6F-Q8m-*,`;sJgt3&o89'\rNfPNI;688N;SFCUp;L5mOGh`6&MO22I9*$mdB_s:fQ:4^=SfHqaC4dCQ78<]QD#1)ZlJr
%#Q?#^ebV948s!Y(^i%d27hhjo$_[\h$::?O3N]^3-=WC=A^JQsMd$_('bZZS#6>9!Kd$fWQcZ_5]])JgE;.)/;"g86[m&)@hJUi#
%7sE"]QuoM>8DHr%f[cs[]bT16%:k6clY9^n/GVaWc'Wb[+Y8@`'k.Zb"SHu@%%e#p@ZX?K.u<0[+U?$$motYFP_14cE0Q.4oLbUW
%F0:>R<n37iLS\*"'Y]n1,Z\]9$4r<^R-c]+2[117oWXQIU5?b-EdQ*(k=Xf^`Be61W8hdR`(l;_*Qf9>0dX5n+j)^&)khjt\Vig@
%=_5mQX2PZ<$#i=Dm8.%[[;:TEBbRaE,$uQL_14u`QSpM0:=WT+T*N%YDAYA:STPFIU[*F?P0W:c[*^aKT0d<W.k!SS<3:n25`N?-
%e-eT!U"SAEpA.Z3Q?[4WXFT^3+tt4cM+[PS't\g:>NQLkG,US'AWILlG>&rJ"a69&K$7!2l4e#uOZX_e?n9bfJANn]*UL#C'b&61
%IljNT7"HJnjFJ@;QGfV'PjEdONuF_CcVd[9*hr)+rneI6a);g>jIR>Q[gq3W`k%m(]"8^OS^9eMfpr?/Ss6.16IOTQrZ(TFil/4?
%E)1CcBNV"h!;qLS*$m,q8o@h!n-bEP#sF9V1\a5OQnY1:=K^(fmP/B\#87sT7,c<:).83OYhNSk??^AbkV7aWnhJ;#!if'lQoh1b
%,UQ9MWJS)O3RJUj\tCgZD[=f![*1RFFAEDJF`XoJD(0/:I:&p9:Kl(Q*Bn/ZJVl941<*0;(5M]p\Nt/bBf?PalmE"49admerqfB=
%n;/Uq?,%CKZ_Ea;I7:Z?:[tVk)/hfj$nkC.hOnmJrSN!JM-0Oo\l7sC;9@X-Q]Wk*-Rtm(-J_V]YOB!\kVPW0*PIndo?"j`KWE_f
%=6M"T(K"sZ^D.;=f:M;=R(L;1S7$r0',L2/:mT[IOV:*9E08.mdDa)Y)r=XeQrSE-Elb`H(,^p+DG%ra.=[qlco(Dm1f0Y>\1([Q
%.gnBSBS(-gAa^eMR[XS71=(F:B2U`W-Ie686\IA&Y#k<s\`%>HZ@sir#E6D4E1^rOiC$nc6@:BmofS"dW$OePF^@[0_TOJ&eq!;S
%/.dflHNR'iZ@u8X&;?B=G=7afa^A#J(Z-ae*N45'@GRpYH5Ar!+]ZP5gAfabR%MGdq@7.6&Kl,FG0`/1<=Y%2J9Oq<TMBh\5;Qbe
%OE'56joGmBLY$:MBBNn<@A;&"l+ArZcnaW[i5VM!!(OYT,*bJ4DVn8i\5SIr`A5U;FN-W[]PnpUaW<f;9VIiN*GgG&#h\T:.6f/-
%GN-Of4Cs*&SpRK*IeqW?cN0PXgPaWlXJn'V=<DASpB8hE-aDbR:DX":'^[*Tm4"X3/\fPL2UYiLKC5Osdt%K`f`:3*HPh,&E([['
%#*t\lH\M\P66K,@\UoDOf5g_s'I0E.jHeD+[a6u`45LAJgu+'l=&M02%5sLXF%c3tb$_Ng/mijS$s$t#aEtY0^da3,2k@20UE;3n
%T`bLh5i\?MVF(*Mrg-r\CTJq`U'@2InW`u`0N$D*=[-7VUk"^9O1YK(%I>r'iC[e&<^gaGQe%Rm)3AWQ*W4Vtc0B&$0Ik/V7sZD;
%SVKKk1ZQ8u$ml47E$r;T`XD(ji+s@%FgQ-R4*X`.B0YAq+?"3/pb)#NAt]@@A[@K#>bsPR^n4E@$S)N6,_uZ)U1mq:;)ADg)snk5
%/qp%:80#/r85h-i`=,C`m[+<u]Om"b2/1R1l,%H#8ZsK&c+jOam,jf\>DrniP8K.]A0]8dJZQ4/0BK=T1/0YNhhf8kJd+%96hC@q
%334Uf=LR%XdLiB=4a8M_eZN.bd6%=#!?*;&A'm?]:Ar=!'WFmEL'\huGd*VHOqrik*iAo:hS]epFe=NZ%`Lb"XMpe&&f&Cj"%IiA
%E;t3,muTrll^;#cT!Y2K;N#p[#RfW%"F2f/.K$'QELmk9cD4^3&^[!'fiCeT\4pitg9":UQB<W+b&cqU+dN,s=UTHmO_hU1$e28g
%AOU&8pQ1KL=O]3Rq75N/Ess(3&S(I]l404idnR)s&uh^Ql/AU%Kt9hs:eHI/BHj;q:NgR_75#K94hp`cdLYgX,;-jgj^-(q7cSCZ
%r,"@ZUZlIbkA=CA3@aotE.Fb3NpE46Zei%,\p$+^!V&/C67,;4B7u62V9LF=o/9i7(^c4,Y@,\meoE*ZlNT-Z)aY0<#SD4-`E<J+
%l'gSX@V*#-?VM$6=i:*AkbUSc_4%SJa5IY3R.4rme>\_NhEEbZhsblp_8;:i#Y#6_\Ph4t<uQ$3l`2:QRp(1M8p*eb0\/S2%>#EA
%b<l\uP<Yf/kf_EuA'X>7@BAY=778/TXdLJDhFZJ5FOrW7(qKgOY$]9foA`[6#[-<c0FB5#UVf=Zd6o`:G^A'W07c.*K9NPUp00@u
%a,Z5&P>anI@1%K80NX%4E0P<B.Wmobp+jMf<;50-_Z_&L`Ep%Y2<Xr1I#nsB#np$@66")I)j"shfOI,mU\lZ?%F7F6_;nE\Mqf60
%eC8V0IWUf6B;cI,E[RbrJT]+giZo.g_PLQ+c[J[+lusT+1rW7pD6t_U0\VLL`3c$QI]8<dMf>JG&*j%R\Cb%dcR>$5/J0Ua#Y(.'
%Q7r+?Uq^_gVJ:J?7/%<V2B)<ZSMk$6S04P-N;@om?&?pG%r8m_4K;[R&s/^Q:JLpdWX%n3bl+q>=;R6+TCri@*c.Y!c;99qV_Nn.
%M!qG@o.CDZ#6<JLkKA$!)U:1n(Djmm^/gOc'dZ>.[KPR^E85E4^t1iX&BWa<RjqNR"HpB35O><3ZLR,'R/,I2b8CT`F?S`$HP>)6
%pM:@QjT-Gu%!,#J]O;&SNppI6-+m`N*57"knPJP>^HY.JCO>\6^N74qedXo!,sSJgiM:"W%lcq7*Qe4mLEPM<Wj>;P)*3qYgn^pJ
%#o2@1bZNLk!;</)T2HH")W?N&0os,-B/=&VO)E`nl*Cp0LJp"fA@/$kUlYqnljqt]8@$lh4qu0?NtSO#4m/1DQO(Z8LlONYD0:Y'
%.&"t-LT4]=S6\:/MRg]&3GT!2,m5s@7&suo\6E^"JQbQDrq,s]kMXj6<1Y:$?#,_"ZVuc*9p4%BgFEe>Ed3sYN^eG`<2FBI6LC+i
%!$P>28Oufa#k[Y%BjQj@1!S,j:!s>?S6Rg;M:p80]E2'h7t#mao\#5jn*t(7>$,YjfYi6F_D1(.qDK)C''=g_bfTi6psu1`5)ZS(
%!(Y\)"TZ9E4J3XcPjod6"l,&rDGM+p,Z&u/".WZIr`+WT=Gu(sGWq&X\O?65l4]\,Ls%ERr+h<"W6cOMPQ*;cJmGVl.ttn4AOTjo
%8h!V7lfsI4Z`?s0ZN?h4m>2I?[as8MeO>@a*ATgcR\d,i:S[98QoOh;jcqTs)@SR;T6L7t[7;m;m*"S/XgD]/aqS3.cencTcO\06
%l9lh5"9+]20,dhEiC,!W^9Mr85ak\7-Wq$Ck2g#Lns%FuiBuN(AZBMB&MeIs4\atAS[2`%Ei><f<R2to2Fhs.R\S+:k8G'W>ChR&
%QL4J/HtN3^o,QI1UJ93ZcL9-F5M7f&&r\sn>$8e#$7pA6F?)jU"4j<Yd10Bs+(m$7n)+*<-r^g9$Moj((P'DDi@57m(+&oS5LUfj
%![8!pF"OGlIS)I`WkSmZrUDO)%bXq8.ea):0@c;hgZ$-j:+HZV;Y+b`?b3>DoFF1LA-;um[YW<0nP?m5X:Y47"%bhG?Y2<fAjgIJ
%o0\XB',H2Bpp(c0/>-UpeY?7Dq`gKU7b3fQX)PnXRCL@,7$a*"S4u4bOJ*XN'HDStiud-Y?"G=#m3dDRJS76X#jc+2guGFDKJ:*9
%>,p.#7bO-K#agqkO!1r4h>fO[93[#js5LNNX$DI,:_^$5@Su$t$9LQl,ce'Zn3M`%>X<^a>9XLkLjOR>LVK4kMRMGo*qcPF$!J#h
%Pu?Qa0o9%BUPL3-Sp&2IIsUpWg`WQ,ksd!PWh*;q^eLe_;`9eaEb+n9&?%H\ZcTS5M,:]!)/J,b0[$PC#Yd[Kdo(Q,b).3S]*sf#
%h/_eU*-m<9W6d4m1Q6-UBEJ;NQX^s:mGT+\]<J&t?F3)X4mu\,5[8<#m7LZ\Woftbe_pq7nr5LFqo:Ac%2\K1b0(PWkc6R9XUpc3
%2g90D==0J"&9madO,[Oh2p/s>Ag8N]P"V:MF;]q_76s7dis=@*5uQJnWG1;7Ym*9[3atFLq4\WOFF;J:-1<6/FG6*[,*$Q"U@4JO
%Z_%o07L?hu;8mNr;FhU$qXX/6LHK[)63`LJYT3Gi("eZG.s<`hWiC3uaFocYdub\S&'[>2M(F*u;'[LYj:70FlAplO=2N7pM@Rf.
%qU%9aWK(;B3mUb10rUaQVon<%&7"%RJ^Dg.!`',f=1qW[Z)`6]/':#;RPLOZc!ROJ$qsO>1e&N6DR?Co2_8IP?5f(L90seG=@CCN
%4]]`Tb#++rdJ`lcmH]K'qD4XgkuOR^)Z,ca(n-+/"[#"P,239F'B$f5XNo8G/K>6X6<XsNT&(P"E/nl:B\hW`V89(Wp)QBW2fLG8
%5O4++0'fnm!SoCrA[bP]"J8+Y&I>MI'ndYmf'4riD8@eA4LfbLUoM(%]Du"-#?*11]SZ!$5*dHN:Tb4XZV6S>+f(5XYF0L_JZD6)
%[$"1+%nf75*2rB=$cl%<)S^YnD*t9N.],,s+):&A&bb<LZDs$V)Uq#f!'@7DT2YBOEH7/e*foCPi8j)g\Oa`cl9OG"6e>_YifjrP
%mW+:Y"*pjEpr;(!T2:f%_hn4"2foOAI[=P"a[=c\*=I4nfQfE]hP('C$2*eA_.O4<j\?RAh"$uU&]_>o"Xg#kH4ejRGJF(da@Vpb
%dgH/qCBe1S#HakR0&0(h/_lJ4kR&#l#O6[:OP+1<-(X.$<:pKqbg0>ffC[7[C19cJf^o[BBZLsT#%+-Sn;\VeG$suk[/-rPo`Aa<
%`oD3@q33lZVugSB.g*)(5dV"-FTKp?7AUXbCYBeBm!4iTTTWQeA\u.[RMK`:%ZO?#k3S1;cQDH6`:u&7PV0aZ(&HtM/GphVP_GQ&
%P8-Fc^UL/aiap!keA(mO*2@QJ^RpSU-gmDM+r<6X%4]I\UPOpPgBrJ^.2%m[0Kd`tBM0#gpWmPIQZbW?I)l`PmVOp#[7DP5nr&Bt
%A)l2d"#l;PK[Hf[$D$Qio\d/J632ffHXgRbafX`Ei[r_]b?[KX=4g.\\pibY/l=#5bh54p537f9_n"R>m?KN90U'!5AJ#\D.\5F#
%e6BBpiot9_K=JP=Y%c*J[J6+:Z,;jRMaulP7TjF14Q'j2T0I*C[Jk4FWo3*e6<c^ghtP)Z(IkT_qfK(AL>Y9$Z;hQK:Z6Q'JCr=(
%l[hO*e#Pd5+1WOfCG3VC.@KSkVZ$G3YKeR/F0,"#ZN*.;)(uaoW&5+l`SBpE@(uK)$Xhbg*Q\qchWDl5Un(9$[/bQW8,V?;0s;?q
%'(>FLD>PA1K""a3(`;B<9=djif6Vtf^S\F1=P&Eg3,)%EhQ1;FWsieKBuZ3trn<90-H^L\^XDQfoP<3<n<N<-0UH5%[b0qm7R,Ng
%9?61cHP&L!p,+t@Z/'V.H@"I-FTRJ*kUgZqY4Pqp"aRZP5MhT%S-V)i%qNe-CBWHt]XD$g,>]@]!1+)dq%,+[.a^)aOq=W%r,u?Y
%?u_C,"X&[`AicVgT=,_8d]bj=f\N^o`\2Di%jRcdq7[6V.%"`C##"'hge\;*J8Xg-R+H22CBF/inn/V]<+FdYG@\3><s:'fQ5=s"
%hD]bCB;puRbnO&)M&Y]$%goI=R]?cTOWXRdkFDuH59==$,??g&17d1]JJq=.UX5_-c&*E874tmEDCdT#5[;]1mtsh+i!u_UDf4pk
%-VG.S?nI/o)4-DFdhG^n?>:6L(0XC$LJ;G<U%cprXp[1N5W=>!+%P&/IcFS1Q!>_T"Prkb\'e:.!.#Qp!#-BQUi#l!??<W^^esIh
%?eS7ORok!,rA\fCPS+I\@G)r50G"#d;p"tZVTWh`J0t$7WWU@5qefU*:MO=OEaH-2&rfBTdYEfipf(Q//D?bs<Dr$=R-2Ua`EL1(
%eWLR*MH^_i?9/u6s2#KTlp(@VYDmq+h\ZWkQJ4A#c.(b@j"(X9Mr!j;;)MWtg#4%dW=R$2Y*bZi)/*V@NiiTlT57HmZN-4V"-Rng
%md?pT$9M%[r`^eE>\]Z,rt;^./cTDmX5V;Xc7S/08&)tq,2_M'!jAo%n='kFE;3fn%t,5^IOQ]N%!<?!2N<Em%o?WT/[bXk^2Mmq
%*Q$cOS"+6tgo'sNeUq<[H0V#TB9F=MScgqO7IsblD]L@^A0"sl2'L#EDFZ8Z;6<Z$n`Ga]^4:7OMCV?HS`P\?*irr;(RI_SR5M0R
%-`n8gJXD3Em=;AUR+,/"lDQI]WUFIg8E>mA;c6-9pH<__`W[%aXbILUo-i>58)`QGhVD?fq;C`JKJ#!^4DlM5Q602eZT9s>Z`\pA
%(]\tYHd54-'<4#nf,bQ-2X,NX]+!PnW=H1/SMhrg?c*tm;`$*j!hVSmY8YiLpE%q\V-1_?fI`kC4Bcj:n#/LW\AKmT_?paG3eRSG
%R0kIa_F'Q_TI0EMhfQiCUP;/U'ouVhbuqfmVI&[Trq7_:$rkU\Y0islj!HEDR@JQE%m8_q_SF]=)=uhs]uW(X_,uXIZ4)^X7!hrZ
%8Pr:faRuY)BP7FNUPTrJjZ[PkF@MQQMUr7)p1/@r!.0\89S'7k'sH9Tc*6?H\d*!JA*EjLa05_in6@fKM#-k$mD^6cnKaWpaSd"q
%2?<k0&Whq4;>dO]HgTAk#c]p(SS0g348&#a]o+>6j1M@BGln%mIQ$ZPnr*QAZpfM^SnVWFGRjoI1\9'GSbqu1qr>arD:hJH>j3iZ
%hB)Ln#jmh@If*((iQM#krH"2<PL&;sm5$"P7=q]2^AG;k1O!R<h1$&i^@KKs:J;*S"o.CNnV#Q^`:MbAj@ntr_20N]4:e6:S5J&Q
%-nVOqiJm6(5a/=pW:u^fhd&uf70%[a;buM'_U^g/jA5b7l-GKo<O+pl$BWIkeq0%sB>YJ$/GIdj[<Zqoc5,rDdK:8nXE<i[\9eIl
%qa")bmm61dZ(dl>$5NhGBeP6]gTpt".K5F\-F.(*roeEPp`uuaE+O--TBCW!KYn$%C#!J$LIX[>?9\rA8^RqLgn^C!0rJb6QY7m@
%6RWSpjF2+;1Whb?noV"iDTO9@rVa]hfL8Hd\m'eBn_n0Vai(sb?ih.j*,LL"CUi$YmZqcM!kl<Zn"2G[-/P3IMVF(t]?QmBKJ9aP
%0Z*inTcqaX5j].I4sGb%46R%i6cRYX\s]h:hb.]q'"oJ=VBk>OKD1)CL9Pjh&01eN5YZUFjU2o+TsK.hSMMHgZiCFao<Vdmq:RN-
%K`Gr=*KfSuWic8;;,4>4U<5u\/9pEXN7@IR.AAdnfYe2^rRWFc!!Cs\b/9GC.S;U)B]-8s]\s<FE.^qoGA$"6]^.K1pE\bs`,iA^
%boeM`]ojf[`gUjo=3ZlT!jcBbhZL%i:J[uqN>k7?AHt`.W)+%/]9"QnUuDFjVA[J4It=mfocBYo-!9&S!G#6QAPJ>5r,M'[6]5ZW
%q)]=6YRS*!R0M)Aj/_Bf#I#B']<_)GV(a[61/o`^3J.k(D*:9]rb?&HQ<&q@UZ6/5QlZ8LC[0='f=);6Ec>AAU4$:C7b20k9o97P
%&o)S\+aYZa_D@NAo91!SoCHSe5]9deBV;H%_??+A_MM1;e`B59,3##*;KI-+m#,mRI7i>brea-/2G2I3:af"Mb5d"&[R!5.P-mZN
%lZk:4\t<fP9ZN"A@+\W@/j%L3Kt;D*UN,T%(g,HH-#._*!8s\Oo>MO."9?SB>j8D/l1S#QZ-+<Nr,]T@HJs/G%6`Pp0j$iG)V/"G
%':CnEUa!"\)dq@#LK^IF'%8\FrIWd/Y9um!Mb56FdN**s8pG38S.dKo4\\L\.6"TEF#m4>6/((*HK&uX$Bo:ukFREsA%;W0r[:Am
%,3G1A=7`"C.P4GZac>PBY%!&R$robl'A?AZfKD'H`SJF]4e<a1QVc;3q(S^Z2oQ,OVa'>SAudde/N-^X&g<aa(S+P&oqS3>A!nZU
%'IA2':ga:GQ.+e(BPq1"/bJHW-^du^#C!'kJrNJBrb,Id'e6-!)Dm\ue\*>`Y*LGeP#ea@,u%<A*^kTmkm;T`2;!5#6MkNrJpl@G
%i<V^i+(jAG#DkGUO#X_o0qBofBtMd`Lf3Q"Df!/29&a*qr"XZZ^<>CElT,U3ZC;9TOilAVkNAV`&e6"Ci9A:sqTBO#4f?)rAGXmd
%2S-VmpJQS2`=CU=5$3V8#Bu7VLs[L[I^bH!!%ulZ$BRS5Q_KOMg+AnGdSq_FiD8M0-"jE7Z'n9tH59)+LG4W--r#d3^!F&8#Q@3*
%52!l^ZHK.<q=Z7V&m0&VrM%B+@BiN4E9soY*;fY>X\.k%+Wa>/d9M)4=GsSnP6N'.#!>#?"&052(ZeSA)%YDcm+tnZV4h.A4fHG.
%/XWR$iY/lefN*6_Z-+&JJhSQERr3kNZbdM:``kCEU(EjFTG&"tj%:PAeQU.Q>b/:e_SJ:T<^6IVe)l_V=f^\(m/Hr@[PL&5-hd[r
%=&r:?GuBBk?nHuOpr)NrCMNQ+>Nm-9HU6GHPoF`3!?JK823fB<!d8DnSk(3sXaLBT_tp0VDc>.l?^8C)kAT0hif6!E9E8HBn?6h%
%.i!6SM\s\U5_m`_dMs&D<HI-I"#FSJl'OZW5ILjlPj\L6<IVNi3*^[BS`3J-JIkjilMQd_,Q/e#W9@5\kg;(qD8crf]RW/T%T^B:
%hCM.CZJJ<<I))h,]>1Y!g'Ie#>-O(M/BYZT[sF=p)BaHu*\\eb!L^(+5M>_A$uF%M$a'48"U:GFf&5C`R-3aQR?DHK.tWgoa-DlG
%ZI^BD3U;8qEr#;s(Yq.tJ?feI_=4gL1IJ6n#FB#NGV>^PG;O^Z7f\Sb;%73kOJdbifckc,[VKU8'Pa^6gCp48R<mm.@\m5gEOUUR
%AV4/kA91%8b`6^!*"5BhnHaBjqAZ1K-"$_<XJi[.&$A3Zn]k1bZ_9br%kYrqk,$u6dJ(#6quh(AVLX%Ib4?o)FT&7V9:'P=4=uan
%i:/=TN_G?o#G`2++B$o#Sa*C]'8[W1o7_)P7D\gFMt$74/JZ3:q<$3i>N#VdQkaH*AZg6J/:PqaO\u)#G6P,OLLHSU]daqURtKt`
%8u7ht`B=gd1p^!ZJ'#6.jlAK0@F_lN:&EdMbJt;8&?4A9hf;^%VW:`NrK-K^MN5H!pSpd^XJ-XZeW(/-hnDaX5C?A8E=9si=^1;1
%JES2f</W:\'Sc1?c6%_41A$HA&Jp9s/L\B4B4]V4p6PS393GiL@lp"O;=BbeKCV:*nn1Vn7jQHJs7jW!r96HDkOCe9j_t1qjk'P,
%gHXQOmX[V$f3eRKgOK+@YQ*p<s7VL<ro#O1r:Sf_T76anhu<Un^])u+s6'BZ:Oi2\Du]aE^]3?':]L?bJ,d9BE7+!'5Q0hRrl]ff
%iue7b;Uo*5~>
%AI9_PrivateDataEnd
